CREATE OR REPLACE PACKAGE BODY PA.PKG_CIERRE_DIARIO_PA AS

/* -------------------------------------------------------------------- */
/* DESCRIPCION: Migracion del cierre diario de PA                       */
/* -------------------------------------------------------------------- */
/*  COMPANY : BANCO SANTA CRUZ                                          */
/*  AUTHOR : RANYEL FELIZ                                               */
/*  DATE  : JANUARY, 2020                                               */
/*  REQ  : ##########                                                   */
/* -----te --------------------------------------------------------------- */

   FORM_TRIGGER_FAILURE          EXCEPTION; --Equivale al FORM_TRIGGER_FAILURE que maneja FORMS
   FORM_EXIT                     EXCEPTION; --Exception para simular el Salir de la Forma
   PRAGMA EXCEPTION_INIT (FORM_TRIGGER_FAILURE, -100501);
   
   --Constantes para simular el Alert
   AL_STOP              CONSTANT VARCHAR2 (10) := 'STOP';
   AL_CAUTION           CONSTANT VARCHAR2 (10) := 'CAUTION';
   AL_NOTE              CONSTANT VARCHAR2 (10) := 'NOTE';
   ALERT_MESSAGE_TEXT   CONSTANT PLS_INTEGER := 0;
   TITLE                CONSTANT PLS_INTEGER := 1;
   
   --Constantes para simular el Exit Form
   NO_COMMIT            CONSTANT PLS_INTEGER := 1;
   NO_VALIDATE          CONSTANT PLS_INTEGER := 2;
   FULL_ROLLBACK        CONSTANT PLS_INTEGER := 3;
   --
   --Constantes para MESSAGE
   NO_ACKNOWLEDGE       CONSTANT PLS_INTEGER := 1;
   ACKNOWLEDGE          CONSTANT PLS_INTEGER := 2;
   
   TYPE ALERT IS RECORD (NAME VARCHAR2 (10));

   TYPE TALERT_PROPERTIES IS TABLE OF VARCHAR2 (200)
                                INDEX BY PLS_INTEGER;

   TYPE TALERT IS RECORD
   (
      ALERT_ID     ALERT,
      PROPERTIES   TALERT_PROPERTIES,
      STYLE        VARCHAR2 (10):= AL_STOP
   );

   TYPE TALERTS IS TABLE OF TALERT INDEX BY VARCHAR2 (50);
                      
   TYPE TVARIABLES IS RECORD
   (
      CODEMPRESA           VARCHAR2 (1)  := '1',
      CODAGENCIA           VARCHAR2 (5),
      CODFORMA             VARCHAR2 (10),
      CODSISTEMA           VARCHAR2 (5),
      COD_SISTEMA          VARCHAR2 (5),
      COD_APLICACION       VARCHAR2 (5),
      USUARIO              VARCHAR2 (20),
      CODIDIOMA            VARCHAR2 (10):= 'ESPA', --Constante de Idioma espa√±ol
      FECHA                DATE,
      FEC_HOY              DATE,
      ANTERIOR_DIA_HABIL   DATE,
      SIGUIENTE_DIA_HABIL  DATE,
      MONEDA_ORIGEN        VARCHAR2 (5),
      MONEDA               VARCHAR2 (5),
      FORMA_PAGO           VARCHAR2 (1),
      NUMERO               NUMBER (10),
      UNIDAD_PAGO          VARCHAR2(5),
      GRUPO_CORREO         VARCHAR2(30),
      IP_CORREO            VARCHAR2(30),
      CONTADOR             NUMBER(3),
      FECHA_SISTEMA        DATE,
      PAGO_EFECTIVO        VARCHAR2(30),
      FEC_ANT              DATE,
      FECHA_CAL            DATE,
      MENSAJE              VARCHAR2(2000),
      FECHA_SISTEMA_CG     DATE,
      TIPO_CIERRE          VARCHAR2(1),
      COD_GRUPO            VARCHAR2(5),
      MONEDABASE           VARCHAR2(1),
      ULT_DIA_MES          DATE,
      FECHAFINMES          DATE,
      SALVAR_REG           VARCHAR2(4)
   );        
        
   TYPE TCONTROL IS RECORD
   (
      PRIMER_ASIENTO           NUMBER(30),
      ULTIMO_ASIENTO           NUMBER(30),
      MENSAJE                  VARCHAR2(2000),
      LINCONTROL               VARCHAR2(100),
      FECHA_PROCESO            DATE
   ); 
   
   TYPE TCALEND IS RECORD
   (
      COD_SISTEMA              VARCHAR2(2),
      FEC_HOY                  DATE
   ); 
   
   TYPE TETIQUETAS IS RECORD
   (
      ET_MSG_PR_1              VARCHAR2(80),
      ET_MSG_CD_1              VARCHAR2(80),
      ET_MSG_CC_1              VARCHAR2(80)
   );
   
   TYPE TPARAMETROS IS RECORD
   (
      FEC_INI                  DATE,
      COD_EMPRESA              VARCHAR2(1),
      COD_AGENCIA              VARCHAR2(5)
   );             

   TYPE TJOB IS RECORD
   (
      EJECUTA          VARCHAR2(100),
      CodEmpresa       PA.PA_PROCESO_CIERRE.COD_EMPRESA%TYPE,
      CodSistema       PA.PA_PROCESO_CIERRE.COD_sistema%TYPE,
      CodProceso       PA.PA_PROCESO_CIERRE.COD_PROCESO%TYPE,
      Fecha            PA.PA_BITACORA_PROCESO_CIERRE.FECHA%TYPE,
      SqlErrorApp      VARCHAR2(4000)
   );

   ALERTS                        TALERTS;
   VARIABLES                     TVARIABLES;
   CONTROL                       TCONTROL;
   CALEND                        TCALEND;
   JOB                           TJOB;
   PARAMETROS                    TPARAMETROS;
   ETIQUETAS                     TETIQUETAS;
     
   vCodRespuesta                 VARCHAR2 (3);
   vCodigoResp                   VARCHAR2 (6);
   vMensajeError                 VARCHAR2 (1000);
   CURRENT_BLOCK                 VARCHAR2 (50);
   gIndent                       NUMBER := 0;
   
   --<<RFELIZ>>-- Utilizamos la variable como Exit_Form
   vExit                         BOOLEAN := FALSE;
   
   --Cursor que trae los datos del proceso de cierre.
   Cursor cuBuscarProcesoEjecuta is
       Select p.cod_empresa,
              p.cod_sistema,
              p.cod_proceso,
              b.fecha
              --b.cod_agencia_ejecuta
         from pa.pa_proceso_cierre p,
              pa.pa_bitacora_proceso_cierre b
        where upper(proceso_ejecuta) = Job.Ejecuta
          and b.cod_empresa = p.cod_empresa
          and b.cod_sistema  = p.cod_sistema
          and b.cod_proceso  = p.cod_proceso
          and rownum <= 1;   

-- Flarsen 21/05/2023 Se Agrega procedimiento para determinar los registros por dia para calcular. 
PROCEDURE Obt_Monto_Posicion_Cierre(
                                 pCodEmpresa     in       varchar2,
                                 pMonedaPosicion in       varchar2,
                                 pFechaCierre    In       date,
                                 pMontoOrigen    in out   number,
                                 pMontoDestino   in out   number,
                                 pError          in out   varchar2
                                )
   is 
   
   vMontoInicialOrigen        number := 0;
   vMontoInicialDestino       number := 0;
   --
   vMontoComprasDiaOrigenApl  number := 0;
   vMontoComprasDiaDestinoApl number := 0;
   vMontoComprasDiaOrigenRev  number := 0;
   vMontoComprasDiaDestinoRev number := 0;         
   --
   vMontoVentasDiaOrigenApl   number := 0;
   vMontoVentasDiaDestinoApl  number := 0;         
   vMontoVentasDiaOrigenRev   number := 0;
   vMontoVentasDiaDestinoRev  number := 0;         
   -- 
   vLineaValidacion           varchar2(50) := null;   
begin
       vLineaValidacion := 'Validando Valor Incial';
       SELECT MONTO_ORIGEN, MONTO
         into vMontoInicialOrigen, 
              vMontoInicialDestino
         FROM di.DI_POSICION_ACTUAL
        WHERE COD_EMPRESA = pCodEmpresa
          AND COD_MONEDA  = pMonedaPosicion;
        --
        vLineaValidacion := 'Calculando Montos de Compras';
        select Sum(decode(Cod_Estado,'A', Monto_Origen,0)) Monto_Origen_Apl,
               Sum(decode(Cod_Estado,'A', Monto_Destino,0)) Monto_Destino_Apl,
               Sum(decode(Cod_Estado,'A', 0, 'N', Monto_Origen,'R',Monto_Origen,0 )) Monto_Origen_Rev,
               Sum(decode(Cod_Estado,'A', 0, 'N', Monto_Destino,'R',Monto_Destino,0 ))Monto_Destino_Rev
          into vMontoComprasDiaOrigenApl,  
               vMontoComprasDiaDestinoApl, 
               vMontoComprasDiaOrigenRev,
               vMontoComprasDiaDestinoRev  
          from di.di_posicion_dia
         where Cod_Empresa = pCodEmpresa
           and Cod_Moneda  = pMonedaPosicion
           and Cod_TipOMov = 'COMPRA'
           and Fecha       <= pFechaCierre;
       --
       vLineaValidacion := 'Calculando Montos de Ventas';   
        select Sum(decode(Cod_Estado,'A', Monto_Origen,0)) Monto_Origen_Apl,
               Sum(decode(Cod_Estado,'A', Monto_Destino,0)) Monto_Destino_Apl,
               Sum(decode(Cod_Estado,'A', 0, 'N', Monto_Origen,'R',Monto_Origen,0 )) Monto_Origen_Rev,
               Sum(decode(Cod_Estado,'A', 0, 'N', Monto_Destino,'R',Monto_Destino,0 ))Monto_Destino_Rev
          into vMontoVentasDiaOrigenApl,  
               vMontoVentasDiaDestinoApl, 
               vMontoVentasDiaOrigenRev,
               vMontoVentasDiaDestinoRev  
          from di.di_posicion_dia
         where Cod_Empresa = pCodEmpresa
           and Cod_Moneda  = pMonedaPosicion
           and Cod_TipOMov = 'VENTA'
           and Fecha       <= pFechaCierre;
    --
    vLineaValidacion := 'Calculando Final Origen';  
    pMontoOrigen :=(((nvl(vMontoInicialOrigen,0) 
                    + Nvl(vMontoComprasDiaOrigenApl,0)
                    + Nvl(vMontoVentasDiaOrigenRev,0)))
                    - nvl(vMontoVentasDiaOrigenApl,0)
                    - nvl(vMontoComprasDiaOrigenRev,0)
                      );
    
    vLineaValidacion := 'Calculando Final Destino';
    pMontoDestino := (((nvl(vMontoInicialDestino,0) 
                    + Nvl(vMontoComprasDiaDestinoApl,0)
                    + Nvl(vMontoVentasDiaDestinoRev,0)))
                    - nvl(vMontoVentasDiaDestinoApl,0)
                    - nvl(vMontoComprasDiaDestinoRev,0)
                      );
    --
    pError := null;
exception
   when others then
      pError := '['||vLineaValidacion||']: '||Sqlerrm;
      pMontoOrigen := 0;
      pMontoDestino := 0;
end Obt_Monto_Posicion_Cierre;

   PROCEDURE EscribeBitacora (pMetodo         IN VARCHAR2,
                              pNivel          IN NUMBER,
                              pTextoMensaje   IN VARCHAR2)
   IS
      vTabs      VARCHAR2 (50) := '';
      vStars     VARCHAR2 (50) := '';
      vMensaje   VARCHAR2 (1024);
      vOutput    VARCHAR2 (4096);
   BEGIN
      FOR tabs IN 1 .. gIndent
      LOOP
         vTabs := ' ' || vTabs;
         vStars := '*' || vStars;
      END LOOP;

      vMensaje :=
         'PKG_CIERRE_DIARIO_PA.' || pMetodo || ': ' || vTabs || pTextoMensaje;
      PA.BITACORAACCESO ('PA',
                         variables.CodForma,
                         TRIM (TO_CHAR (pNivel)),
                         vMensaje,
                         NULL);
      vOutput :=
         TO_CHAR (CURRENT_TIMESTAMP, 'YYYYMMDDHH24MI-SSFF ') || vMensaje;
      DBMS_OUTPUT.put_line (SUBSTR (vOutput, 1, 2000));

      IF LENGTH (vOutput) > 2000
      THEN
         DBMS_OUTPUT.put_line (SUBSTR (vOutput, 2001, 2000));
      END IF;
   END EscribeBitacora;
   
   PROCEDURE Bitacora (pMetodo         IN VARCHAR2,
                       pNivel          IN NUMBER,
                       pTextoMensaje   IN VARCHAR2)
   IS
      vMensaje      VARCHAR2 (1024);
      vDebugLevel   NUMBER := 1;
   BEGIN

      IF pNivel = 0
      THEN
         EscribeBitacora (pMetodo, pNivel, pTextoMensaje);
      END IF;

      IF vDebugLevel >= 1
      THEN
         IF pNivel >= 1
         THEN
            vMensaje := pTextoMensaje;
            EscribeBitacora (pMetodo, pNivel, pTextoMensaje);
         END IF;
      END IF;

      IF vDebugLevel >= 2
      THEN
         IF pNivel >= vDebugLevel
         THEN
            vMensaje := pTextoMensaje || ' ' || PA.UTILITARIOS.MENSAJE_SALIDA;
            EscribeBitacora (pMetodo, pNivel, PA.UTILITARIOS.MENSAJE_SALIDA);
         END IF;
      END IF;

      IF vDebugLevel >= 3
      THEN
         IF pNivel >= vDebugLevel
         THEN
            vMensaje :=
                  pTextoMensaje
               || ' '
               || PA.UTILITARIOS.MENSAJE_SALIDA
               || ' '
               || SQLERRM
               || ' '
               || DBMS_UTILITY.Format_Error_Backtrace;
            EscribeBitacora (pMetodo, pNivel, pTextoMensaje);
            EscribeBitacora (
               pMetodo,
               pNivel,
               'MENSAJE_SALIDA: ' || PA.UTILITARIOS.MENSAJE_SALIDA);
            EscribeBitacora (pMetodo, pNivel, 'SQLERRM: ' || SQLERRM);
            EscribeBitacora (
               pMetodo,
               pNivel,
               'Backtrace: ' || DBMS_UTILITY.Format_Error_Backtrace);
         END IF;
      END IF;
   END Bitacora;
   
   PROCEDURE MESSAGE (message_string VARCHAR2, user_response NUMBER := 0)
   IS
   BEGIN
      IF LENGTH (TRIM (NVL (message_string, ''))) > 0
      THEN
         Job.SqlErrorApp := message_string;
         Bitacora ('MESSAGE', 0, message_string);
         PA.UTILITARIOS.MESSAGE (message_string);
      END IF;
   END MESSAGE;

   PROCEDURE MENSAJE (pmensaje VARCHAR2)
   IS
   BEGIN
      MESSAGE (pmensaje);
   END MENSAJE;    
   
   PROCEDURE EXIT_FORM (commit_mode NUMBER)
   IS
   BEGIN
      Bitacora ('EXIT_FORM', 2, 'commit_mode = ' || commit_mode);
      raise_application_error (-20101, 'Exiting form...');
   END EXIT_FORM;
   
   PROCEDURE SYNCHRONIZE
   IS
   BEGIN
      NULL;
   END SYNCHRONIZE;
   
   PROCEDURE EXIT_FORM (commit_mode NUMBER, rollback_mode NUMBER)
   IS
   BEGIN
      Bitacora ('EXIT_FORM', 2, 'commit_mode = ' || commit_mode);
      Bitacora ('EXIT_FORM', 2, 'rollback_mode = ' || rollback_mode);

      IF ROLLBACK_MODE = FULL_ROLLBACK
      THEN
         Bitacora ('EXIT_FORM', 2, 'ROLLBACK');
         ROLLBACK;
      ELSE
         Bitacora ('EXIT_FORM', 2, 'SIN ROLLBACK');
      END IF;

      raise_application_error (-20101, 'Exiting the form...');
   END EXIT_FORM;
   
   PROCEDURE BDump (pMetodo     IN VARCHAR2,
                    pVariable   IN VARCHAR2,
                    pValor      IN VARCHAR2)
   IS
   BEGIN
      gIndent := gIndent + 1;
      Bitacora (pMetodo, 2, pVariable || ' = ' || pValor);
      gIndent := gIndent - 1;
   END BDump;
   
   PROCEDURE GO_BLOCK (blockname VARCHAR2)
   IS
   /*
       Efectua : Para compatibilidad con ORACLE Forms, simula GO_BLOCK
   */
   BEGIN
      CURRENT_BLOCK := UPPER (TRIM (blockname));
      BDump ('GO_BLOCK', 'CURRENT_BLOCK', CURRENT_BLOCK);
   END GO_BLOCK;
   
   FUNCTION FORM_SUCCESS
      RETURN BOOLEAN
   IS
   BEGIN
      BDump ('FORM_SUCCESS', 'SQLCODE', SQLCODE);
      RETURN SQLCODE = 0;
   END FORM_SUCCESS;
   
   PROCEDURE BInicio (pMetodo IN VARCHAR2)
   IS
   /*
       Efectua : Escribe en la bitacora acceso el inicio de un procedimiento
   */
   BEGIN
      gIndent := gIndent + 1;
      Bitacora (pMetodo, 1, 'Inicio');
   END BInicio;

   PROCEDURE BFinal (pMetodo IN VARCHAR2)
   IS
   /*
       Efectua : Escribe en la bitacora acceso el final de un procedimiento
   */
   BEGIN
      Bitacora (pMetodo, 1, 'Final');

      IF gIndent > 0
      THEN
         gIndent := gIndent - 1;
      END IF;
   END BFinal;
   
   PROCEDURE BError (pMetodo IN VARCHAR2)
   IS
   /*
       Efectua : Escribe en la bitacora acceso el trace del error
   */
   BEGIN
      Bitacora (pMetodo, 3, 'Error');
   END BError;

   PROCEDURE BError (pMetodo IN VARCHAR2, pExcepcion IN VARCHAR2)
   IS
   /*
       Efectua : Escribe en la bitacora acceso el trace del error
   */
   BEGIN
      Bitacora (pMetodo, 3, 'Excepcion: ' || pExcepcion);
   END BError;
   
   PROCEDURE CREATE_ALERT (alertname      VARCHAR2,
                           alert_title    VARCHAR2,
                           alert_text     VARCHAR2,
                           alert_style    VARCHAR2)
   IS
      /*
          Efectua : Para compatibilidad con ORACLE Forms, simula una alerta para usarse con SHOW_ALERT
      */
      vProcName   VARCHAR2 (80) := 'CREATE_ALERT';
   BEGIN
      BInicio (vProcName);
      BDump (vProcName, 'alertname', alertname);
      BDump (vProcName, 'alert_title', alert_title);
      BDump (vProcName, 'alert_text', alert_text);
      BDump (vProcName, 'alert_style', alert_style);
      ALERTS (alertname).ALERT_ID.NAME := UPPER (TRIM (alertname));
      ALERTS (alertname).PROPERTIES (TITLE) := alert_title;
      ALERTS (alertname).PROPERTIES (ALERT_MESSAGE_TEXT) := alert_text;
      ALERTS (alertname).STYLE := alert_style;
      BFinal (vProcName);
   EXCEPTION
      WHEN OTHERS
      THEN
         BError (vProcName);
   END CREATE_ALERT;
   
   PROCEDURE SET_ALERT_PROPERTY (alert_id    ALERT,
                                 property    NUMBER,
                                 MESSAGE     VARCHAR2)
   IS
   BEGIN
      ALERTS (alert_id.NAME).PROPERTIES (property) := MESSAGE;
   END SET_ALERT_PROPERTY;
   
   FUNCTION Char_Enclose (pLeft    IN VARCHAR2,
                          pText    IN VARCHAR2,
                          pRigth   IN VARCHAR2)
      RETURN VARCHAR2
   IS
   BEGIN
      IF LENGTH (TRIM (NVL (pText, ''))) > 0
      THEN
         RETURN pLeft || pText || pRigth;
      END IF;

      RETURN '';
   END Char_Enclose;
   
   FUNCTION FIND_ALERT (alertname VARCHAR2)
      RETURN ALERT
   IS
   BEGIN
      RETURN ALERTS (UPPER (TRIM (alertname))).ALERT_ID;
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         RETURN NULL;
   END FIND_ALERT;
   
   FUNCTION SHOW_ALERT (alert_id ALERT)
      RETURN PLS_INTEGER
   IS
      /*
         Efectua : Para compatibilidad con ORACLE Forms, simula SHOW_ALERT
     */
      vAlertName   VARCHAR2 (20);
      vFullAlert   VARCHAR2 (500);
   BEGIN
      vAlertName := alert_id.NAME;
      vFullAlert := Char_Enclose ('(', ALERTS (vAlertName).STYLE, ')');
      vFullAlert :=
            vFullAlert
         || Char_Enclose ('[', ALERTS (vAlertName).PROPERTIES (TITLE), ']')
         || CHR (10);
      vFullAlert := ALERTS (vAlertName).PROPERTIES (ALERT_MESSAGE_TEXT);
      Bitacora ('SHOW_ALERT.' || vAlertName, 0, vFullAlert);
      RETURN 1;
   END SHOW_ALERT;

   FUNCTION SHOW_ALERT (alert_name VARCHAR2)
      RETURN PLS_INTEGER
   IS
      /*
          Efectua : Para compatibilidad con ORACLE Forms, simula SHOW_ALERT
      */
      alert_id   ALERT;
   BEGIN
      alert_id := FIND_ALERT (alert_name);
      RETURN SHOW_ALERT (alert_id);
   END SHOW_ALERT;

   PROCEDURE SET_ALERT_PROPERTY (alert_name    VARCHAR2,
                                 property      NUMBER,
                                 MESSAGE       VARCHAR2)
   IS
      alert_id   ALERT;
   BEGIN
      alert_id := FIND_ALERT (alert_name);
      SET_ALERT_PROPERTY (alert_id, property, MESSAGE);
   END SET_ALERT_PROPERTY;
   
   FUNCTION fec_calendario_sistb2000 (p_codsistema   IN VARCHAR2,
                                      p_codempresa   IN NUMBER)
      RETURN DATE
   IS
      /*
        FUNCION
        Esta funcion recibe como parametros el codigo del sistema,
        el codigo de empresa y la agencia en la que esta instalado el
        sistema y devuelve la fecha actual del calENDario.
       */
      v_fecha   DATE;
   BEGIN
      SELECT fecha_hoy
        INTO v_fecha
        FROM calendario
       WHERE codigo_empresa = p_codempresa
         AND codigo_aplicacion = p_codsistema;

      RETURN v_fecha;
      RETURN NULL;
   EXCEPTION
      WHEN OTHERS
      THEN
         RETURN NULL;
   END fec_calendario_sistb2000;
   
   FUNCTION Fec_Calendario_SisB2000CJ (p_codempresa   IN NUMBER)
      RETURN DATE
   IS
      /*
        FUNCION
        Esta funcion recibe como parametros el codigo del sistema,
        el codigo de empresa y la agencia en la que esta instalado el
        sistema y devuelve la fecha actual del calENDario.
       */
      v_fecha   DATE;
   BEGIN
   
      Select Fecha_Hoy
            Into V_Fecha
        From Calendario
       Where Codigo_Empresa = P_Codempresa 
         And Codigo_Aplicacion = 'BCJ';

      RETURN v_fecha;
      
   EXCEPTION
      WHEN OTHERS
      THEN
         RETURN NULL;
   END Fec_Calendario_SisB2000CJ;
   
   FUNCTION Fec_Calendario_SisB2000PA (p_codempresa   IN NUMBER,
                                       p_codsistema   IN VARCHAR2)
      RETURN DATE
   IS
      /*
        FUNCION
        Esta funcion recibe como parametros el codigo del sistema,
        el codigo de empresa y la agencia en la que esta instalado el
        sistema y devuelve la fecha actual del calENDario.
       */
      v_fecha   DATE;
   BEGIN
   
      SELECT fec_hoy
          INTO v_fecha
        FROM calendarios
       WHERE cod_empresa = p_codempresa
         AND cod_sistema = Nvl(p_codsistema, 'CC')
         AND cod_agencia IN (Select Cod_Agencia_Dflt
                               From Usuarios
                              Where Cod_Usuario = Variables.Usuario); 

      RETURN v_fecha;
      
   EXCEPTION
      WHEN OTHERS
      THEN
         RETURN NULL;
   END Fec_Calendario_SisB2000PA;
   
   function DIA_DE_LA_SEMANA(Fecha date
                             ) return varchar2 is

       Numero_Dia number(1);

   begin

       if fecha is null
       then
           return null;
       end if;

       Numero_Dia := to_char(Fecha, 'D');
       if Numero_Dia = 1 
       then 
           return 'DOMINGO';
       elsif Numero_Dia = 2 
       then 
           return 'LUNES';
       elsif Numero_Dia = 3 
       then 
           return 'MARTES';
       elsif Numero_Dia = 4 
       then 
           return 'MIERCOLES';
       elsif Numero_Dia = 5 
       then 
           return 'JUEVES';
       elsif Numero_Dia = 6 
       then 
           return 'VIERNES';
       else return 'SABADO';
       end if;

    RETURN NULL; 
    
   END DIA_DE_LA_SEMANA;
   
   FUNCTION fec_anterior_calendario(p_codsistema   IN VARCHAR2,
                                    p_codempresa   IN NUMBER)
      RETURN DATE
   IS
      /*
        FUNCION
        Esta funcion recibe como parametros el codigo del sistema,
        el codigo de empresa y la agencia en la que esta instalado el
        sistema y devuelve la fecha anterior del calENDario.
       */
      v_fecha   DATE;
   BEGIN
      SELECT fecha_anterior
        INTO v_fecha
        FROM calendario
       WHERE codigo_empresa = p_codempresa
         AND codigo_aplicacion = p_codsistema;

      RETURN v_fecha;
      RETURN NULL;
   EXCEPTION
      WHEN OTHERS
      THEN
         RETURN NULL;
   END fec_anterior_calendario;
   
   FUNCTION fec_siguiente_calendario(p_codsistema   IN VARCHAR2,
                                     p_codempresa   IN NUMBER)
      RETURN DATE
   IS
      /*
        FUNCION
        Esta funcion recibe como parametros el codigo del sistema,
        el codigo de empresa y la agencia en la que esta instalado el
        sistema y devuelve la fecha siguiente del calENDario.
       */
      v_fecha   DATE;
   BEGIN
      SELECT proxima_fecha
        INTO v_fecha
        FROM calendario
       WHERE codigo_empresa = p_codempresa
         AND codigo_aplicacion = p_codsistema;

      RETURN v_fecha;
      RETURN NULL;
   EXCEPTION
      WHEN OTHERS
      THEN
         RETURN NULL;
   END fec_siguiente_calendario;
   
   function FERIADO_PARA_AGENCIA(v_cod_empresa varchar2,
                                 v_cod_agencia varchar2,
                                 v_fecha       date
                                ) RETURN BOOLEAN IS

    /* OBJETIVO
            Esta funcion retorna TRUE si la fecha se encuentra
            registrada como un dia feriado para la agencia 
            especificada.
    */
        dummy date;
    BEGIN
         Select fecha 
           into dummy
               from Feriados_x_Agencia
           where cod_empresa    = v_cod_empresa and
                     cod_agencia    = v_cod_agencia and
                     fecha          = v_fecha and
                     es_obligatorio = 'S';

            Return TRUE;
    RETURN NULL; Exception
         When No_Data_Found then
            Return FALSE;
    END FERIADO_PARA_AGENCIA;
   
   FUNCTION Fecha_Habil (pCodEmpresa VARCHAR2,
                         pCodAgencia VARCHAR2,
                         pFecha DATE
                        ) RETURN BOOLEAN IS
    /*
    OBJETIVO :
             Esta funcion devuelve TRUE si la fecha es habil para la
             agencia. Una fecha es habil si no esta registrada como dia
             feriado. Tambien si la fecha corresponde a un sabado o a un
             domingo esta es habil si la empresa trabaja ese dia (sabado o
             domingo segun corresponda).  */

      vTrabajaSab Agencia.trabaja_sab%type;
      vTrabajaDom Agencia.trabaja_dom%type;
      dummy feriados_x_agencia.fecha%type;
      vNomDia VARCHAR2(40);
      
    BEGIN
    -- Obtener los datos para verificar si la agencia trabaja sabados y domingos
      IF NOT Feriado_Para_Agencia(pCodEmpresa, pCodAgencia, pFecha) THEN
        vNomDia := rtrim(to_char(pFecha, 'DAY', 'NLS_DATE_LANGUAGE=ENGLISH'));
        SELECT trabaja_sab, trabaja_dom
          INTO vTrabajaSab, vTrabajaDom
          FROM Agencia
          WHERE Cod_Agencia = pCodAgencia
            AND cod_Empresa = pCodEmpresa;
        IF (vNomDia = 'SUNDAY') AND (vTrabajaDom = 'N') THEN
          RETURN FALSE;
        ELSIF (vNomDia = 'SATURDAY') AND (vTrabajaSab = 'N') THEN
          RETURN FALSE;
        END IF;
      ELSE
        RETURN FALSE;
      END IF;
      RETURN TRUE;
    --
    RETURN NULL; EXCEPTION
      WHEN NO_DATA_FOUND THEN
    -- Retorna TRUE ya que si la agencia no esta definida, el dia por default es habil.
        RETURN TRUE;
    END FECHA_HABIL;
    
    FUNCTION OBT_FECHA RETURN DATE IS
     vFecha    DATE;
   BEGIN
         select FEC_HOY
         into   vFecha
         from   pa.CALENDARIOS
         where  ( COD_EMPRESA = VARIABLES.CodEmpresa )
         and    ( COD_AGENCIA = VARIABLES.CodAgencia )
         and    ( COD_SISTEMA = VARIABLES.CODSISTEMA );
         RETURN vFecha;
   exception
       when others then  
          RETURN NULL;
   END OBT_FECHA;
    
    PROCEDURE REGISTRO(pFECHA_CIERRE IN DATE, pESTADO IN VARCHAR2) IS
     vFecha    DATE;
   BEGIN
       vFecha := OBT_FECHA();
       IF pFECHA_CIERRE IS NOT NULL THEN
           vFecha := pFECHA_CIERRE;
       END IF;
       PA.CIERRE_BITACORA(VARIABLES.CODSISTEMA, VARIABLES.CODFORMA, vFecha, VARIABLES.USUARIO, pESTADO);
   END REGISTRO;

   PROCEDURE BITACORA_CIERRES_INICIO(pFECHA_CIERRE IN DATE) IS
   BEGIN
       REGISTRO(pFECHA_CIERRE, 'I');
   END BITACORA_CIERRES_INICIO;
        
   PROCEDURE BITACORA_CIERRES_FIN(pFECHA_CIERRE IN DATE) IS
   BEGIN
       REGISTRO(pFECHA_CIERRE, 'F');
   END BITACORA_CIERRES_FIN;
   
   PROCEDURE BITACORA_CIERRES_ERROR(pFECHA_CIERRE IN DATE, P_TIPOERROR IN VARCHAR2 DEFAULT NULL) IS
   BEGIN
       
       REGISTRO(pFECHA_CIERRE, 'E');
       
       if Job.SqlErrorApp is null then
            Job.SqlErrorApp := PA.UTILITARIOS.MENSAJE_SALIDA;
       end if;       
       
       dbms_output.put_line (Job.SqlErrorApp);
       
       pa.pa_pkg_bitacora_proceso_cierre.pa_registra_errores(Job.CodEmpresa,
                                                             Job.CodSistema,
                                                             Job.CodProceso,
                                                             Job.Fecha,
                                                             Job.SqlErrorApp,
                                                             P_TIPOERROR);
   END BITACORA_CIERRES_ERROR;
   
   PROCEDURE IniVarGlobalesLocales(pCodForma IN VARCHAR2)
   IS
      --EFECTUA : Inicializacion de Variables Locales Adicionales
      vProcName    VARCHAR2 (80) := 'IniVarGlobalesLocales';
      vCodError    Varchar2(250) := Null;
      vMsjError    Varchar2(250) := Null;
      
      v_Nueva_Fec_Hoy   Date;
      v_primer_dia_mes  Date;
      vFechaAntHabil    Date;
      
   BEGIN
   
      variables.CodForma := pCodForma;
      BInicio (vProcName);
      
      BDump (vProcName, 'variables.CodForma', variables.CodForma);
      BDump (vProcName, 'variables.CodIdioma', variables.CodIdioma);
      
      If variables.CodForma IN ('PAFCCAL0', 'PALSFCAL', 'IVCALEND', 'PALIQPGS', 'CLCIEDIA',
                                'CIERRES','CJ0132','PAREPCIE','PACAMSEC', 'PACALEN1', 'PAROCCIE', 
                                'PAACTPRO', 'PACALEND', 'PACFGENM') Then
        -- Obtiene el usuario
        Variables.Usuario := 'OPERXX';
        --
      ElsIf variables.CodForma IN ('DICIERRE') Then
        --
        Variables.Usuario := 'OPERDI';
      End If;
      
      BDump (vProcName, 'Variables.Usuario', Variables.Usuario);
                  
      -- Obtiene el sistema
      If variables.CodForma IN ('PACALEND') Then
        variables.CodSistema  := 'CV';
        
      ElsIf variables.CodForma IN ('PAFCCAL0', 'PALSFCAL') Then
        variables.CodSistema  := UPPER(SUBSTR(variables.CodForma, 3, 2));
        
      Else
        variables.CodSistema  := UPPER(SUBSTR(variables.CodForma, 1, 2));
        
      End If;
      
      Variables.Cod_Grupo           := Variables.CodEmpresa;
      variables.Cod_Sistema         := variables.CodSistema;
      variables.Cod_Aplicacion      := 'B'||variables.CodSistema;
      
      If variables.CodForma IN ('PACALEN1','PACALEND') Then
        calend.cod_sistema := variables.CodSistema;
      End If;
      
      BDump (vProcName, 'variables.CodSistema', variables.CodSistema);        
                                                                                                                                            
      --Obtengo la agencia del usuario
      BEGIN
         SELECT COD_AGENCIA_DFLT
           INTO variables.CodAgencia
           FROM USUARIOS
          WHERE COD_USUARIO = Variables.Usuario;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            variables.CODAGENCIA := NULL;
      END;
      
      BDump (vProcName, 'Variables.CodAgencia', Variables.CodAgencia);  
      
      -- Obtiene la Fecha del Sistema
      If variables.CodForma IN ('PALIQPGS') Then
        Variables.Fec_Hoy           := Fec_Calendario_SisB2000PA (Variables.CodEmpresa, NULL);
        
      ElsIf variables.CodForma IN ('PAROCCIE') Then
        /*Este proceso en produccion utiliza el calendario de CC. Es un error pero lo quieren asi*/
        Variables.Fec_Hoy           := Pa.Calendar.Fecha_Actual_Calendario('CC', Variables.CodEmpresa, variables.CodAgencia);
        
      ElsIf variables.CodForma IN ('PACAMSEC') Then
        /*Este proceso en produccion utiliza el calendario de GC. Es un error pero lo quieren asi*/
        Variables.Fec_Hoy           := Pa.Calendar.Fecha_Actual_Calendario('CG', Variables.CodEmpresa, variables.CodAgencia);
        
      ElsIf variables.CodSistema IN ('CJ') Then
        Variables.Fec_Hoy           := Fec_Calendario_SisB2000CJ (Variables.CodEmpresa);
        
      Else
        Variables.Fec_Hoy           := Pa.Calendar.Fecha_Actual_Calendario(variables.CodSistema, Variables.CodEmpresa, variables.CodAgencia);  
        
      End If;     
      
      Variables.Fecha               := Variables.Fec_Hoy;
      Calend.Fec_Hoy                := Variables.Fec_Hoy;
      Variables.Siguiente_Dia_Habil := Pa.Calendar.Obtener_Sig_Fec_Habil(variables.CodEmpresa, variables.CodAgencia, Variables.Fec_Hoy);

      BDump (vProcName, 'Variables.Fecha', Variables.Fecha);
      
      BEGIN
         SELECT codigo_moneda_origen
           INTO variables.moneda_origen
           FROM moneda a, empresas b
          WHERE cod_moneda = TO_CHAR (codigo_moneda_origen);
          
          variables.moneda := variables.moneda_origen;
      EXCEPTION
         WHEN OTHERS
         THEN
            vCodRespuesta := '040';
            mensaje ('Error leyendo el c√≥digo de moneda origen');
            vCodigoResp := '000187';
            vMensajeError := 'Error leyendo c√≥digo de moneda origen'; 
            RAISE form_trigger_failure;
      END;
      
      begin

         Select valor
           into variables.PAGO_EFECTIVO
           from di_parametro
         where cod_empresa = variables.codempresa
           and Cod_Parametro = 'SISTEMA'
           and Cod_Opcion = 'VIAEFECTIVO';
      exception
        when others then 
            variables.PAGO_EFECTIVO := '1';
      End;
      
      Parametros.Fec_Ini            := Variables.Fec_Hoy;
      Parametros.Cod_Empresa        := Variables.CodEmpresa;
      Parametros.Cod_agencia        := variables.CodAgencia;
      Variables.Fecha_Sistema       := PA.Fecha_Actual_Calendario('DI', Variables.Codempresa, Variables.Codagencia);
      Variables.Fecha_Cal           := Variables.Fec_Hoy;
      Variables.Fec_Ant             := Variables.Fec_Hoy;
      
      If variables.CodForma IN ('PAROCCIE', 'PACAMSEC') Then
      
        vFechaAntHabil                := Pa.Calendar.Obtener_Ant_Fec_Habil(Variables.Codempresa, Variables.Codagencia, Variables.Fec_Hoy);
        v_Nueva_Fec_Hoy               := Pa.Calendar.Obtener_Sig_Fec_Habil(Variables.CodEmpresa,variables.CodAgencia,Variables.Fec_Hoy);
        v_primer_dia_mes              := to_date('01-'||to_char(v_Nueva_Fec_Hoy,'MM-YYYY'),'DD-MM-YYYY');
        Variables.FechaFinMes         := Pa.Calendar.Obtener_Ultimo_Habil_Mes(Variables.CodEmpresa,variables.CodAgencia,vFechaAntHabil);
      
        Variables.Anterior_Dia_Habil  := vFechaAntHabil;
        Control.Fecha_Proceso         := vFechaAntHabil;
        Variables.monedabase          := CL_PROCS.Parametros_BCL(variables.codEmpresa, 'SISTEMA', 'MONEDA_BASE' ,vCodError, vMsjError);
        
        If vMsjError Is Not Null Then
            variables.monedabase := '1';
        End If;
        
        Begin
            select trunc(last_day(VARIABLES.FechaFinMes))
              into VARIABLES.ULT_DIA_MES
              from dual;       
        Exception
           When Others Then
               Message('Ultimo dia del mes no encontrado');                
               BITACORA_CIERRES_ERROR (CONTROL.FECHA_PROCESO);           
        End;
        
        if trunc(variables.FechaFinMes) = vFechaAntHabil then
          variables.Tipo_Cierre := 'M';
        else
          variables.Tipo_Cierre := 'D';
        end if;
        
      Else
      
        Variables.Anterior_Dia_Habil  := Pa.Calendar.Obtener_Ant_Fec_Habil(Variables.Codempresa, Variables.Codagencia, Variables.Fec_Hoy);
      End If;
      
      Variables.SALVAR_REG := 100;
      
      Open cuBuscarProcesoEjecuta;
      Fetch cuBuscarProcesoEjecuta Into Job.CodEmpresa, Job.CodSistema, Job.CodProceso, Job.Fecha;
        If cuBuscarProcesoEjecuta%NotFound Then
            MESSAGE('ERROR: '||'El JOB de este proceso no se encuentra configurado.');
            BITACORA_CIERRES_ERROR(Variables.Fec_Hoy);
        End If;
      Close cuBuscarProcesoEjecuta;

      BFinal (vProcName);
      
   EXCEPTION
      WHEN OTHERS THEN
         BError (vProcName);
   END IniVarGlobalesLocales;
   
   PROCEDURE obt_parametros (pCodEmpresa   IN     VARCHAR2,
                             pCodSistema   IN     VARCHAR2,
                             pParametro    IN     VARCHAR2,
                             pCodIdioma    IN     VARCHAR2,
                             pValor        IN OUT VARCHAR2,
                             pDefecto      IN     VARCHAR2 DEFAULT '%%%')
   IS
      /*
          EFECTUA : Busca un parametro igual que forms usando el valor por defecto
      */
      vProcName   VARCHAR2 (80) := 'obt_parametros';
   BEGIN
      BInicio (vProcName);
      pValor := PA.OBT_PARAMETROS (pCodEmpresa, pCodSistema, pParametro);

      IF pValor IS NULL
      THEN
         pValor := pDefecto;
      END IF;

      BDump (vProcName, 'pCodEmpresa', pCodEmpresa);
      BDump (vProcName, 'pCodSistema', pCodSistema);
      BDump (vProcName, 'pParametro', pParametro);
      BDump (vProcName, 'pDefecto', pDefecto);
      BDump (vProcName, 'pValor', pValor);
      BFinal (vProcName);
   END obt_parametros;
   
   Function titulo_sistema(v_codSistema varchar2,
                           v_codIdioma  varchar2) 
                return varchar2 is
    /* OBJETIVO
        Retorna el titulo del sistema.
    */
           tit_sistema varchar2(80);
    Begin

        Select titulo
          into tit_sistema
          from titulos_sistemas
         where cod_sistema = v_codSistema 
           and cod_idioma  = v_CodIdioma;
        
        Return tit_sistema;
        
    Exception
        When No_Data_Found then
           Return null;
    end;
   
   PROCEDURE Actualiza_Calendario(v_CodSistema  varchar2,
                                  v_CodEmpresa  varchar2,
                                  v_CodAgencia  varchar2,
                                  v_fec_manual  date DEFAULT NULL) IS
   /* OBJETIVO 
       El objetivo de este procedimiento es actualizar el calendario
       del sistema respectivo para mostrar el cambio de fecha en la 
       base de datos.

    REQUIERE
       La existencia de la tabla calendarios y que haya una tupla
       que corresponda a los parametros que se pasan en
       v_CodSistema,v_CodEmpresa,v_CodAgencia
   */
   
    v_Fec_Hoy             date;
    v_Nueva_Fec_Hoy       date;
    v_nom_dia             varchar2(9);
    v_fec_anterior        date;
    v_prox_fecha          date;
    v_primer_dia_mes      date;
    v_primer_habil_mes    date;
    v_ultimo_dia_mes      date;
    v_ultimo_habil_mes    date;
    v_fec_sistema         date;
    tit_sistema           varchar2(80);
    
    BEGIN
        -- Obtiene la fecha que esta registrada en el 
        -- calendario.
       Select fec_hoy 
         into v_fec_hoy
         from pa.calendarios
        where cod_empresa = v_codEmpresa and
              cod_agencia = v_codAgencia and
              cod_sistema = v_codSistema;
                  
        if v_fec_manual is null then
            v_Nueva_Fec_Hoy := CALENDAR.Obtener_Sig_Fec_Habil(V_CodEmpresa,V_CodAgencia,V_Fec_Hoy);
        else
            v_Nueva_Fec_Hoy := v_fec_manual;
        end if;
        
        v_Prox_fecha        := CALENDAR.Obtener_Sig_Fec_Habil(V_CodEmpresa,V_CodAgencia,V_Nueva_Fec_Hoy);
        v_fec_anterior      := v_Fec_Hoy;
        v_primer_dia_mes    := to_date('01-'||to_char(v_Nueva_Fec_Hoy,'MM-YYYY'),'DD-MM-YYYY');
        v_ultimo_dia_mes    := add_months(v_primer_dia_mes,1) - 1;
        v_ultimo_habil_mes  := CALENDAR.Obtener_Ultimo_Habil_Mes(V_CodEmpresa,V_CodAgencia,V_primer_dia_mes);
        v_primer_habil_mes  := CALENDAR.Obtener_Primer_Habil_Mes(V_CodEmpresa,V_CodAgencia,V_Nueva_Fec_Hoy);
        v_nom_dia           := Dia_De_La_Semana(v_Nueva_Fec_Hoy);
        
        select sysdate
           into v_fec_sistema
           from dual;           

        If form_success then
        
           update pa.calendarios
              set fec_hoy           = v_Nueva_Fec_Hoy,
                  nom_dia           = v_nom_dia,
                  fec_anterior      = v_fec_anterior,
                  prox_fecha        = v_prox_fecha,
                  primer_dia_mes    = v_primer_dia_mes,
                  primer_habil_mes  = v_primer_habil_mes,
                  ultimo_dia_mes    = v_ultimo_dia_mes,
                  ultimo_habil_mes  = v_ultimo_habil_mes,
                  modificado_por    = variables.Usuario,
                  fec_modificacion  = v_fec_sistema
            where cod_empresa = v_codEmpresa 
              and cod_agencia = v_codAgencia 
              and cod_sistema = v_codSistema;
    
             if sql%ROWCOUNT = 0 then
                -- No afecto ninguna fila.
                raise form_trigger_failure;
             else
                commit;
                --haga_commit;
             end if;
             
        end if;
        
    Exception
       When No_Data_Found then
         -- Error, el sistema  @ no tiene asociado un calendario.
        tit_sistema := titulo_sistema(v_CodSistema,variables.codIdioma);
        UTILITARIOS.mensaje('000211', variables.CodIdioma, variables.CodSistema, ACKNOWLEDGE, tit_Sistema);
        When Others then
        -- Error del sistema:
        message('CAMBIA_CALENDARIO_AGENCIAS ERROR '||SQLERRM); MESSAGE(' ');
        BITACORA_CIERRES_ERROR(VARIABLES.FEC_HOY);
        UTILITARIOS.mensaje('000099', variables.CodIdioma, variables.CodSistema, ACKNOWLEDGE, tit_Sistema);
        return;
    END Actualiza_Calendario;
    
    Function Sistema_Requiere_Cierre(v_CodSistema varchar2) 
                Return BOOLEAN IS

    /* OBJETIVO
        Esta funcion retorna TRUE si el sistema requiere cierre.
        En caso contrario retorna FALSE.
            Se determina que un sistema requiere cierre si se encuentra
            un registro de cierre para el sistema en la tabla CIERRES.
    */
        dummy SISTEMAS.Cod_Sistema%Type;
    BEGIN
         Select cod_sistema 
        into dummy
            from CIERRES
            where cod_sistema = v_CodSistema;
         Return TRUE;
    Exception
         When No_Data_Found then
           Return FALSE;
         When Too_Many_Rows then
           Return TRUE;
    END Sistema_Requiere_Cierre;
    
    PROCEDURE Actualiza_Cierre(v_CodSistema  varchar2,
                               v_CodEmpresa  varchar2,
                               v_CodAgencia  varchar2) IS
    /* OBJETIVO
        El objetivo es actualizar el registro de cierre
        para que corresponda a la fecha del calendario.
       El registro de cierre es corrido y marcado como no ejecutado.
    */
      fec_calendario date;
      fec_sistema    date;
      titulo_sist    titulos_sistemas.titulo%type;
      
    BEGIN
         fec_calendario := CALENDAR.fecha_actual_calendario(v_codSistema,
                                                            v_codEmpresa,
                                                            v_codAgencia);
         update cierres
            set en_proceso = 'N',
                fec_ult_cierre = fec_calendario,
                modificado_por = variables.Usuario,
                fec_modificacion = sysdate
          where cod_empresa = v_codEmpresa
            and cod_agencia = v_codAgencia
            and cod_sistema = v_codSistema;

         if sql%found then
           commit; 
           --haga_commit;
         else
             titulo_sist := titulo_sistema(v_CodSistema,variables.CodIdioma);
             -- El sistema @ no requiere que se ejecuten procesos de cierre.
             UTILITARIOS.mensaje('000213', variables.codIdioma,variables.CodSistema,ACKNOWLEDGE,titulo_sist);
         end if;    
         
    END Actualiza_Cierre;
   
   PROCEDURE Correr_Calendario(v_CodEmpresa   varchar2,
                               v_CodAgencia   varchar2,
                               v_CodSistema   varchar2,
                               v_fecha_manual date default null) IS

        Correr_Calendario        Boolean        := FALSE;
        Fec_Actual_Calendario    Date;
        titulo_sist              varchar2(80);
        requiere_cierre          Boolean        := FALSE;
        
    BEGIN
         if Sistema_Requiere_Cierre(v_CodSistema) then
             
             Requiere_Cierre       := TRUE;
             Fec_Actual_Calendario := CALENDAR.Fecha_Actual_Calendario(v_CodSistema,
                                                                       v_CodEmpresa,
                                                                       v_CodAgencia);
                         
             Correr_Calendario := TRUE;
             
         end if;

         If Correr_Calendario then
            --     
            Actualiza_Calendario(v_CodSistema,
                                 v_CodEmpresa,
                                 v_CodAgencia,
                                 v_fecha_manual);
            
            If Requiere_Cierre then
               -- Si el sistema requeria cierre y 
               -- el calendario se actualizo entonces actualizar el cierre.
              
               Actualiza_Cierre(v_codSistema,
                                v_CodEmpresa,
                                v_CodAgencia);
            end if;
            
         end if;       
         
    END Correr_Calendario;
    
    PROCEDURE Correr_Calendario_IV(v_CodEmpresa   varchar2,
                                   v_CodAgencia   varchar2,
                                   v_CodSistema   varchar2,
                                   v_fecha_manual date default null) IS

        Correr_Calendario        Boolean        := FALSE;
        Fec_Actual_Calendario    Date;
        titulo_sist              varchar2(80);
        requiere_cierre          Boolean        := FALSE;
        
        cursor Agencias is
            select cod_agencia
              from calendarios
             where cod_empresa = v_CodEmpresa
               and cod_sistema = 'IV';
        
    BEGIN
    
         Correr_Calendario := TRUE;
         
         If Correr_Calendario then
         
            For reg in Agencias Loop
                --     
                Actualiza_Calendario(v_CodSistema,
                                     v_CodEmpresa,
                                     reg.Cod_Agencia,
                                     v_fecha_manual);
                
                If Requiere_Cierre then
                   -- Si el sistema requeria cierre y 
                   -- el calendario se actualizo entonces actualizar el cierre.
                  
                   Actualiza_Cierre(v_codSistema,
                                    v_CodEmpresa,
                                    reg.Cod_Agencia);
                end if;
                
            End Loop;
            
         end if;       
         
    END Correr_Calendario_IV;
    
    FUNCTION Cierre_Sistema_Ejecutado(v_CodSistema           varchar2,
                                      v_CodEmpresa           varchar2,
                                      v_CodAgencia           varchar2,
                                      v_Fec_Actual_Calendario  date) 
                                    RETURN BOOLEAN IS
    /* OBJETIVO
        Esta funcion retorna TRUE si el estado del cierre es
            Terminado. En caso de que no se encuentren datos o
            que el sistema este en proceso o no cerrado, el sistema 
            retorna FALSE.

            Es importante hacer notar que si la fecha del calendario
            difiere de la del registro de cierre, entonces la funcion
            devolvera FALSE. Esto con el objetivo de que no se pueda 
            correr el calendario si la fecha de cierres y calendario no
            es la misma.*/

         Estado_Cierre CIERRES.En_Proceso%Type := 'N';
         
    BEGIN
         
         if v_codSistema = 'CC' then
            -- El sistema CC puede ejecutar cierres adelantados 
            -- a la fecha de calendario
            
            select En_Proceso
              into Estado_Cierre
              from cierres
             where cod_empresa              = v_codEmpresa and
                   cod_agencia              = v_codAgencia and
                   cod_sistema              = v_codSistema and
                   v_Fec_Actual_Calendario <= Fec_Ult_Cierre;

         else -- cualquier otro sistema

            select En_Proceso
              into Estado_Cierre
              from cierres
             where cod_empresa              = v_codEmpresa and
                   cod_agencia              = v_codAgencia and
                   cod_sistema              = v_codSistema and
                   v_Fec_Actual_Calendario  = Fec_Ult_Cierre;
         end if;

         if Estado_Cierre = 'T' then
            return TRUE;
         else
            return FALSE;
         end if;
         
    exception
        When No_Data_Found then
           Return FALSE;
    end Cierre_Sistema_Ejecutado;
    
    PROCEDURE Correr_Calendario_Pa_B2000(v_CodEmpresa   varchar2,
                                         v_CodAgencia   varchar2,
                                         v_CodSistema   varchar2,
                                         v_fecha_manual date default null) IS

        Correr_Calendario        Boolean        := FALSE;
        Fec_Actual_Calendario    Date;
        titulo_sist              varchar2(80);
        requiere_cierre          Boolean        := FALSE;
        
     BEGIN

         If Sistema_Requiere_Cierre(v_CodSistema) then
             
             Requiere_Cierre       := TRUE;
             Fec_Actual_Calendario := CALENDAR.Fecha_Actual_Calendario(v_CodSistema,
                                                                       v_CodEmpresa,
                                                                       v_CodAgencia);
             
             If Cierre_Sistema_Ejecutado(v_CodSistema,
                                         v_CodEmpresa,
                                         v_CodAgencia,
                                         Fec_Actual_Calendario) Then
                                         
                Correr_Calendario := TRUE;
                
             Else
                
                -- El sistema @ no requiere que se ejecuten procesos de cierre.
                titulo_sist := titulo_sistema(v_CodSistema,variables.CodIdioma);
                UTILITARIOS.mensaje('000210', variables.codIdioma,variables.CodSistema,ACKNOWLEDGE,titulo_sist);                                            
             End If;                                         
        
         Else
         
            Correr_Calendario := TRUE;
                         
         End If;

         If Correr_Calendario Then
            --     
            Actualiza_Calendario(v_CodSistema,
                                 v_CodEmpresa,
                                 v_CodAgencia,
                                 v_fecha_manual);
            
            If Requiere_Cierre Then
               -- Si el sistema requeria cierre y 
               -- el calendario se actualizo entonces actualizar el cierre.
              
               Actualiza_Cierre(v_codSistema,
                                v_CodEmpresa,
                                v_CodAgencia);
            End If;
            
         End If;       
         
     END Correr_Calendario_Pa_B2000;
    
    FUNCTION Sistemas_Integrados_Al_Dia(v_CodEmpresa varchar2,
                                        v_CodAgencia varchar2)
                     RETURN BOOLEAN IS

    /* OBJETIVO
        Esta funcion devuelve TRUE si todos los sistemas que 
        tienen el campo calend_integrado = 'S' estan con la 
        misma fecha que el sistema de parametros y ademas 
        se ha terminado  de ejecutar los cierres para dichos
        sistemas.*/

        cursor c1 is 
            select cod_sistema
              from sistemas_x_agencia
             where cod_empresa      = v_CodEmpresa and
                   cod_agencia      = v_CodAgencia and
                   esta_activo      = 'S' and
                   instalado        = 'S' and
                   calend_integrado = 'S';
                   
        v_fec_parametros date;
        v_fec_sistema    date;
        tit_sistema     TITULOS_SISTEMAS.titulo%type;
                
    BEGIN
        v_fec_parametros := CALENDAR.fecha_actual_calendario('PA',
                                                             v_codEmpresa,
                                                             v_codAgencia);
        for c1rec in c1 loop

            -- Obtener la fecha del sistema que se debe
            -- mantener integrado.
            v_fec_sistema := CALENDAR.fecha_actual_calendario(c1rec.cod_sistema,
                                                              v_codEmpresa,
                                                              v_codAgencia);
            -- Si el sistema esta al dia    
            if v_fec_sistema = v_fec_parametros then
                
                if sistema_requiere_cierre(c1rec.cod_sistema) 
                    and not cierre_sistema_ejecutado(c1rec.cod_sistema,
                                                     v_codEmpresa,
                                                     v_codAgencia,
                                                     v_fec_sistema) then
                    -- Error el sistema no ha sido cerrado         
                    return FALSE;    
                end if; 
                           
            else
                -- El sistema esta atrazado con respecto a parametros
                return FALSE;                        
            end if;
                
        end loop;
                                 
        return TRUE;
        
    END Sistemas_Integrados_Al_Dia;
    
    PROCEDURE Correr_Calendarios_Integrados(v_CodEmpresa  varchar2,
                                            v_CodAgencia  varchar2,
                                            v_fecha_manual date default null) IS
    /* OBJETIVO
             Este procedimiento corre la fecha del sistema de parametros
             y todos aquellos sistemas que deban estar integrados al mismo.
            Si no todos los sistemas que deben integrarse a la fecha de 
            parametros estan integrados,  entonces el usuario especifica si
            corre el calendario de los que estan al dia o si cancela 
            la operacion.
    */

        cursor c1 is 
              select cod_sistema
                from sistemas_x_agencia
               where cod_empresa      = v_CodEmpresa and
                     cod_agencia      = v_CodAgencia and
                     cod_sistema      <> 'PA' and
                     esta_activo      = 'S' and
                     instalado        = 'S' and
                     calend_integrado = 'S';

           op               number;
           salir            boolean := FALSE;
           v_fec_parametros date;
           v_fec_sistema    date;
    BEGIN
    
        If not Sistemas_Integrados_Al_Dia(v_CodEmpresa,
                                          v_CodAgencia) then            
                                          
           --op := show_alert('Sist_Int_Alert');
           salir := TRUE;
                
        end if;
          
        if not salir then
             -- Obtener la fecha actual del calendario de parametros.
             v_fec_parametros := CALENDAR.fecha_actual_calendario('PA',
                                                                   v_codEmpresa,
                                                                   v_codAgencia);
             for c1rec in c1 loop

                 -- Obtener la fecha del sistema que se debe mantener integrado.
                 v_fec_sistema := CALENDAR.fecha_actual_calendario(c1rec.cod_sistema,
                                                                   v_codEmpresa,
                                                                   v_codAgencia);
                    -- Si el sistema esta al dia
                 if v_fec_sistema = v_fec_parametros then
                 
                     if sistema_requiere_cierre(c1rec.cod_sistema) 
                        and not cierre_sistema_ejecutado(c1rec.cod_sistema,
                                                         v_codEmpresa,
                                                         v_codAgencia,
                                                         v_fec_sistema) then
                        null;
                     else
                        Actualiza_calendario(c1rec.Cod_Sistema,
                                             v_codEmpresa,
                                             v_codAgencia,
                                             v_fecha_manual);
                        
                        if sistema_requiere_cierre(c1rec.cod_sistema) then
                               
                            Actualiza_Cierre(c1rec.Cod_Sistema,
                                             v_CodEmpresa,
                                             v_CodAgencia);
                        end if;        
                        
                     end if;
                                                     
                 end if;
                
             end loop;
             
            -- Correr el calendario del sistema de parametros.
            Actualiza_calendario('PA',
                                 v_codEmpresa,
                                 v_codAgencia,
                                 v_fecha_manual);
                                                   
        end if;
        
    END Correr_Calendarios_Integrados;
    
    PROCEDURE Correr_Calendarios_Integra_PA(v_CodEmpresa  varchar2,
                                               v_CodAgencia  varchar2,
                                               v_fecha_manual date default null) IS
    /* OBJETIVO
             Este procedimiento corre la fecha del sistema de parametros
             y todos aquellos sistemas que deban estar integrados al mismo.
            Si no todos los sistemas que deben integrarse a la fecha de 
            parametros estan integrados,  entonces el usuario especifica si
            corre el calendario de los que estan al dia o si cancela 
            la operacion.
    */

        cursor c1 is 
              select cod_sistema
                from sistemas_x_agencia
               where cod_empresa      = v_CodEmpresa and
                     cod_agencia      = v_CodAgencia and
                     cod_sistema      = 'PA' and
                     esta_activo      = 'S' and
                     instalado        = 'S' and
                     calend_integrado = 'S';

           op               number;
           salir            boolean := FALSE;
           v_fec_parametros date;
           v_fec_sistema    date;
    BEGIN
    
        If not Sistemas_Integrados_Al_Dia(v_CodEmpresa,
                                          v_CodAgencia) then            
                                          
           --op := show_alert('Sist_Int_Alert');
           salir := TRUE;
                
        end if;
          
        if not salir then
             -- Obtener la fecha actual del calendario de parametros.
             v_fec_parametros := CALENDAR.fecha_actual_calendario('PA',
                                                                   v_codEmpresa,
                                                                   v_codAgencia);
             for c1rec in c1 loop

                 -- Obtener la fecha del sistema que se debe mantener integrado.
                 v_fec_sistema := CALENDAR.fecha_actual_calendario(c1rec.cod_sistema,
                                                                   v_codEmpresa,
                                                                   v_codAgencia);
                    -- Si el sistema esta al dia
                 if v_fec_sistema = v_fec_parametros then
                 
                     if sistema_requiere_cierre(c1rec.cod_sistema) 
                        and not cierre_sistema_ejecutado(c1rec.cod_sistema,
                                                         v_codEmpresa,
                                                         v_codAgencia,
                                                         v_fec_sistema) then
                        null;
                     else
                        Actualiza_calendario(c1rec.Cod_Sistema,
                                             v_codEmpresa,
                                             v_codAgencia,
                                             v_fecha_manual);
                        
                        if sistema_requiere_cierre(c1rec.cod_sistema) then
                               
                            Actualiza_Cierre(c1rec.Cod_Sistema,
                                             v_CodEmpresa,
                                             v_CodAgencia);
                        end if;        
                        
                     end if;
                                                     
                 end if;
                
             end loop;
             
            -- Correr el calendario del sistema de parametros.
            Actualiza_calendario('PA',
                                 v_codEmpresa,
                                 v_codAgencia,
                                 v_fecha_manual);
                                                   
        end if;
        
    END Correr_Calendarios_Integra_PA;
    
    PROCEDURE Correr_Calen1_Integra_PA(v_CodEmpresa  varchar2,
                                       v_CodAgencia  varchar2,
                                       v_fecha_manual date default null) IS
    /* OBJETIVO
             Este procedimiento corre la fecha del sistema de parametros
             y todos aquellos sistemas que deban estar integrados al mismo.
            Si no todos los sistemas que deben integrarse a la fecha de 
            parametros estan integrados,  entonces el usuario especifica si
            corre el calendario de los que estan al dia o si cancela 
            la operacion.
    */

        cursor c1 is 
              select cod_sistema, cod_agencia
                from sistemas_x_agencia
               where cod_empresa      = v_CodEmpresa and
                     cod_agencia      = v_CodAgencia and
                     cod_sistema      = 'PA' and
                     esta_activo      = 'S' and
                     instalado        = 'S' and
                     calend_integrado = 'S' and 
                     cod_agencia in (Select cod_agencia          
                                       from pa.calendarios
                                      where cod_empresa = 1 and
                                            cod_sistema = 'PA');
                     

           op               number;
           salir            boolean := FALSE;
           vContinuar       boolean := FALSE;
           v_fec_parametros date;
           v_fec_sistema    date;
    BEGIN
    
        If not Sistemas_Integrados_Al_Dia(v_CodEmpresa,
                                          v_CodAgencia) then            
                                          
           --op := show_alert('Sist_Int_Alert');
           vContinuar := TRUE;
                
        end if;
          
        if vContinuar then
             -- Obtener la fecha actual del calendario de parametros.
             v_fec_parametros := CALENDAR.fecha_actual_calendario('PA',
                                                                   v_codEmpresa,
                                                                   v_codAgencia);
             for c1rec in c1 loop

                 -- Obtener la fecha del sistema que se debe mantener integrado.
                 v_fec_sistema := CALENDAR.fecha_actual_calendario(c1rec.cod_sistema,
                                                                   v_codEmpresa,
                                                                   v_codAgencia);
                                                                       
                 -- Si el sistema esta al dia
                 if v_fec_sistema = v_fec_parametros then
                 
                     if sistema_requiere_cierre(c1rec.cod_sistema) 
                        and not cierre_sistema_ejecutado(c1rec.cod_sistema,
                                                         v_codEmpresa,
                                                         v_codAgencia,
                                                         v_fec_sistema) then
                        null;
                     else
                        Actualiza_calendario(c1rec.Cod_Sistema,
                                             v_codEmpresa,
                                             v_codAgencia,
                                             v_fecha_manual);
                        
                        if sistema_requiere_cierre(c1rec.cod_sistema) then
                               
                            Actualiza_Cierre(c1rec.Cod_Sistema,
                                             v_CodEmpresa,
                                             v_CodAgencia);
                        end if;        
                        
                     end if;
                                                     
                 end if;
                
             end loop;
             
            -- Correr el calendario del sistema de parametros.
            Actualiza_calendario('PA',
                                 v_codEmpresa,
                                 v_codAgencia,
                                 v_fecha_manual);
                                                   
        end if;
        
    END Correr_Calen1_Integra_PA;

   /* -------------------------------------------------------------------- */
   /* DESCRIPCION: CAMBIO_CALENDARIO_FACTORING                             */
   /* -------------------------------------------------------------------- */
   PROCEDURE CAMBIO_CALENDARIO_FACTORING IS
   
      CURSOR Agencias IS
        SELECT DISTINCT cod_agencia
          FROM calendarios
         WHERE cod_empresa = variables.CodEmpresa
           AND cod_sistema = variables.cod_sistema;

      v_listoCierre   NUMBER (23);
      vProcName       VARCHAR2(80):= 'CAMBIO_CALENDARIO_FACTORING';

     --ecaceres 5/2/2020
     l_rindex_g   PLS_INTEGER := DBMS_APPLICATION_INFO.set_session_longops_nohint;
     l_slno_g     PLS_INTEGER;
     pTarget      PLS_INTEGER;
     
   BEGIN
    
       Job.Ejecuta := 'JOB_CAMBIO_CAL_FACTORING';
       IniVarGlobalesLocales('PAFCCAL0');
       BInicio (vProcName);
        
         --ecaceres 5/2/2020 Seguimiento de Proceso
         DBMS_APPLICATION_INFO.set_session_longops (
         rindex        => l_rindex_g,
         slno          => l_slno_g,
         op_name       => Job.Ejecuta,
         target        => pTarget,
         context       => 0,
         sofar         => 1,
         totalwork     => 2,
         target_desc   => 'Procesando  ...',
         units         => 'rows');
      

       --BITACORA_CIERRES
       BITACORA_CIERRES_INICIO (variables.FEC_HOY);
       
       /* 202001P002-ProyectoReingenieriaCierre-POST-CORREGIR-03
       BEGIN
         
         SELECT COUNT (*) cantidad
           INTO v_listoCierre
           FROM CG.CG_MOVIMIENTO_RESUMEN g
          WHERE G.CODIGO_EMPRESA = variables.CodEmpresa
            AND G.ADICIONADO_POR = variables.cod_sistema
            AND G.FECHA_MOVIMIENTO = variables.fec_hoy --Fecha Cierre
          GROUP BY fecha_movimiento, ADICIONADO_POR;
          
       EXCEPTION
        WHEN NO_DATA_FOUND THEN
           v_listoCierre := 0;
       END;

       IF v_listoCierre > 0 THEN
           
          GO_BLOCK ('CALEND');

          IF variables.cod_sistema IS NOT NULL THEN
              
            -- Confirma la accion de CORRER EL CALENDARIO
             Correr_Calendario (variables.codEmpresa,
                                variables.codagencia,
                                variables.cod_sistema);
          END IF;

       ELSE
           
          MESSAGE ('No se puede correr el calendario porque no se han encontrado asientos en Producci√≥n');
          BITACORA_CIERRES_ERROR(VARIABLES.FEC_HOY);
          RAISE form_trigger_failure;
       END IF;*/
              
       IF variables.cod_sistema IS NOT NULL THEN
              
         -- Confirma la accion de CORRER EL CALENDARIO
          Correr_Calendario (variables.codEmpresa,
                             variables.codagencia,
                             variables.cod_sistema);
       END IF;

         --ecaceres 5/2/2020 Seguimiento de Proceso
         DBMS_APPLICATION_INFO.set_session_longops (
         rindex        => l_rindex_g,
         slno          => l_slno_g,
         op_name       => Job.Ejecuta,
         target        => pTarget,
         context       => 0,
         sofar         => 2,
         totalwork     => 2,
         target_desc   => 'Procesando  ...',
         units         => 'rows');
         
      --BITACORA_CIERRES
      BITACORA_CIERRES_FIN (variables.FEC_HOY);      
      BFinal (vProcName);
   
   EXCEPTION
     WHEN OTHERS THEN 
        MESSAGE('ERROR: '||SQLCODE||'-'||SQLERRM);
        BITACORA_CIERRES_ERROR(VARIABLES.FEC_HOY);
   END CAMBIO_CALENDARIO_FACTORING;
   
   /* -------------------------------------------------------------------- */
   /* DESCRIPCION: CAMBIO_CALENDARIO_LEASING                               */
   /* -------------------------------------------------------------------- */
   PROCEDURE CAMBIO_CALENDARIO_LEASING IS
       
       CURSOR Agencias IS
          SELECT DISTINCT cod_agencia
            FROM calendarios
           WHERE cod_empresa = variables.CodEmpresa
             AND cod_sistema = variables.cod_sistema;

       v_listoCierre      NUMBER (23);
       v_verificaCierre   NUMBER:=0;
       vProcName          VARCHAR2(80):= 'CAMBIO_CALENDARIO_LEASING';
       
     --ecaceres 5/2/2020
     l_rindex_g   PLS_INTEGER := DBMS_APPLICATION_INFO.set_session_longops_nohint;
     l_slno_g     PLS_INTEGER;
     pTarget PLS_INTEGER;


   BEGIN
   
      Job.Ejecuta := 'JOB_CAMBIO_CAL_LEASING';    
      IniVarGlobalesLocales('PALSFCAL');
      BInicio (vProcName);
      
        --ecaceres 5/2/2020 Seguimiento de Proceso
        DBMS_APPLICATION_INFO.set_session_longops (
        rindex        => l_rindex_g,
        slno          => l_slno_g,
        op_name       => Job.Ejecuta,
        target        => pTarget,
        context       => 0,
        sofar         => 1,
        totalwork     => 2,
        target_desc   => 'Procesando  ...',
        units         => 'rows');

      --BITACORA_CIERRES
       BITACORA_CIERRES_INICIO (variables.FEC_HOY);
      --INICIO VALIDACION CIERRE
      /* Ya no es necesario realizar esta validaci√≥n porque se corre el proceso mediante el Job de Leasing - gdi-3776
      BEGIN
            select count(1)
              into v_verificaCierre
              from PA.BITACORA_CIERRES
             where nom_forma ='LEASING'
               and estado='F'
               and fecha_cierre = variables.FEC_HOY;

      EXCEPTION
         WHEN OTHERS  THEN
            v_verificaCierre := 0;
      END;

      IF v_verificaCierre = 0 THEN
         MESSAGE ('No se ha concluido el proceso de cierre en Leasing.');
         BITACORA_CIERRES_ERROR(VARIABLES.FEC_HOY);
         RAISE form_trigger_failure;
      END IF;
      */
      --FIN VALIDACION CIERRE
      BEGIN
            SELECT COUNT (*) cantidad
              INTO v_listoCierre
              FROM CG.CG_MOVIMIENTO_RESUMEN g
             WHERE G.CODIGO_EMPRESA = variables.CodEmpresa
               AND G.ADICIONADO_POR = variables.cod_sistema
               AND G.FECHA_MOVIMIENTO = variables.fec_hoy --Fecha Cierre
          GROUP BY fecha_movimiento, ADICIONADO_POR;
              
      EXCEPTION
         WHEN NO_DATA_FOUND  THEN
            v_listoCierre := 0;
      END;

      IF v_listoCierre > 0 /*and v_verificaCierre >0*/--Ya no se requiere validar cierre porque se hace en LEASING -- gdi-3945
       THEN
         --GO_BLOCK ('CALEND');

         IF variables.cod_sistema IS NOT NULL THEN
            -- Confirma la accion de CORRER EL CALENDARIO
            Correr_Calendario (variables.codEmpresa,
                               variables.codAgencia,
                               variables.cod_sistema);
         END IF;

      ELSE
         MESSAGE ('No se puede correr el calendario porque no se han encontrado asientos en Producci√≥n.');
         BITACORA_CIERRES_ERROR(VARIABLES.FEC_HOY);
         RAISE form_trigger_failure;
      END IF;

        --ecaceres 5/2/2020 Seguimiento de Proceso
        DBMS_APPLICATION_INFO.set_session_longops (
        rindex        => l_rindex_g,
        slno          => l_slno_g,
        op_name       => Job.Ejecuta,
        target        => pTarget,
        context       => 0,
        sofar         => 2,
        totalwork     => 2,
        target_desc   => 'Procesando  ...',
        units         => 'rows');
        
      --BITACORA_CIERRES
      BITACORA_CIERRES_FIN (variables.FEC_HOY);
      BFinal (vProcName);
   
   EXCEPTION
     WHEN OTHERS THEN 
        MESSAGE('ERROR: '||SQLCODE||'-'||SQLERRM);
        BITACORA_CIERRES_ERROR(VARIABLES.FEC_HOY);
   END CAMBIO_CALENDARIO_LEASING;
   
   /* -------------------------------------------------------------------- */
   /* DESCRIPCION: CAMBIO_CALENDARIO_ACTIVOS_FIJOS                         */
   /* -------------------------------------------------------------------- */
   PROCEDURE CAMBIO_CALENDARIO_ACTIVO_FIJOS IS
   
   vProcName       VARCHAR2(80):= 'CAMBIO_CALENDARIO_ACTIVO_FIJOS';

     --ecaceres 5/2/2020
     l_rindex_g   PLS_INTEGER := DBMS_APPLICATION_INFO.set_session_longops_nohint;
     l_slno_g     PLS_INTEGER;
     pTarget PLS_INTEGER;
     
   BEGIN
    
      Job.Ejecuta := 'JOB_CAMBIO_CAL_ACTIVO_FIJOS';
      IniVarGlobalesLocales('IVCALEND');
      BInicio (vProcName);
      
     --ecaceres 5/2/2020 Seguimiento de Proceso
     DBMS_APPLICATION_INFO.set_session_longops (
     rindex        => l_rindex_g,
     slno          => l_slno_g,
     op_name       => Job.Ejecuta,
     target        => pTarget,
     context       => 0,
     sofar         => 1,
     totalwork     => 2,
     target_desc   => 'Procesando  ...',
     units         => 'rows');
         
      --BITACORA_CIERRES
       BITACORA_CIERRES_INICIO (variables.FEC_HOY);
       
       IF variables.cod_sistema is not null then
            
            if variables.cod_sistema = 'PA'  then
                Correr_Calendarios_Integrados(variables.codEmpresa,
                                              variables.codAgencia);
            else    
                Correr_Calendario_IV(variables.codEmpresa, 
                                     variables.codAgencia,
                                     variables.cod_sistema);
             end if;

          --BITACORA_CIERRES
          BITACORA_CIERRES_FIN (variables.FEC_HOY);
          BFinal (vProcName);
        
       END IF;
    
     --ecaceres 5/2/2020 Seguimiento de Proceso
     DBMS_APPLICATION_INFO.set_session_longops (
     rindex        => l_rindex_g,
     slno          => l_slno_g,
     op_name       => Job.Ejecuta,
     target        => pTarget,
     context       => 0,
     sofar         => 2,
     totalwork     => 2,
     target_desc   => 'Procesando  ...',
     units         => 'rows');
     
   EXCEPTION
     WHEN OTHERS THEN 
        MESSAGE('ERROR: '||SQLCODE||'-'||SQLERRM);
        BITACORA_CIERRES_ERROR(VARIABLES.FEC_HOY);
   END CAMBIO_CALENDARIO_ACTIVO_FIJOS;
   
   /*
    EFECTUA : Liquidacion de Pagos Servicios realizados por BANCANET
    */
    PROCEDURE LiquidaPagoServicio IS
    
      vCantPagos        NUMBER := 0;
      vDepositoUnico    varchar2(1);
      vFecMovimiento    date;
      vAgencia          varchar2(5);
      vRecaudador       varchar2(7);
      vCodigoError      varchar2(300);
      vMensajeError     varchar2(300);
      
        --Email si ocurre error 
      vTexto            LONG(32767) := Null;
      vSubject          VARCHAR2(100);
      vSender           VARCHAR2(100);
      vIPCorreo         VARCHAR2(30);
      vEmail            VARCHAR2(100);
      vMensaje          varchar2(500);
      vCodMsg           varchar2(20);
      
      --<<201906P006||RFELIZ||30092019>>--
      vCantLiquiPT      NUMBER := 0; 
      vCantComiPT       NUMBER := 0;
      vFecha            VARCHAR2(10);
      vFechaPagaTodo    VARCHAR2(30) := PA.PARAM.PARAMETRO_X_EMPRESA(variables.CodEmpresa, 'F_BITACORA_PAGATODO', 'CJ');
      vFechaInicioMes   DATE := PA.CALENDAR.OBTENER_PRIMER_HABIL_MES(variables.CodEmpresa, variables.CodAgencia, variables.fec_hoy);
      vFechaAntHabil    DATE := PA.CALENDAR.OBTENER_ANT_FEC_HABIL(variables.CodEmpresa, variables.CodAgencia, variables.fec_hoy);
      vFechaAntHabilX2  DATE := PA.CALENDAR.OBTENER_ANT_FEC_HABIL(variables.CodEmpresa, 
                                                                  variables.CodAgencia, 
                                                                  PA.CALENDAR.OBTENER_ANT_FEC_HABIL(variables.CodEmpresa, 
                                                                                                    variables.CodAgencia, 
                                                                                                    variables.fec_hoy));
        --<</201906P006>>--
    Begin                             
        
        PA.PA_ENVIA_CONCILIARJOB;

        vCantPagos :=  CJ.LiquidaPagoServicio(pCodEmpresa       => variables.codempresa,
                                              pCodAgencia       => variables.codagencia,
                                              pFechaMovimiento  => variables.fec_hoy, 
                                              pForma            => VARIABLES.CODFORMA);
          
        --<<201906P006||RFELIZ||30092019>>--
        /*Ejecutamos la liquidacion de pagos de servicio Paga Todo
        ada dos dias habiles (T+2)*/
        If vFechaPagaTodo = TO_CHAR(vFechaAntHabilX2, 'DD/MM/YYYY') Then   
          
             vCantLiquiPT := CJ.LiquidaServicioPagaTodo(pCodEmpresa      => variables.codempresa,
                                                        pCodAgencia      => variables.codagencia,
                                                        pFechaMovimiento => variables.fec_hoy, 
                                                        pForma           => VARIABLES.CODFORMA);
                                                                 
             CONTROL.MENSAJE := 'Finaliza proceso de liquidacion Paga Todo.';
             synchronize;                                                               
              
            --Actualizamos bitacora de liquidacion pagatodo
            BEGIN
            
               UPDATE PARAMETROS_X_EMPRESA
                  SET VALOR = TO_CHAR(vFechaAntHabil,'DD/MM/YYYY')
                WHERE ABREV_PARAMETRO = 'F_BITACORA_PAGATODO'
                  AND COD_SISTEMA = 'CJ'
                  AND COD_EMPRESA = variables.codempresa;
                  
            EXCEPTION
               WHEN OTHERS THEN 
                  NULL;
            END;
          --    
        End If;
         
        /*Ejecutamos la contabilizacion de las comisiones de Paga Todo 
        l primer dia habil de cada mes*/
        -- NREGALADO FDS-779 28/10/2022
         -- Se comento porque contabilizaci√≥n Comisiones PagaTodo no cuadra con el reporte y comparaci√≥n manual
        /*If vFechaInicioMes = variables.fec_hoy Then
        --
            synchronize;
            vCantComiPT := CJ.LiquidaComisionPagaTodo(pCodEmpresa       => variables.codempresa,
                                                      pCodAgencia       => variables.codagencia,
                                                      pFechaMovimiento  => variables.fec_hoy, 
                                                      pForma            => variables.CODFORMA);
                                                                    
            CONTROL.MENSAJE := 'Finaliza proceso de liquidacion de Comisiones Paga Todo.';
            synchronize;
          --                                                                
        End If;*/
        --<</201906P006>>--
          
        CONTROL.MENSAJE := 'Finaliza proceso de Liquidaci√≥n.';
        synchronize;
                                                                
        IF (vCantPagos > 0 Or vCantLiquiPT > 0 Or vCantComiPT > 0)  THEN      
            --Envia_notificacion_transaccion;
            STANDARD.COMMIT;
            MESSAGE('PROCESO FINALIZADO --->'||chr(10)
                  ||' Transacciones BSC Procesados: ' || vCantPagos || chr(10)
                  ||' Transacciones PAGATODO Procesados: ' || vCantLiquiPT || chr(10)
                  ||' Comisiones PAGATODO Procesados: ' || vCantComiPT ||'. '||vMensaje);
                  
            MESSAGE(' ');
        ELSE
            MESSAGE('NO EXISTEN PAGOS PARA PROCESAR.. '||vMensaje);
            MESSAGE(' ');
        END IF;
                
    EXCEPTION 
        WHEN OTHERS THEN
            MESSAGE('Error: '||SQLERRM); MESSAGE(' ');
            BITACORA_CIERRES_ERROR(VARIABLES.FEC_HOY);
    End LiquidaPagoServicio;
    
    FUNCTION Agregar_Movimiento(pNumero_Cuenta varchar2,
                                pMonto varchar2,
                                pNumero_Documento varchar2) RETURN BOOLEAN IS
      
      NumMovimiento           Number;
      vTipTransPagoSevicio    VARCHAR2(5);
      vSubtipTxPagoServicio   VARCHAR2(5);  
      vDescripcion            subtip_transac.descripcion%TYPE;
      vNumMovimiento          Number(12);
      vDocumentoReferencia    servicios_externos_pagos.numero_documento%TYPE;  
      vSistemaError           VARCHAR2(10);  
      vCodProducto            VARCHAR2(10);
      vSqlError               VARCHAR2(200); 
      vCodError               VARCHAR2(10);  
      Ex_Error                EXCEPTION;
          
    BEGIN
        -- Se obtiene el parametro de tipo de transaccion de pago de servicio
        vTipTransPagoSevicio    := PA_INTERFAZ_CONSULTA.ObtieneParametroEmpresa('CC',Variables.codEmpresa, 'CC_TRAN_LIQSERV'); 
      
        -- Se obtiene el parametro de subtipo de transaccion de pago de servicio
        vSubtipTxPagoServicio   := PA_INTERFAZ_CONSULTA.ObtieneParametroEmpresa('CC',Variables.codEmpresa,'CC_SUBTRAN_LIQSERV');
        
        -- Codigo de Producto de la Cuenta
        BEGIN
            SELECT COD_PRODUCTO
              INTO vCodProducto
              FROM CUENTA_EFECTIVO
             WHERE NUM_CUENTA = pNumero_Cuenta;
        EXCEPTION 
            WHEN OTHERS THEN
                Raise Ex_Error;
        END;
        
        Begin             
              -- Agrega el Movimiento a la tabla de Movimientos Diarios.
              CCMOV.Agrega_Movimiento(Variables.codEmpresa,
                                      Variables.codAgencia,
                                      'CC',
                                      pNumero_Cuenta,
                                      vCodProducto,
                                      vTipTransPagoSevicio,  -- 58 NOTA DE CREDITO
                                      vSubtipTxPagoServicio, -- 
                                      variables.Usuario,
                                      Variables.Fec_Hoy,
                                      NULL, -- NumDocumento
                                      pMonto,
                                      substr(vDescripcion,1,40), 
                                      'CC',
                                      NULL,
                                      'N',
                                      vNumMovimiento,
                                      pNumero_Documento --Referencia 
                                      );
        Exception
            When Others Then
                Raise Ex_Error;
        End;                
                    
        Begin
              If vNumMovimiento <> 0 Then
                 -- 2. Aplica el movimiento.
                 CCMOV.Aplica_Movimiento(vNumMovimiento,
                                         NULL,
                                         NULL,
                                         NULL,
                                         NULL,
                                         NULL,
                                         vSistemaError,
                                         vCodError,
                                         vSqlError,
                                         NULL);

                  If vSqlError <> '000005' Then 
                         
                     IF vSqlError IN('000074','003054') THEN
                        Raise Ex_Error;                                      
                     END IF;                                                                                     
                                      
                     -- Si dio algun error se debe eliminar el movimiento generado.
                     delete MOVIMTO_DIARIO
                      where  (COD_EMPRESA = variables.CodEmpresa )
                        and  (NUM_MOVTO_D = vNumMovimiento     );                                     
                                
                  End If;          
                                            
              End if;     
                    --
        Exception
           when others then
               Raise Ex_Error;    
        End;
                
        RETURN TRUE;
        
    Exception
        when Ex_Error then
                RETURN FALSE;
                
        when others then
                RETURN FALSE;
    END Agregar_Movimiento;
    
    PROCEDURE CJ_Cuenta_Contable (P_Empresa       in number,
                                  P_ID_CUENTA     in number,                          
                                  P_CODIGO_MONEDA in varchar2,
                                  P_CtaCtable     in out varchar2,
                                  MensajeErr      in out varchar2) is
    begin
       select CUENTA_CONTABLE
         into P_CtaCtable
         from BA_CTAS_CORRIENTES -- Definir Tabla
        where CODIGO_EMPRESA    = P_EMPRESA
          and ID_CUENTA         = P_ID_CUENTA
          and CODIGO_MONEDA     = P_CODIGO_MONEDA
          and ESTADO            = 'A';
          
    exception
      when no_data_found then
         MensajeErr := '000014'; -- No encontro Cta para el concepto
         return;
      when too_many_rows then
         MensajeErr := '000015'; -- Concepto duplicada
         return;
      when others then
         MensajeErr := '000016'; -- Se presentaron problemas con la cuenta
         return;        
     
    END CJ_Cuenta_Contable;
    
    -- Funcion :Realiza la Solicitud de Cheque   
    Procedure Solicitud_Cheque (P_EMPRESA          In Number,
                                P_AGENCIA           In Number,
                                P_TRANSACCION       In Number,
                                P_MONEDA            In Number,
                                P_SUBTRANSACCION    In Number,
                                P_APLICACION        In Varchar2,
                                P_SUB_APLICACION    In Number,                           
                                P_CUENTA            In Varchar2,
                                P_CLIENTE           In Number,
                                P_FECHA_MOVIMIENTO  In Date,
                                P_FECHA             In Date,
                                P_FECHA_VALOR       In Date,
                                P_MONTO             In Number,
                                P_ESTADO            In Varchar2,
                                P_OBSERVACIONES1    In Varchar2,
                                P_OBSERVACIONES2    In Varchar2,
                                P_OBSERVACIONES3    In Varchar2,
                                P_OBSERVACIONES4    In Varchar2,
                                P_NOMBRE_RECAUDADOR In Varchar2,
                                P_TIPO_CARGOS       In Varchar2,
                                P_DOCUMENTO         In Out Varchar2,
                                P_NUMERO_ASIENTO    In Out Number,
                                P_TC1               In Out Number,
                                P_TC2               In Out Number,
                                p_Paga_Imp_Ley288     In Varchar2
                                ) Is
      -- VARIABLES--
      V_CONTA                Varchar2(1);
      V_DIFERENCIA           Number;
      V_NUMERO_ASIENTO       Number(10);
      V_MENSAJE_ERROR        Varchar2(100)  :=    Null;
      V_MENSAJE_ERROR2       Varchar2(250)  :=    Null;
      V_DESCRIPCION          Varchar2(100);
      V_SUBAPLICACION        Number(3);
      V_CUENTA_CONTABLE      Varchar2(25);
      V_UNIDAD_EJECUTORA     Number(15);
      V_MONTO                Number;
      V_RESULTADO            Boolean;
      v_no_documento         Varchar2(250);
      v_cargo                Number(5);
      v_estado               Varchar2(10);
      v_dias_poliza          Number(5);
      v_f_prox_poliza        Date;
      v_valor1_actual        Varchar2(250);
      v_valor1_anterior      Varchar2(250);
      V_ID_CUENTA            NUMBER(12);
      V_CODIGO_MONEDA        NUMBER(2);
      vcontabilizo           Boolean;
      Mensaje_P              Varchar2(50);
      vTipTransPagoSevicio   Varchar2(50);
      vSubtipTxPagoServicio  Varchar2(50);
      v_monto_linea_asiento  Number;
      vBcg                   Varchar2(1);
      
      -- EXCEPCIONES --
      CHEQUE                 Exception;
      ACTUALIZA              Exception;
      CONTA                  Exception;
      CARGO                  Exception;
      GENERAL                Exception;
      --
      
        
    Begin
      -- Parametros
      -- Se obtiene el parametro de tipo de transaccion de pago de servicio
      vTipTransPagoSevicio    := PA_INTERFAZ_CONSULTA.ObtieneParametroEmpresa('CC',Variables.codEmpresa, 'TIP_TRAN_PAGO_SRV'); 
      
      if vTipTransPagoSevicio is null then
          Raise CONTA;
      end if;    
      
      -- Se obtiene el parametro de subtipo de transaccion de pago de servicio
      vSubtipTxPagoServicio   := PA_INTERFAZ_CONSULTA.ObtieneParametroEmpresa('CC',Variables.codEmpresa,'SUBTIP_TRAN_PAGO_SRV');
      
      if vSubtipTxPagoServicio is null then
          Raise CONTA;
      end if;    
      
      
      /*Select bcj_cons_ord_cheque.nextval into p_documento
        From sys.dual;*/
      Select ba_cons_ord_cheque.nextval into p_documento
        From sys.dual;  
        
      vBcg := 'S' ;   
      
      --CONTABILIZA LA SOLICITUD DE CHEQUE (SI CONTA = 'S')
      if vBcg = 'S' then
          
            CG.CG_UTL.Caratula_Del_Asiento (Variables.CodEmpresa,
                                             P_AGENCIA,
                                             P_APLICACION,                                               
                                             P_SUB_APLICACION, --902,
                                             vTipTransPagoSevicio, /* EMISION DE CHEQUE */
                                             vSubtipTxPagoServicio,
                                             0,  
                                             'LIQUIDACION PAGOS DE SERVICIOS',
                                             variables.fec_hoy,
                                             variables.fec_hoy,
                                             V_NUMERO_ASIENTO, 
                                             Variables.Usuario,
                                             V_MENSAJE_ERROR2);
                                                      
            if V_MENSAJE_ERROR2 is not Null then
              Raise CONTA;
            End if;    
       
            V_CUENTA_CONTABLE := P_CUENTA;
            V_CODIGO_MONEDA   := P_MONEDA;
            V_ID_CUENTA       := 6; --- PARAMETRO FIJO PARA ESTABLECER DE QUE CUENTA SE VA A 
        
            PR.PR_PROCS.Convierte_Monto_CredCta(P_EMPRESA,                                                  
                                               p_monto,    
                                               p_moneda,    
                                               V_CUENTA_CONTABLE,
                                               P_FECHA,
                                               v_monto_linea_asiento,
                                               V_MENSAJE_ERROR);
                                                         
            if V_MENSAJE_ERROR is not Null then
              Raise CONTA;
            End if;

            CG.CG_UTL.Lineas_Del_Asiento(Variables.CodEmpresa,
                                          P_AGENCIA,--:Variables.CodAgencia,
                                          P_APLICACION, --FAMH 04/12/2005--'BCJ', /* APLICACION */      
                                          P_SUB_APLICACION, -- FAMH 04/12/2005 --902, -- Subaplicacion 
                                          vTipTransPagoSevicio, --* EMISION DE CHEQUE
                                          vSubtipTxPagoServicio,/* SUBTRANSACCION */                                       
                                          1, --To_Char(:BKCredit.numero_transaccion),      
                                          'LIQUIDACION PAGOS DE SERVICIOS',--V_DESCRIPCION,
                                          P_FECHA, /*MOVIMIENTO*/
                                          P_FECHA_VALOR,/*VALOR*/
                                          P_FECHA, /*ASIENTO*/
                                          V_NUMERO_ASIENTO,
                                          V_CUENTA_CONTABLE,
                                          variables.codagencia, /*AUXILIAR*/      
                                          v_monto_linea_asiento,
                                          'N', /*ACUMULA MONTO*/
                                          'D', /*DEBITO*/ 
                                          'N', /*MODIFICABLE*/
                                          P_TC1,/*TIPO CAMBIO ORIGEN*/
                                          P_TC2,/*TIPO CAMBIO ORIGEN*/
                                          Variables.Usuario,
                                          V_MENSAJE_ERROR2);
                                                
            if V_MENSAJE_ERROR2 is not Null then
              Raise CONTA;
            End if;   
        
            -- VOY A VERIFICAR LA CUENTA DE LA QUE VOY A HACER EL CHEQUE
            Cj_Cuenta_Contable(variables.codempresa,
                               V_ID_CUENTA,
                               V_CODIGO_MONEDA,                           
                               v_cuenta_contable,
                               v_mensaje_error);                           
                                      
            if V_MENSAJE_ERROR is not Null then
               Raise CONTA;
            End if;
   
            PR.PR_PROCS.Convierte_Monto_CredCta(P_EMPRESA,                                                  
                                                p_monto, 
                                                p_moneda,
                                                V_CUENTA_CONTABLE,
                                                P_FECHA,
                                                v_monto_linea_asiento,
                                                V_MENSAJE_ERROR);
                                                            
            if V_MENSAJE_ERROR is not Null then
              Raise CONTA;
            End if;

            CG.CG_UTL.Lineas_Del_Asiento(Variables.CodEmpresa,
                                          P_AGENCIA,--:Variables.CodAgencia,
                                          P_APLICACION, --FAMH 04/12/2005--'BCJ', /* APLICACION */      
                                          P_SUB_APLICACION, -- FAMH 04/12/2005 --902, -- Subaplicacion --:BKCredit.codigo_sub_aplicacion,
                                          vTipTransPagoSevicio, -- EMISION DE CHEQUE */
                                          vSubtipTxPagoServicio,/* SUBTRANSACCION */                                       
                                          1, -- CHECK--To_Char(:BKCredit.numero_transaccion),      
                                          'LIQUIDACION PAGOS DE SERVICIOS',--V_DESCRIPCION,
                                          P_FECHA, /*MOVIMIENTO*/
                                          P_FECHA_VALOR,/*VALOR*/
                                          P_FECHA, /*ASIENTO*/
                                          V_NUMERO_ASIENTO,
                                          V_CUENTA_CONTABLE,
                                          variables.codagencia, /*AUXILIAR*/      
                                          v_monto_linea_asiento,
                                          'N', /*ACUMULA MONTO*/
                                          'C', /*crediTO*/ 
                                          'N', /*MODIFICABLE*/
                                          P_TC1,/*TIPO CAMBIO ORIGEN*/
                                          P_TC2,/*TIPO CAMBIO ORIGEN*/
                                          Variables.Usuario,
                                          V_MENSAJE_ERROR2);

            if V_MENSAJE_ERROR2 is not Null then
              Raise CONTA;
            End if;   

       end if; 
           
      -- REALIZAR EL INSERT        
      -- GENERACION SOLICITUD DE CHEQUE EN BANCOS
      Insert into BA_MOVIMIENTO_DIARIO(CODIGO_EMPRESA, CODIGO_AGENCIA, CODIGO_TRANSACCION,
        NUMERO_DOCUMENTO, CODIGO_MONEDA, CODIGO_SUBTRANSACCION, CODIGO_APLICACION, NUMERO_CUENTA,
        CODIGO_CLIENTE, FECHA_MOVIMIENTO, FECHA_VALOR_MOVIMIENTO, MONTO_MOVIMIENTO,
        CODIGO_ESTADO_MOVIMIENTO, OBSERVACIONES1, OBSERVACIONES2, OBSERVACIONES3, OBSERVACIONES4,
        NOMBRE_BENEFICIARIO, NUMERO_ASIENTO_CONTABLE, ADICIONADO_POR, FECHA_ADICION,
        IMP_LEY288)
        values(P_EMPRESA, P_AGENCIA, P_TRANSACCION, P_DOCUMENTO, P_MONEDA, P_SUBTRANSACCION,
               P_APLICACION, V_ID_CUENTA, P_CLIENTE, P_FECHA_MOVIMIENTO, P_FECHA_MOVIMIENTO, P_MONTO,
               'P', P_OBSERVACIONES1, P_OBSERVACIONES2, P_OBSERVACIONES3, P_OBSERVACIONES4,
               P_NOMBRE_RECAUDADOR, V_NUMERO_ASIENTO, Variables.USUARIO, VARIABLES.FEC_HOY,
               Decode(p_Paga_Imp_Ley288,'S','B',p_Paga_Imp_Ley288));
    
       
          if SQL%ROWCOUNT = 0 then
            Raise CHEQUE;
          End if;

          CG.CG_UTL.Cuadre_Asiento (to_number(variables.codempresa), 
                                     VARIABLES.FEC_HOY,
                                     to_number(v_numero_asiento), 
                                     v_diferencia, 
                                     v_mensaje_error);
         
         if v_mensaje_error is not null then
            mensaje_p := v_mensaje_error;
            return;
         end if;

        P_NUMERO_ASIENTO    := v_numero_asiento;    
                               
    Exception
      When No_Data_Found then
        -- Se presentaron problemas para accesar los Consecutivos
        UTILITARIOS.Mensaje('000580', Variables.CodIdioma, 'PR');
        Exit_Form(No_Commit, Full_Rollback);
      When CHEQUE then
        -- Se presentaron problemas con la Emisi√≥n del Cheque
        UTILITARIOS.Mensaje('000581', Variables.CodIdioma, 'PR');
        Exit_Form(No_Commit, Full_Rollback);
      When CONTA then
        if V_mensaje_Error2 is Not Null then
          Message(V_Mensaje_Error2); Message(' ');
        elsif V_Mensaje_Error is Not Null then
          UTILITARIOS.Mensaje(V_Mensaje_Error, Variables.CodIdioma, 'PR');
        End if;
        Exit_Form(No_Commit, Full_Rollback);
      When CARGO then
        -- Problemas generando Cargos
        UTILITARIOS.Mensaje('000025', Variables.CodIdioma, 'PR');
        Exit_Form(No_Commit, Full_Rollback);
      When ACTUALIZA then
        -- No se pudo actualizar los Consecutivos
        UTILITARIOS.Mensaje('000582', Variables.CodIdioma, 'PR');
        Exit_Form(No_Commit, Full_Rollback);
      When General then
        if V_mensaje_Error2 is Not Null then
          Message(V_Mensaje_Error2); Message(' ');
        elsif V_Mensaje_Error is Not Null then
          UTILITARIOS.Mensaje(V_Mensaje_Error, Variables.CodIdioma, 'PR');
        End if;
        Exit_Form(No_Commit, Full_Rollback);
      When Others then
        UTILITARIOS.Mensaje_Error('000032', Variables.CodIdioma, 'PR', SqlErrm);
        Exit_Form(No_Commit, Full_Rollback);
    End Solicitud_Cheque;   
    
    function Es_Debito(pTipTransaccion      in number
                      ) return varchar2 is

      vTipMovimiento   varchar2(1);

    begin
    
      select tip_movimiento
        into   vTipMovimiento
        from   cat_tip_transac
       where  cod_sistema = 'CC' 
         and    tip_transaccion = pTipTransaccion;

      if vTipMovimiento = 'D' then
        return 'S';
      else
        return 'N';
      end if;
    
    RETURN NULL; 
    
    exception
        when OTHERS then
            return 'N';
    end Es_Debito; 

    PROCEDURE Anula_Referido IS
     
    BEGIN 
     
       declare
           cursor cReferidos is
            select a.cod_empresa,
                   a.num_cuenta,
                   a.num_cheque,
                   a.movto_cheque,
                   a.origen_cheque
             from  cks_referidos a
             where ( a.cod_empresa   = variables.CodEmpresa )
             and   a.cod_agencia  = variables.codagencia   
             and   ( a.estado                  = 'P' ) 
             and   ( a.origen_cheque  = 'J'  ); 
            
        begin
        
             for vRef in cReferidos loop
                update cks_referidos
                   set estado           = 'R',
                       fec_aprorech     = sysdate,
                       usuario_aprorech = variables.Usuario
                 where cod_empresa      = vRef.Cod_Empresa
                   and num_cuenta       = vRef.Num_Cuenta
                   and num_cheque       = vRef.Num_Cheque
                   and (movto_cheque    = vRef.Movto_Cheque or movto_cheque is null);
             end loop;
                  
        end;
        
    END Anula_Referido;
    
    PROCEDURE Anula_CC_ImpLey288(pNumMovtoD In Number) IS
    -- Procedimiento que Anula los Movimientos Generados por el
    -- Cobro del Impuesto del 1.5 por Mil de la Ley288/04.
       cursor cMovs is
       select num_movto_d    , num_cuenta     , 
              cod_sistema    , tip_transaccion,
              subtip_transacc, cod_usuario    , 
              num_documento  , mon_movimiento ,
              cod_producto   , estado_movimto
         from movimto_diario
        where num_mov_fuente = pNumMovtoD
          and sistema_fuente = 'CC';
          
    -- Declaracion de Variables de Trabajo.
       vSecuencia   Number     ;
       vSqlErr      Number     ;
       vTipTransRev Number(3)  ;
       vNumMovimto  Number(10) ;
       vEstadoMov   Varchar2(1);
       vCodErr        Varchar2(6);
    -- 
    BEGIN
        
        for rg in cMovs
        loop
        
            if rg.estado_movimto = 'N' then
        
               update movimto_diario
                  set estado_movimto = 'R'
                where num_movto_d    = rg.num_movto_d;
            
            elsif rg.estado_movimto in ('A','C') then
               
                if (Es_Debito(rg.tip_transaccion) = 'S') then
                   vTipTransRev := 12;
                else
                   vTipTransRev := 13;
                end if;
                
                ccmov.Agrega_Movimiento(variables.codEmpresa   ,
                                        variables.codAgencia   ,
                                        rg.cod_sistema          ,
                                        rg.num_cuenta           ,
                                        rg.cod_producto         ,
                                        vTipTransRev            ,
                                        '1'                     ,
                                        variables.Usuario      ,
                                        variables.fec_hoy   ,
                                        rg.num_documento        ,
                                        rg.Mon_movimiento       ,
                                        'Reversi√≥n del Imp. 1.5 por Mil Ley 288 (Transaccion CL)',
                                        rg.cod_sistema          ,
                                        rg.num_movto_d          ,
                                        'N'                     ,
                                        vNumMovimto);
                                        
                ccmov.Aplica_Movimiento(vNumMovimto             , 
                                        variables.fec_hoy   ,
                                        rg.tip_transaccion      ,
                                        Null                    ,
                                        Null                    ,
                                        Null                    ,
                                        vSecuencia              ,
                                        vSqlErr                 ,
                                        vCodErr);
                                        
                 if vCodErr != '000005' then
                    Mensaje('Error Aplicando Movimiento: '||vSqlErr);
                    --:global.error := 'S';
                 end if;
                 
               if rg.estado_movimto = 'A' then
                  vEstadoMov := 'R';
               else
                  vEstadoMov := 'E';
               end if;

                update movimto_diario
                   set estado_movimto = vEstadoMov
                 where cod_empresa = variables.codEmpresa 
                      and num_movto_d = rg.num_movto_d;
                  --
                update movimto_diario
                   set mon_movimiento = rg.mon_movimiento
                 where cod_empresa = variables.codEmpresa
                      and num_movto_d = vNumMovimto;
                      
            end if;
            
        end loop;
        
    EXCEPTION
           when others then
                Mensaje('Error Anula_CC_ImpLey288: '||sqlerrm);
                --:global.error := 'S';
    END Anula_CC_ImpLey288;
    
    PROCEDURE Anula_Solicitud_Cheque(pEmpresa   In Varchar,
                                     pSolicitud In Number ,
                                     pFecha     In Date   ,
                                     pMensaje   Out Varchar2
                                     ) IS
                                     
    -- Declaracion de Variables de Trabajo.
       vEstado Varchar2(1);
       vCheque Number(10);
    BEGIN
    
       pMensaje := Null;
        
    -- Determina el Estado del Movimiento.
         begin
               select codigo_estado_movimiento, 
                      numero_cheque_impreso
                 into vEstado, 
                      vCheque
                 from ba_movimiento_diario
                where codigo_empresa     = pEmpresa
                  and codigo_transaccion = '52'
                  and numero_documento   = pSolicitud
                  and fecha_movimiento   = pFecha;
                  
         -- Anula la Solicitud de Cheque.
         --
               if vEstado = 'S' then
                     begin
                         update ba_movimiento_diario
                            set codigo_estado_movimiento ='N' 
                            where codigo_empresa           = variables.codEmpresa
                                 and codigo_transaccion    = '52'
                                 and numero_documento      = pSolicitud
                                 and fecha_movimiento      = variables.fec_hoy;
                     exception
                                when others then
                                     pMensaje := 'Error Anulando la Solicitud de Bancos: '||sqlerrm;
                                return;
                     end;
               
               end if;
         exception
               when others then
                    pMensaje := 'Error Leyendo la Solicitud de Bancos: '||sqlerrm;
         end;
         
    END Anula_Solicitud_Cheque;
    
    PROCEDURE Anula_Comprobante_Efectivo(pEmpresa     In Varchar ,
                                         pComprobante In Number  ,
                                         pFecha       In Date    ,
                                         pMensaje     Out Varchar2
                                         ) IS
    -- 
    -- Declaracion de Variables de Trabajo. 
       vEstado   Varchar2(1);
       vMsjError Varchar2(300) := Null;
   
    BEGIN 
    
      -- Determina el Estado del Comprobante. 
       begin
            select estado_comprobante
              into vEstado
              from bcj_solicitud
             where codigo_empresa     = pEmpresa
               and codigo_aplicacion  = 'BCL'
               and numero_comprobante = pComprobante
               and fecha_comprobante  = pFecha;
       
       exception
                 when no_data_found then
                      pMensaje := 'No se Encontr√≥ Comprobante de Cajas No. '||pComprobante;
                      vEstado  := Null;
                      return;
                 when others then
                      pMensaje := 'Error Leyendo Comprobante de Cajas No. '||pComprobante||': ||sqlerrm';
                      vEstado := Null;
                      return;
       end;

      -- Si la Solicitud No esta Aprobada.    
       if vEstado <> 'A' then
            begin
             update bcj_solicitud
                set estado_comprobante = 'N' ,
                    anulado_por        = variables.Usuario,
                    fecha_anulacion    = variables.fec_hoy
              where codigo_empresa     = pEmpresa
                and codigo_aplicacion  = 'BCL'
                and numero_comprobante = pComprobante
                and fecha_comprobante  = pFecha;
            exception
               when others then
                    pMensaje := 'Error Anulando Comprobantes de Cajas No. '||sqlerrm;
                    return;
            end;
       end if;
    
    END Anula_Comprobante_Efectivo;
    
    PROCEDURE Anula_Asiento_Contable(pEmpresa In Varchar2,
                                     pFecha   In Date    ,
                                     pAsiento In Number  ,
                                     pMensaje Out Varchar2
                                     ) IS
    -- 
    -- Procedimiento que Anula el Asiento Contable.
       vEstado Varchar2(1);

    BEGIN
 
      -- Busca el Estado del Asiento Contable.
       begin
          select estado
            into vEstado
            from cg_movimiento_resumen
           where codigo_empresa   = to_number(pEmpresa)
             and fecha_movimiento = pFecha
             and numero_asiento   = pAsiento;
       exception
               when others then
                    pMensaje := 'Error Leyendo Estado del Asiento: '||sqlerrm;
                 return;
       end;

      -- Determina si el Asiento Contable esta Incompleto. 
       if vEstado = 'I' then 
       -- Anula el Encabezado del Asiento Contable.
       -- 
          update cg_movimiento_resumen
             set estado             = 'R'               ,
                 modificado_por     = variables.Usuario,
                 fecha_modificacion = variables.fec_hoy
           where codigo_empresa   = to_number(pEmpresa)
             and fecha_movimiento = pFecha
             and numero_asiento   = pAsiento;

       -- Anula el Detalle del Asiento Contable.
       -- 
          update cg_movimiento_detalle
             set estado             = 'R'               ,
                 modificado_por     = variables.Usuario,
                 fecha_modificacion = variables.fec_hoy
           where codigo_empresa   = to_number(pEmpresa)
             and fecha_movimiento = pFecha
             and numero_asiento   = pAsiento;
       end if;
       
    EXCEPTION
           when others then
                pMensaje := 'Error Anulando Asiento No. '||pAsiento||': '||sqlerrm;
    END Anula_Asiento_Contable;    
    
    PROCEDURE Anula_Cuenta_Efectivo(pNumMovCC   In Number  ,
                                    pMensaje    Out Varchar2
                                    ) IS

    -- Declaracion de Variables de Trabajo.
       vEstadoMov   Varchar2(1);
       vCodErr        Varchar2(6);
       vSqlErr      Number     ;
       vSecuencia   Number     ;
       vTipTransRev Number(3)  ;
       vNumMovimto  Number(10) ;

       cursor cMovDia is
         select num_movto_d    , num_cuenta     , cod_sistema , 
                tip_transaccion, subtip_transacc, cod_usuario , 
                num_documento  , mon_movimiento , cod_producto, 
                estado_movimto
            from  movimto_diario
            where num_movto_d    = pNumMovCC;
    -- 
    BEGIN
         pMensaje := Null;
         for RgMov in cMovDia
         loop
         
             -- Si el Movimiento No esta Aplicado.
             if RgMov.estado_movimto = 'N' then
     
               update movimto_diario
                  set estado_movimto = 'R'
                where num_movto_d    = RgMov.num_movto_d;
              
             -- Si el Movimiento esta Aplicado o Contabilizado. 
             elsif RgMov.estado_movimto in ('A','C') then
             
                 if (Es_Debito(RgMov.tip_transaccion) = 'S')  then
                    vTipTransRev := 12;
                 else
                    vTipTransRev := 13;
                 end if;
                 
                 -- Agrega Movimiento de Reverso.
                 CCMOV.Agrega_Movimiento(variables.codEmpresa,
                                         variables.codAgencia,
                                         RgMov.cod_sistema    ,
                                         RgMov.num_cuenta     ,
                                         RgMov.cod_producto   ,
                                         vTipTransRev         ,
                                         '1'                  ,
                                         variables.Usuario   ,
                                         variables.fec_HOY,
                                         RgMov.num_documento  ,
                                         RgMov.Mon_movimiento ,
                                         'Reversi√≥n de Transaccion de Cuentas x Liquidar.',
                                         variables.codSistema,
                                         RgMov.num_movto_d    ,
                                         'N'                  ,
                                         vNumMovimto);

                -- Aplica Movimiento de Reverso.
                 CCMOV.Aplica_Movimiento(vNumMovimto             , 
                                         variables.fec_hoy   ,
                                         RgMov.tip_transaccion   ,
                                         Null                    ,
                                         Null                    ,
                                         Null                    ,
                                         vSecuencia              ,
                                         vSqlErr                 ,
                                         vCodErr);
                                  
                  if vCodErr != '000005' then
                    pMensaje := 'Error Aplicando Movimiento: '||vSqlErr;
                    return; 
                  end if;
                  
                  if RgMov.estado_movimto = 'A' then
                    vEstadoMov := 'R';
                  else
                    vEstadoMov := 'E';
                  end if;
               
                  update movimto_diario
                     set estado_movimto = vEstadoMov
                   where num_movto_d = RgMov.num_movto_d;
                     --
                  update movimto_diario
                     set mon_movimiento = RgMov.mon_movimiento
                   where num_movto_d = vNumMovimto;
             end if;
           
             -- Anula los Movimientos del Cobro del Impuesto del 1.5 por Mil Ley 288-04. 
             Anula_CC_ImpLey288(RgMov.num_movto_d);
         end loop;
         
    EXCEPTION
          when others then
             pMensaje := 'Error Anula_Cuenta_Efectivo: '||sqlerrm;
    END Anula_Cuenta_Efectivo;
    
    PROCEDURE Anula_Movimientos(pEmpresa   In Varchar2,
                                pSistema   In Varchar2,
                                pFecCierre In Date    ,
                                pMensaje   Out Varchar2
                                )IS
                                
    -- Declaracion de Variables de Trabajo.
       vComprobante Number     ;
       vNumMovCC    Number     ;
       vFormaPago   Varchar2(8);
       vMsjError    Varchar2(300) := Null;
       vCodError    Varchar2(100) := Null;

    -- Busca los Movimientos Incompletos en CL_MOVIMIENTO. 
       cursor cMov is
       select cod_empresa    , cod_cliente   , 
              num_documento  , num_movimiento, 
              tipo_cuenta    , fec_movimiento,
              cod_estado     , num_asiento   ,
              num_comprobante
         from cl_movimiento
        where cod_empresa     = pEmpresa
          and cod_sistema     = pSistema
          and fec_movimiento  = pFecCierre
          and cod_estado      = 'I';
    -- 
    BEGIN
    
       pMensaje := Null;
    
       for Rg in cMov
       loop

         -- Determina el Tipo de Cuenta. 
          if rg.tipo_cuenta = 'C' then -- Inicio del If Tipo Cuenta.

            -- Busca la Forma de Pago Via Cuenta de Efectivo en CL_PARAMETROS. 
             vFormaPago := CL.CL_PROCS.PARAMETROS_BCL(variables.codEmpresa, 
                                                      'SISTEMA',
                                                      'VIACTAEFECTIVO',
                                                      vCodError,
                                                      vMsjError);
                                           
               if vMsjError is not null then
                  pMensaje := vMsjError;
                  return;
               end if;
                
            -- Determina si Existen Movimientos en Cuentas de Efectivo.
             begin
                declare
                cursor cMovDetCC is    
                select mov_referencia
                  from cl_movimiento_detalle
                 where cod_empresa    = rg.cod_empresa
                   and cod_cliente    = rg.cod_cliente
                   and num_documento  = rg.num_documento
                   and num_movimiento = rg.num_movimiento
                   and tipo_cuenta    = rg.tipo_cuenta
                   and cod_forma_pago = vFormaPago;
                 
                  begin
                  
                     for rgcc in cMovDetCC 
                     loop
                     
                        -- Anula el Debito en Cuentas de Efectivo.
                        control.linControl := 'Anulando Cuenta de Efectivo, Movimiento: '||rg.num_movimiento;
                        synchronize;
                        Anula_Cuenta_Efectivo(rgcc.mov_referencia,vMsjError);
                        
                        if vMsjError is not null then
                           pMensaje := vMsjError;
                           return;
                        end if;
                        
                     end loop;
                     
                  end;
                  
             end;
             
          elsif rg.tipo_cuenta = 'P' then
          
            -- Busca la Forma de Pago Via un Cheque en CL_PARAMETROS. 
             vFormaPago := CL.CL_PROCS.Parametros_BCL(variables.codEmpresa, 
                                                      'SISTEMA',
                                                      'VIACHEQUE', 
                                                      vCodError,
                                                      vMsjError);
                                          
               if vMsjError is not null then
                  pMensaje := vMsjError;
                  return;
               end if;
               
            -- Determina si Existe Solicitud de Cheque de Administracion.
             begin
                declare
                cursor cMovDetCK is    
                select doc_referencia
                  from cl_movimiento_detalle
                 where cod_empresa    = rg.cod_empresa
                   and cod_cliente    = rg.cod_cliente
                   and num_documento  = rg.num_documento
                   and num_movimiento = rg.num_movimiento
                     and tipo_cuenta    = rg.tipo_cuenta
                     and cod_forma_pago = vFormaPago;
                     
                  begin
                     for rgck in cMovDetCK
                     loop
 
                        -- Anula la Solicitud de Cheque de Administracion. 
                        control.linControl := 'Anulando Solicitud de Cheque, Movimiento: '||rg.num_movimiento;
                        synchronize;
                        Anula_Solicitud_Cheque(rg.cod_empresa     ,
                                               rgck.doc_referencia,
                                               rg.fec_movimiento  ,
                                               vMsjError);
                                               
                        if vMsjError is not null then
                           pMensaje := vMsjError;
                           return;
                        end if;
                        
                     end loop;
                     
                  end;
                  
             end;
               
          end if; -- Fin del If Tipo Cuenta.

          -- Anula Comprobante de Efectivo. 
          control.linControl := 'Anulando Comprobante de Efectivo, Movimiento: '||rg.num_movimiento;
          synchronize;
          vComprobante := to_number(substr(rg.num_comprobante,4,8));
          Anula_Comprobante_Efectivo(rg.cod_empresa     ,
                                     vComprobante,
                                     rg.fec_movimiento  ,
                                     vMsjError);
          if vMsjError is not null then
             pMensaje := vMsjError;
             return;
          end if;
        
       -- Anula la Contabilizacion del Movimiento. 
          control.linControl := 'Anulando Contabilizacion, Movimiento: '||rg.num_movimiento;
          synchronize;
          Anula_Asiento_Contable(rg.cod_empresa   ,
                                 rg.fec_movimiento,
                                 rg.num_asiento   ,
                                 vMsjError);
                                 
          if vMsjError is not null then
             pMensaje := vMsjError;
             return;
          end if;
          
          -- Anula la Operacion de Liquidacion.
          control.linControl := 'Anulando Liquidacion, Movimiento: '||rg.num_movimiento;
          synchronize;
          begin
             update cl_liquidacion
                set cod_estado = 'N'
              where cod_empresa     = Rg.cod_empresa
                and num_comprobante = Rg.num_comprobante;
          exception
             when others then
                 pMensaje := 'Anula Movimientos: '||sqlerrm;
          end;
           
          -- Anula el Movimiento. 
          control.linControl := 'Anulando Movimiento: '||rg.num_movimiento;
          synchronize;
          begin
             update cl_movimiento
                set cod_estado = 'N'
              where cod_empresa    = Rg.cod_empresa
                and cod_cliente    = Rg.cod_cliente
                and num_documento  = Rg.num_documento
                and num_movimiento = Rg.num_movimiento
                and tipo_cuenta    = Rg.tipo_cuenta;
          exception
              when others then
                pMensaje := 'Anula Movimientos: '||sqlerrm;
          end;
          
       end loop;
       
    END;

    -- FUNCION : Liquidacion de Pagos Servicios realizados por BANCANET  --
    Procedure Principal is
    
           p_DOCUMENTO                  Varchar2(15);
           p_NUMERO_ASIENTO             Number            :=    Null;
           p_TC1                        Number;
           p_TC2                        Number;
           NumMovimiento                Number;
           v_Valor                      Varchar2(80);         
           v_Agencia_Cuenta             Number            :=    Null;
           p_Concepto                   Varchar2(15)      :=    'PRINCIPAL';
           p_Codigo_Sub_Aplicacion      Varchar2(4)       :=    '100';
           p_Sub_Aplicacion_Origen      Varchar2(4)       :=    null;--'902';    
           p_Transaccion                Varchar2(5);
           p_Sub_Transaccion            Varchar2(5);                
           v_Subtran_chk                Varchar2(5);              
           v_Codigo_Cliente             Varchar2(15)      := Null;
           v_Paga_Imp_Ley288            Varchar2(1)       := 'S';
           v_Codigo_Aplicacion          Varchar2(3)       :=    'BCC';
           v_Aplicacion_Origen          Varchar2(3);
           v_Moneda_Origen              Varchar2(4)       :=    1;         
           v_Cod_Producto               Varchar2(4)       :=     Null;             
           v_cod_verizon                pa.servicios_externos.cod_recaudador%TYPE; 
           vUsuario                     Varchar2(15);
           vCantRegs                    number := 0;
           vTipTransPagoSevicio         VARCHAR2(5);
           vSubtipTxPagoServicio        VARCHAR2(5);
           vDescripcion                 subtip_transac.descripcion%TYPE;
           vNumMovimiento               Number(12);
           vDocumentoReferencia         servicios_externos_pagos.numero_documento%TYPE;
           vForma_Pago                  servicios_externos.forma_pago%TYPE;
           vHoraInicio                  varchar2(20);
           vFechaBA                     date;
           vSistemaError                VARCHAR2(10);  
           vSqlError                    VARCHAR2(200); 
           vCodError                    VARCHAR2(10);  
           Ex_Error                     EXCEPTION;
        --  
        Cursor Recaudador(pUsuario varchar2) IS
            Select a.Codigo_Recaudador,b.Nom_Comercial Nombre_Recaudador,    a.Codigo_Servicio,    c.descripcion,    c.Cod_Moneda,
                   c.Cuenta_Contable, c.Cod_Persona    Codigo_Cliente,
                   a.Fecha_Movimiento Fecha,    a.Estado,    c.Forma_Pago,    c.Numero_Cuenta,a.Numero_Documento,c.cod_agencia,
                   Sum(a.Monto_Recibo) Monto, Sum(a.Monto_Comision) Comision
              From servicios_externos_pagos a,                      
                   servicios_externos c,   
                   personas_juridicas b
             Where a.Codigo_Empresa          = Variables.codEmpresa And                  
                   a.Estado                  = 'A'       And
                   a.adicionado_por          = 'BANCANET' And                   
                   c.Cod_Recaudador          = a.Codigo_Recaudador  And   
                   c.Cod_Servicio            = a.Codigo_Servicio  And 
                   c.forma_pago              = 'I' and  
                   c.Cod_Recaudador          = a.Codigo_Recaudador And
                   b.COD_PER_JURIDICA        = c.cod_persona
             Group By a.Codigo_Recaudador,b.Nom_Comercial,a.Codigo_Servicio,    c.descripcion,    c.Cod_Moneda,
                      c.Cuenta_Contable,    a.Fecha_Movimiento,    a.estado,    c.forma_pago,    c.Numero_Cuenta, c.Cod_persona,a.Numero_Documento,c.cod_agencia
             UNION 
            Select a.Codigo_Recaudador,b.Nom_Comercial Nombre_Recaudador,    '  ' Codigo_Servicio,'  ' descripcion,c.Cod_Moneda,
                   c.Cuenta_Contable, c.Cod_Persona    Codigo_Cliente,
                   a.Fecha_Movimiento Fecha,    a.Estado,    c.Forma_Pago,    c.Numero_Cuenta,'  ' Numero_documento,c.cod_agencia,
                   Sum(a.Monto_Recibo) Monto, Sum(a.Monto_Comision) Comision
              From servicios_externos_pagos a,                         
                   servicios_externos c,                     
                   personas_juridicas b
             Where a.Codigo_Empresa             = Variables.codEmpresa  And                  
                   a.Estado                     = 'A'       And
                   a.adicionado_por             = 'BANCANET' And                   
                   c.Cod_Recaudador             = a.Codigo_Recaudador  And   
                   c.Cod_Servicio               = a.Codigo_Servicio  And
                   c.forma_pago                      IN  ('K','S')  And  
                   c.Cod_Recaudador             = a.Codigo_Recaudador And
                   b.COD_PER_JURIDICA           =  c.cod_persona
             Group By a.Codigo_Recaudador,b.Nom_Comercial,c.Cod_Moneda,
                      c.Cuenta_Contable,    a.Fecha_Movimiento,    a.estado,    c.forma_pago,    c.Numero_Cuenta, c.Cod_persona,c.cod_agencia
             Order by 1;
    
        --
        Cursor Agencia_Cuenta (PNumero_Cuenta In Number) Is
            Select Cod_Agencia,    Cod_Producto, Cod_Cliente
              From Cuenta_Efectivo
             Where Cod_Empresa   =    Variables.codEmpresa And    
                   Num_Cuenta    =    PNumero_Cuenta;

        Cursor Paga_Ley (PCodigo_Cliente    In Varchar2) Is
            Select Nvl(Paga_Imp_Ley288,'S')
              From Personas
             Where Cod_Persona    = pCodigo_Cliente;

        Cursor Moneda_Origen Is
            Select Cod_Moneda_Origen
              From Empresa
             Where Cod_Empresa = Variables.CodEmpresa;        
                                     
        Cursor Producto (PSistema In Varchar2, PMoneda In Varchar2) Is
            Select Cod_Producto 
              From Productos
             Where Cod_Cat_Producto    = PSistema
               And Cod_Moneda          = PMoneda;                     
    Begin  
        --
        vUsuario := PA_INTERFAZ_CONSULTA.ObtieneParametroEmpresa('PA',Variables.codEmpresa,'USUARIO_BANCANET');  
        vHoraInicio := to_char(sysdate,'yyyymmddhh24miss'); 
        --  
        Open    Moneda_Origen;
        Fetch    Moneda_Origen Into    v_Moneda_Origen;
        Close    Moneda_Origen;
        --
        Open Producto(Variables.CodSistema,v_Moneda_Origen);
        Fetch Producto Into p_Sub_Aplicacion_Origen;
        Close    Producto;            
        --            
        v_Cod_Producto           :=    Null;
        v_Codigo_Cliente         :=    Null;    
        v_Agencia_Cuenta         :=    Null;
        p_Codigo_Sub_Aplicacion  :=    '100';
        p_Sub_Aplicacion_Origen  :=    '901';        
         v_Paga_Imp_Ley288       :=     'S';
        v_Codigo_Aplicacion      :=    'BCC';
        v_Aplicacion_Origen      :=    'BCC';
        --    
        
        For r In Recaudador(vUsuario) 
        Loop     
           
            Begin    
                vForma_Pago               :=  r.Forma_Pago;
                vDocumentoReferencia      :=  r.Numero_Documento;
                --
                If r.Numero_Cuenta Is Not Null Then
                    Open Agencia_Cuenta(r.Numero_Cuenta);
                    Fetch Agencia_Cuenta Into v_Agencia_Cuenta,v_Cod_Producto,v_Codigo_Cliente;
                    Close    Agencia_Cuenta;                                                
                End If;                            
                --
                If r.Forma_Pago = 'I' Then -- Individual    
                    Begin                             
                         -- Se realiza un credito por cada pago realizado.
                         If not Agregar_Movimiento(r.Numero_Cuenta,r.Monto, r.Numero_Documento) then
                            Raise Ex_Error;
                         End if;            
                    --    
                    Exception
                        when Ex_Error then
                            null;
                    End;
            
                Elsif  r.Forma_Pago = 'K' Then -- Cheques    

                    -- ESTO ES PARA CONTABILIZAR EL PUNTO 15 AL BANCO
                    Open Paga_Ley(Nvl(r.Codigo_Cliente,v_Codigo_Cliente));
                    Fetch Paga_Ley Into v_Paga_Imp_Ley288;
                    Close    Paga_Ley;    
                            
                    -- Buscando parametro para que que genere el cheque
                    Begin
                        Select Valor 
                            Into v_Valor
                            From Parametros_x_Empresa
                                Where Cod_Empresa = Variables.codEmpresa
                                  And Cod_Sistema = 'CJ'
                                  And Abrev_Parametro Like 'SUFIJO_COD_AGENCIA';    
                    Exception
                        When No_Data_Found 
                            Then
                                 Mensaje('No Se Encontr√≥ Parametro Sufijo Agencia'); 
                    End;
                    --
                    begin
                        Select fec_hoy
                         into vFechaBA
                         from calendarios
                        Where cod_empresa = variables.codempresa
                          and cod_sistema = 'BA'
                          and cod_agencia = variables.codagencia;
                    exception
                        when no_data_found then
                            vFechaBA := sysdate;
                    end;
                    --
                    p_Transaccion    := PA_INTERFAZ_CONSULTA.ObtieneParametroEmpresa('CC',Variables.codEmpresa, 'TIP_TRAN_PAGO_SRV'); 
      
                    if p_Transaccion is null then
                        Mensaje('No Se Encontr√≥ Parametro IP_TRAN_PAGO_SRV'); 
                    end if;    
                          
                    -- Se obtiene el parametro de subtipo de transaccion de pago de servicio
                    p_Sub_Transaccion   := PA_INTERFAZ_CONSULTA.ObtieneParametroEmpresa('CC',Variables.codEmpresa,'SUBTIP_TRAN_PAGO_SRV');
                      
                    if p_Sub_Transaccion is null then
                       Mensaje('No Se Encontr√≥ Parametro SUBTIP_TRAN_PAGO_SRV'); 
                    end if;    
                    --                        
                    v_Aplicacion_Origen    :=    'BBA';
                    p_Codigo_Sub_Aplicacion    :=    p_Sub_Aplicacion_Origen;                                                                                    
                    --                    
                    Solicitud_Cheque(to_number(Variables.CodEmpresa),
                                     to_number(r.Cod_Agencia),    
                                     to_number(p_Transaccion),
                                     to_number(r.Cod_Moneda),
                                     to_number(p_Sub_Transaccion),--v_Subtran_chk                        , 
                                     v_Aplicacion_Origen            ,    
                                     To_Number(p_Sub_Aplicacion_Origen),
                                     r.Cuenta_Contable                ,
                                     to_number(Nvl(Nvl(r.Codigo_Cliente,v_Codigo_Cliente),r.Codigo_Recaudador)),
                                     trunc(r.Fecha)                    ,
                                     vFechaBA                                ,
                                     r.Fecha                                    , 
                                     r.Monto                                    ,
                                     r.Estado                                ,
                                     'LIQUIDACION PAGO DE SERVICIOS',
                                     Null                                        ,
                                     Null                                        ,
                                     Null                                        ,
                                     r.Nombre_Recaudador            ,
                                     Null                                        , 
                                     P_DOCUMENTO                            ,
                                     P_NUMERO_ASIENTO                ,
                                     P_TC1                                        ,
                                     P_TC2                                        ,
                                     v_Paga_Imp_Ley288);
                                                
                Elsif r.Forma_Pago = 'S' then  --Sumarizado
                    
                    Begin                             
                         -- Se realiza un credito por cada pago realizado.
                         If not Agregar_Movimiento(r.Numero_Cuenta,r.Monto,    r.Numero_Documento) then
                            Raise Ex_Error;
                         End if;            
                    --    
                    Exception
                        when Ex_Error then
                            null;
                    End; 
                                   
                End If;            
                    --            
            EXCEPTION
            When others then
                message(sqlerrm||' Para el Recaudador '||r.Codigo_Recaudador);message('');
                null;
            End;
            --
            vCantRegs := vCantRegs +1;
        
        End Loop;    
                 
        --Actualizando los registros para cambiar su estado
        if vCantRegs > 0 then   
         
              Begin    
                Update servicios_externos_pagos -- Se agrega update a numero_documento para salvar la referencia
                   Set Estado = 'X'                
                 Where Codigo_Empresa                                              = Variables.CodEmpresa And               
                       Estado                                                      = 'A'  And                                              
                       to_number(to_char(Fecha_Adicion,'yyyymmddhh24miss'))       <= to_number(vHoraInicio) And 
                       Adicionado_por                                           like 'BANCANET';
              Exception
                     When others then
                         Message('Error actualizando la tabla SERVICIOS_EXTERNOS_PAGOS');message(' ');
                         message(sqlerrm);
              End;
                --
              If vForma_Pago = 'K' Then 
                  ANULA_REFERIDO;   
              End If;
              -- 
              If Form_Success Then
                  Commit;
              End If;  
              
              MESSAGE('PROCESO FINALIZADO CON EXITO. ---> Pagos Procesados: ' || vCantRegs);
              message(' ');
        else

          MESSAGE('NO EXISTEN PAGOS PARA PROCESAR.');
          message(' ');
 
        end if;
            
    EXCEPTION
        When others then
            message(sqlerrm);
            message('');
    End Principal;
    
    PROCEDURE Cambia_Calendario_Agencias(pCodEmpresa  varchar2,
                                         pCodSistema  VARCHAR2,
                                         pCodAgencia  varchar2,
                                         pfec_hoy     date,
                                         pTipo_cierre varchar2,
                                         pUsuario     varchar2,
                                         pMensaje     in out varchar2) IS

        /* OBJETIVO 
               El objetivo de este procedimiento es actualizar el calendario
               del sistema respectivo para mostrar el cambio de fecha en la 
               base de datos.

               Si el cierre del modulo es centralizado
               entonces se mueve el calendario de cada una de las agencias de lo
               contrario solo se cambia el calendario de la agencia que viene como
               parametro

            REQUIERE
               La existencia de la tabla calendarios y que haya una tupla
               que corresponda a los parametros que se pasan en
                v_CodSistema,v_CodEmpresa,v_CodAgencia
        */
        --
        cursor agencias is
          select cod_agencia
            from sistemas_x_agencia
             where cod_empresa      = pCodEmpresa
               and cod_sistema      = pCodSistema
               and esta_activo      = 'S'
               and instalado        = 'S'
               and calend_integrado = 'S';
        --
        v_Nueva_Fec_Hoy         date;
        v_nom_dia               varchar2(9);
        v_fec_anterior          date;
        v_prox_fecha            date;
        v_primer_dia_mes        date;
        v_primer_habil_mes      date;
        v_ultimo_dia_mes        date;
        v_ultimo_habil_mes      date;
        v_fec_sistema           date;
        tit_sistema             varchar2(80);
        nueva_fecha             date;
        v_cierre_central        varchar2(1);
        --
    BEGIN
        --
        begin
          select cierre_central
            into v_cierre_central
            from sistemas
            where cod_sistema = pCodSistema;
          exception when no_data_found then
             UTILITARIOS.Obt_Mensaje_Error('000099', pCodSistema,  pMensaje, 'Cambia_Calendario_Agencias '||SQLCODE);
            return;        
        end;
        --
        if v_cierre_central = 'N' then
          --
          v_Nueva_Fec_Hoy     := CALENDAR.Obtener_Sig_Fec_Habil(pCodEmpresa,
                                                                pCodAgencia,
                                                                pFec_Hoy);
          --
          v_Prox_fecha        := CALENDAR.Obtener_Sig_Fec_Habil(pCodEmpresa,
                                                                pCodAgencia,
                                                                v_Nueva_Fec_Hoy);
          --
          v_fec_anterior      := pFec_Hoy;
          --
          v_primer_dia_mes    := to_date('01-'||to_char(v_Nueva_Fec_Hoy,'MM-YYYY'),'DD-MM-YYYY');
          --
          v_ultimo_dia_mes    := add_months(v_primer_dia_mes,1) - 1;
          --
          v_ultimo_habil_mes  := CALENDAR.Obtener_Ultimo_Habil_Mes(pCodEmpresa,
                                                                   pCodAgencia,
                                                                   v_primer_dia_mes);
          --
          v_primer_habil_mes  := CALENDAR.Obtener_Primer_Habil_Mes(pCodEmpresa,
                                                                   pCodAgencia,
                                                                   V_Nueva_Fec_Hoy);
          --
          v_nom_dia := Dia_de_la_Semana(v_Nueva_Fec_Hoy);
          --
          
            update pa.calendarios
               set fec_hoy           = v_Nueva_Fec_Hoy,
                   nom_dia           = v_nom_dia ,
                   fec_anterior      = v_fec_anterior ,
                   prox_fecha        = v_prox_fecha ,
                   primer_dia_mes    = v_primer_dia_mes ,
                   primer_habil_mes  = v_primer_habil_mes ,
                   ultimo_dia_mes    = v_ultimo_dia_mes ,
                   ultimo_habil_mes  = v_ultimo_habil_mes ,
                   modificado_por     = pUsuario ,
                   fec_modificacion = sysdate 
             where cod_empresa = pCodEmpresa
               and cod_agencia = pCodAgencia 
               and cod_sistema = pCodSistema;
            --
            
        else
        
          for i in agencias loop
              v_Nueva_Fec_Hoy     := CALENDAR.Obtener_Sig_Fec_Habil(pCodEmpresa,
                                                                    i.Cod_Agencia,
                                                                    pFec_Hoy);
              --
              v_Prox_fecha        := CALENDAR.Obtener_Sig_Fec_Habil(pCodEmpresa,
                                                                    i.Cod_Agencia,
                                                                    v_Nueva_Fec_Hoy);
              --
              v_fec_anterior      := pFec_Hoy;
              --
              v_primer_dia_mes    := to_date('01-'||to_char(v_Nueva_Fec_Hoy,'MM-YYYY'),'DD-MM-YYYY');
              --
              v_ultimo_dia_mes    := add_months(v_primer_dia_mes,1) - 1;
              --
              v_ultimo_habil_mes  := CALENDAR.Obtener_Ultimo_Habil_Mes(pCodEmpresa,
                                                                       i.Cod_Agencia,
                                                                       v_primer_dia_mes);
              --
              v_primer_habil_mes  := CALENDAR.Obtener_Primer_Habil_Mes(pCodEmpresa,
                                                                       i.Cod_Agencia,
                                                                       V_Nueva_Fec_Hoy);
              --
              v_nom_dia := Dia_de_la_Semana(v_Nueva_Fec_Hoy);
              --
              
                update pa.calendarios
                   set fec_hoy           = v_Nueva_Fec_Hoy,
                       nom_dia           = v_nom_dia ,
                       fec_anterior      = v_fec_anterior ,
                       prox_fecha        = v_prox_fecha ,
                       primer_dia_mes    = v_primer_dia_mes ,
                       primer_habil_mes  = v_primer_habil_mes ,
                       ultimo_dia_mes    = v_ultimo_dia_mes ,
                       ultimo_habil_mes  = v_ultimo_habil_mes ,
                       modificado_por    = pUsuario ,
                       fec_modificacion  = sysdate 
                 where cod_empresa = pCodEmpresa and
                       cod_agencia = i.Cod_Agencia and
                       cod_sistema = pCodSistema;

          end loop;
          
        end if;
        
    Exception
       When No_Data_Found then
           -- Error, el sistema  @ no tiene asociado un calendario.
            --
             UTILITARIOS.Obt_Mensaje_Error('000211',pCodSistema, pMensaje, pCodSistema);
            return;
       When Others then
           -- Error del sistema:
            --
            message('CAMBIA_CALENDARIO_AGENCIAS ERROR '||SQLERRM); MESSAGE(' ');
             UTILITARIOS.Obt_Mensaje_Error('000099', pCodSistema,  pMensaje, 'Cambia_Calendario_Agencias '||sqlcode);
            return;
    END Cambia_Calendario_Agencias;
   
   /* -------------------------------------------------------------------- */
   /* DESCRIPCION: LIQUIDACION_PAGOS_SERVICIOS                             */
   /* -------------------------------------------------------------------- */
   PROCEDURE LIQUIDACION_PAGOS_SERVICIOS IS
   
       Cursor pendientes is 
          Select a.codigo_cajero, c.nombre nom_caj,
                 count(a.codigo_cajero) total
            From BCJ_MOVIMIENTO_DIARIO_ENCA a,
                 BCJ_CAJEROS b,
                 PA.USUARIOS_DEL_SISTEMA_B2000 c
           Where a.codigo_empresa    = variables.codempresa
             and a.codigo_agencia    = variables.codagencia  
             and a.fecha_movimiento  = variables.fec_hoy         -- Para que valide Sucursal a 3 digitos
             and a.codigo_estado_movimiento <> 'N'                 -- y asi contemple las Agencias 
             and b.tipo_cajero <> 'A'                    
             and a.CODIGO_CAJERO = B.CODIGO_CAJERO
             and b.CODIGO_USUARIO = C.CODIGO_USUARIO
           Group by a.codigo_cajero, c.nombre;
              
    vProcName       VARCHAR2(80):= 'LIQUIDACION_PAGOS_SERVICIOS';
    DUMMY           Varchar2(1);  
    ref_nula        exception;
    
     --ecaceres 5/2/2020
     l_rindex_g   PLS_INTEGER := DBMS_APPLICATION_INFO.set_session_longops_nohint;
     l_slno_g     PLS_INTEGER;
     pTarget PLS_INTEGER;

   BEGIN
    
        Job.Ejecuta := 'JOB_LIQ_PAGOS_SERVICIOS';
        IniVarGlobalesLocales('PALIQPGS');
        BInicio (vProcName);
      
        --ecaceres 5/2/2020 Seguimiento de Proceso
         DBMS_APPLICATION_INFO.set_session_longops (
         rindex        => l_rindex_g,
         slno          => l_slno_g,
         op_name       => Job.Ejecuta,
         target        => pTarget,
         context       => 0,
         sofar         => 1,
         totalwork     => 3,
         target_desc   => 'Procesando  ...',
         units         => 'rows');
         
        --BITACORA_CIERRES
        BITACORA_CIERRES_INICIO (variables.FEC_HOY);
    
        DUMMY := null;
             
        FOR PEN IN PENDIENTES LOOP
        
            if pen.total > 0 then
                DUMMY := 'X';
                MESSAGE('Atencion: Transacciones pendientes del cajero: '||pen.codigo_cajero||pen.nom_caj);
                BITACORA_CIERRES_ERROR(VARIABLES.FEC_HOY);
                UTILITARIOS.MENSAJE ('000352', variables.codidioma, 'CJ', NULL, pen.codigo_cajero||pen.nom_caj);
            end if;
          
        END LOOP;
         
        --BITACORA_CIERRES
        DECLARE
            vFecha VARCHAR2(10);
        BEGIN    
        
            BEGIN    
             
             select TO_CHAR(FEC_HOY, 'DD/MM/YYYY')
               into   vFecha
               from   pa.CALENDARIOS
              where  ( COD_EMPRESA = VARIABLES.CodEmpresa )
                and  ( COD_AGENCIA = VARIABLES.CodAgencia )
                and  ( COD_SISTEMA = 'CC' );
             
            EXCEPTION
                WHEN OTHERS THEN 
                    NULL;
            END;
            
            BEGIN
                UPDATE PARAM_GENERALES
                   SET VALOR = vFecha
                 WHERE ABREV_PARAMETRO = 'FEC_BITACORA_CIERRE'
                   AND COD_SISTEMA = 'PA';
                
                STANDARD.COMMIT;
            
            EXCEPTION
                WHEN OTHERS THEN 
                    NULL;
            END;
        END;
        
        --ecaceres 5/2/2020 Seguimiento de Proceso
         DBMS_APPLICATION_INFO.set_session_longops (
         rindex        => l_rindex_g,
         slno          => l_slno_g,
         op_name       => Job.Ejecuta,
         target        => pTarget,
         context       => 0,
         sofar         => 2,
         totalwork     => 3,
         target_desc   => 'Procesando  ...',
         units         => 'rows');
         
        ----------------------------------
        If DUMMY is null then                     
            LiquidaPagoServicio;
        End if;
        
        --ecaceres 5/2/2020 Seguimiento de Proceso
         DBMS_APPLICATION_INFO.set_session_longops (
         rindex        => l_rindex_g,
         slno          => l_slno_g,
         op_name       => Job.Ejecuta,
         target        => pTarget,
         context       => 0,
         sofar         => 3,
         totalwork     => 3,
         target_desc   => 'Procesando  ...',
         units         => 'rows');
         
         
        --BITACORA_CIERRES
        BITACORA_CIERRES_FIN (variables.FEC_HOY);      
        BFinal (vProcName);
           
   EXCEPTION
      when NO_DATA_FOUND then
          DUMMY := NULL;
          PRINCIPAL;
      when ref_nula then
          UTILITARIOS.MENSAJE ('000540', variables.codidioma, 'CJ', NULL, 'C√≥digo Referencia');
          raise form_trigger_failure;
      when OTHERS then
          message('Error: '||sqlerrm); message(' ');
          BITACORA_CIERRES_ERROR(VARIABLES.FEC_HOY);
          UTILITARIOS.MENSAJE ('000275', variables.codidioma, 'CJ', NULL, TO_CHAR(SQLCODE));
          Rollback;
          exit_form(no_commit);
        
   END LIQUIDACION_PAGOS_SERVICIOS;
   
   /* -------------------------------------------------------------------- */
   /* DESCRIPCION: CIERRE DIARIO DE CLIENTES                               */
   /* -------------------------------------------------------------------- */
   PROCEDURE CIERRE_DIARIO_CL IS

       -- Declaracion de Variables de Trabajo.
       vNivel          Number(3);
       vMsjError       Varchar2(300) := Null;
       vSqlError       Varchar2(300) := Null; 
       vProcName       VARCHAR2(80)  := 'CIERRE_DIARIO_CL';
       
     --ecaceres 5/2/2020
     l_rindex_g   PLS_INTEGER := DBMS_APPLICATION_INFO.set_session_longops_nohint;
     l_slno_g     PLS_INTEGER;
     pTarget PLS_INTEGER;


   BEGIN
    
       Job.Ejecuta := 'JOB_CIERRE_DIARIO_CL';
       IniVarGlobalesLocales('CLCIEDIA');
       BInicio (vProcName);
      
         --ecaceres 5/2/2020 Seguimiento de Proceso
         DBMS_APPLICATION_INFO.set_session_longops (
         rindex        => l_rindex_g,
         slno          => l_slno_g,
         op_name       => Job.Ejecuta,
         target        => pTarget,
         context       => 0,
         sofar         => 1,
         totalwork     => 4,
         target_desc   => 'Procesando  ...',
         units         => 'rows');
         
       --BITACORA_CIERRES
       BITACORA_CIERRES_INICIO (variables.FEC_HOY);

       -- Anula Los Movimientos Incompletos de CL_MOVIMIENTO. 
       Anula_Movimientos(variables.codEmpresa,
                         variables.codSistema,
                         variables.Fec_hoy,
                         vMsjError);
       
       if vMsjError is not null then

          --BITACORA_CIERRES
          MESSAGE(vMsjError);
          BITACORA_CIERRES_ERROR(variables.Fec_hoy);
          Mensaje(vMsjError);
          
       end if;
       
                --ecaceres 5/2/2020 Seguimiento de Proceso
         DBMS_APPLICATION_INFO.set_session_longops (
         rindex        => l_rindex_g,
         slno          => l_slno_g,
         op_name       => Job.Ejecuta,
         target        => pTarget,
         context       => 0,
         sofar         => 2,
         totalwork     => 4,
         target_desc   => 'Procesando  ...',
         units         => 'rows');
         
       -- Se efect√∫a la liquidacion de los intereses.
       if not cl_liquidacion_intereses.DevengaInteresesCuenta(variables.codEmpresa,
                                                              variables.codAgencia,
                                                              null,
                                                              null,
                                                              null,
                                                              null,
                                                              variables.Fec_hoy,
                                                              variables.Fec_hoy,
                                                              user,
                                                              vMsjError,
                                                              vSqlError) then

            --BITACORA_CIERRES
            Mensaje(vSQLError||'-'||vMsjError);
            BITACORA_CIERRES_ERROR(Variables.Fec_hoy);
            Rollback;
            exit_form(no_commit,full_rollback);
            
       end if;

         --ecaceres 5/2/2020 Seguimiento de Proceso
         DBMS_APPLICATION_INFO.set_session_longops (
         rindex        => l_rindex_g,
         slno          => l_slno_g,
         op_name       => Job.Ejecuta,
         target        => pTarget,
         context       => 0,
         sofar         => 3,
         totalwork     => 4,
         target_desc   => 'Procesando  ...',
         units         => 'rows');
         
        -- Cambia el Calendario de la Agencia.
       Cambia_Calendario_Agencias(variables.codEmpresa, -- Codigo de la Empresa.
                                  variables.codSistema, -- Codigo del Sistema.
                                  variables.codAgencia, -- Codigo de la Agencia.
                                  variables.Fec_hoy,    -- Fecha del Fecha.
                                  'D'                 , -- Tipo de Cierre.
                                  variables.Usuario   , -- Usuario.
                                  vMsjError);           -- Mensaje de Error.
                                  
       if vMsjError is not null then
          --BITACORA_CIERRES
          Mensaje(vMsjError);
          BITACORA_CIERRES_ERROR(variables.Fec_hoy);
       end if;
                                     
       -- Determina Si No Ocurieron Errores y Graba la Operacion.       
       if Not form_success then

          Rollback;
          Mensaje('Ocurieron Errores Procesando el Cierre Diario.');
          BITACORA_CIERRES_ERROR(variables.Fec_hoy);
          Raise Form_Trigger_Failure;
       else

          Commit;
          Mensaje('Proceso de Cierre Realizado Satisfectoriamente.');
       end if;
       
                --ecaceres 5/2/2020 Seguimiento de Proceso
         DBMS_APPLICATION_INFO.set_session_longops (
         rindex        => l_rindex_g,
         slno          => l_slno_g,
         op_name       => Job.Ejecuta,
         target        => pTarget,
         context       => 0,
         sofar         => 4,
         totalwork     => 4,
         target_desc   => 'Procesando  ...',
         units         => 'rows');
         
       --BITACORA_CIERRES
       BITACORA_CIERRES_FIN(variables.fec_hoy);
       BFinal (vProcName);
       
   EXCEPTION
     WHEN OTHERS THEN 
        MESSAGE('ERROR: '||SQLCODE||'-'||SQLERRM);
        BITACORA_CIERRES_ERROR(VARIABLES.FEC_HOY);       
       
   END CIERRE_DIARIO_CL;
   
    --EAM||SolcitudMejoraCierre||30/01/2020   
    PROCEDURE PROCESO_CIERRE_MONO_USUARIO IS
       vMonoUsuario varchar(1);
        vRolCierres     varchar(6);
        -- HJORGE 08/03/2007 --
        vFechaMov       varchar2(11):= to_date(Param.Parametro_X_Empresa(1,'FECHA_NEDIC','CC')  ,'dd/mm/yyyy'); --<<rareyes se llena la variable>>
        vMsg                  long(32767) :=null;
        vNum                 number:=0;
        vTit                      varchar2(30);
        vDet                    varchar(300);
        al_id                   ALERT;      --JJIMENEZ 2015-000033
        al_button           Number;  --JJIMENEZ 2015-000033   
        v_calendario     number := 0;  --<<rareyes 11/05/2017 variable de validar calendario>>
        cuenta                number :=0; --<<rareyes 11/05/2017 variable contador>>
        vProcName       varchar2(80) := 'PROCESO_CIERRE_MONO_USUARIO';
        --MostrarAlerta('Error al insertar la solicitud de aprobaci√≥n para el cliente ' || :RESTR_CLIE.COD_PERSONA);

        Cursor Fecha is
        select cl.cod_sistema
              --,cl.cod_agencia
              ,cl.FEC_HOY
          from cierres c,calendarios cl 
         where cl.cod_empresa = variables.CodEmpresa
           and cl.cod_empresa = c.cod_empresa
           and c.cod_sistema = cl.cod_sistema
           and c.cod_agencia = cl.cod_agencia
           and c.en_proceso  ='N' 
           --<<rareyes 11/05/2017 filtra los carlendarios no actualizados>> 
           and cl.FEC_HOY != to_date(Param.Parametro_X_Empresa(variables.CodEmpresa,'FECHA_NEDIC','CC')  ,'dd/mm/yyyy')
           group by cl.cod_sistema, cl.FEC_HOY          
          order by 1;
              
            --<<rareyes 11/05/2017 filtra los carlendarios no actualizados>> 
         cursor agencia(P_agencia varchar2, P_FEC_HOY date)  is
             select cl.cod_agencia
               from cierres c,calendarios cl 
              where cl.cod_empresa = variables.CodEmpresa
                and cl.cod_empresa = c.cod_empresa
                and c.cod_sistema = cl.cod_sistema
                and c.cod_agencia = cl.cod_agencia
                and c.en_proceso  ='N'           
                and cl.cod_sistema = P_agencia  
                and cl.FEC_HOY = P_FEC_HOY      
           order by 1;
           
        Begin
          Job.Ejecuta := 'JOB_PROCESO_CIERRE_MONO_USUARIO';
          IniVarGlobalesLocales('CIERRES');
          BInicio (vProcName);     
              --<<rareyes 11/05/2017 verifica cierre completado>>
         select count(1) 
             into v_calendario
          from cierres c,calendarios cl 
         where cl.cod_empresa = variables.CodEmpresa
           and cl.cod_empresa = c.cod_empresa
           and c.cod_sistema = cl.cod_sistema
           and c.cod_agencia = cl.cod_agencia
           and c.en_proceso  ='N'   
           and cl.FEC_HOY != to_date(Param.Parametro_X_Empresa(1,'FECHA_NEDIC','CC')  ,'dd/mm/yyyy');
           
             -- HJORGE 08/03/2007 -- 
           -- vFechaMov := Parametros.Parametro_X_Empresa(:variables.CodEmpresa,'FECHA_NEDIC','CC'); -- Parametro de Fecha Mov     --<<rareyes 11/05/2017>>
          if v_calendario != 0 then --<<rareyes 11/05/2017 valida que tenga registro>> 
            for Fec in Fecha loop 
                     vMsg := vMsg||'Sistema: '||rpad(fec.cod_sistema,20,' ')||'Fecha: '||rpad(fec.FEC_HOY,17,' ')||chr(13);
                   vMsg := vMsg||'Agencias: ';
                   
                   for agen in agencia(fec.cod_sistema, fec.FEC_HOY) loop 
                       -- if Fec.Fec_Hoy != to_date(vFechaMov,'dd/mm/yyyy') then --<<rareyes 11/05/2017>>
                       vNum := vNum +1;
                       
                          if cuenta = 15 then       
                             vMsg := vMsg||', '||agen.cod_agencia||chr(13);
                             cuenta := 0;
                          end if;
           
                          vMsg := vMsg||', '||agen.cod_agencia;
                          cuenta := cuenta + 1;
                          
                    end loop;
                       -- send correo
                   -- vMsg := vMsg||rpad(fec.cod_sistema,20,' ')||rpad(fec.cod_agencia,17,' ')||rpad(to_char(fec.fec_hoy,'dd/mm/yyyy'),25,' ')||chr(13);                   
                --end if;-- fecha     --<<rareyes 11/05/2017>>  
            end loop;
          end if; --<<rareyes>>
          
           -- FIN HJORGE
            -- Buscar Parametro de Usuarios permitidos a Operar Durante Cierre
           -- vRolCierres := PARAMETROS.PARAMETRO_GENERAL ('ROL_USUARIO_CIERRE', 'PA'); EAM||SolicitudMejoraCierre||30/01/2020
           vRolCierres := PARAM.PARAMETRO_GENERAL ('ROL_USUARIO_CIERRE', 'PA'); -- EAM||SolicitudMejoraCierre||30/01/2020
            -- Verificar el Estado del Sistema
            --select monousuario into vMonoUsuario
            --  from control_sistemas;
              --al_id := FIND_ALERT('CONFIRMACION');
              
          --If vMonoUsuario = 'N' then
            -- Eliminar permisos por Roles a usuarios         
            --<JJIMENEZ 2015-M00112>
            --SET_ALERT_PROPERTY(al_id, alert_message_text, 'Esta seguro que desea cambiar a estado Monousuario?');
            --if show_alert('CONFIRMACION') = ALERT_BUTTON1 then
                --</JJIMENEZ 2015-M00112>
                BITACORA_CIERRES_INICIO(sysdate); --<<rareyes inicio proceso a monousuario>>
                insert into usuarios_x_roles_tmp (select * 
                                                                                 from usuarios_x_roles
                                                                               where cod_usuario not in (select cod_usuario 
                                                                                                                                   from usuarios_x_roles 
                                                                                                                                where cod_rol = vRolCierres));
                            
                delete from usuarios_x_roles
                 where cod_usuario not in (select cod_usuario 
                                                                     from usuarios_x_roles 
                                                                  where cod_rol = vRolCierres);
                                                                                  
                -- Marcar table control_sistema con modo del sistema monousuario    
                update control_sistemas
                  set monousuario = 'S';    
                  BITACORA_CIERRES_FIN(sysdate);  --<<rareyes fin proceso  de monousuario>>
                  BFinal (vProcName);              
                  --set_item_property('ETIQUETAS.SEMAFORO', ICON_NAME, 'PERSON');     
                  --:etiquetas.ESTADO := 'Monousuario';
                  --  haga_commit; -- EAM||SolicitudMejoraCierre||30/01/2020
                   commit;
                --go_block('control');
             --end if;     
          --end if;
        --End;   
        EXCEPTION
        WHEN OTHERS THEN
                Message('Se produjo un error en el proceso: '||Sqlerrm); 
                Message('  ');
                BITACORA_CIERRES_ERROR(variables.fecha);
                 Raise form_trigger_failure;                    
    END PROCESO_CIERRE_MONO_USUARIO; --EAM||SolcitudMejoraCierre||30/01/2020  
    --EAM||SolcitudMejoraCierre||30/01/2020
    PROCEDURE PROCESO_CIERRE_MULTI_USUARIO IS
       vMonoUsuario varchar(1);
        vRolCierres     varchar(6);
        -- HJORGE 08/03/2007 --
        vFechaMov       varchar2(11):= to_date(Param.Parametro_X_Empresa(1,'FECHA_NEDIC','CC')  ,'dd/mm/yyyy'); --<<rareyes se llena la variable>>
        vMsg                  long(32767) :=null;
        vNum                 number:=0;
        vTit                      varchar2(30);
        vDet                    varchar(300);
        al_id                   ALERT;      --JJIMENEZ 2015-000033
        al_button           Number;  --JJIMENEZ 2015-000033   
        v_calendario     number := 0;  --<<rareyes 11/05/2017 variable de validar calendario>>
        cuenta                number :=0; --<<rareyes 11/05/2017 variable contador>>
        vProcName       varchar2(80) := 'PROCESO_CIERRE_MULTI_USUARIO';
        --MostrarAlerta('Error al insertar la solicitud de aprobaci√≥n para el cliente ' || :RESTR_CLIE.COD_PERSONA);

        Cursor Fecha is
        select cl.cod_sistema
              --,cl.cod_agencia
              ,cl.FEC_HOY
          from cierres c,calendarios cl 
         where cl.cod_empresa = variables.CodEmpresa
           and cl.cod_empresa = c.cod_empresa
           and c.cod_sistema = cl.cod_sistema
           and c.cod_agencia = cl.cod_agencia
           and c.en_proceso  ='N' 
           --<<rareyes 11/05/2017 filtra los carlendarios no actualizados>> 
           and cl.FEC_HOY != to_date(Param.Parametro_X_Empresa(variables.CodEmpresa,'FECHA_NEDIC','CC')  ,'dd/mm/yyyy')
           and cl.cod_sistema <> 'PA'--Se coloca la condicion  --ACollado09/09/2020
           group by cl.cod_sistema, cl.FEC_HOY          
          order by 1;
              
            --<<rareyes 11/05/2017 filtra los carlendarios no actualizados>> 
         cursor agencia(P_agencia varchar2, P_FEC_HOY date)  is
             select cl.cod_agencia
               from cierres c,calendarios cl 
              where cl.cod_empresa = variables.CodEmpresa
                and cl.cod_empresa = c.cod_empresa
                and c.cod_sistema = cl.cod_sistema
                and c.cod_agencia = cl.cod_agencia
                and c.en_proceso  ='N'           
                and cl.cod_sistema = P_agencia  
                and cl.FEC_HOY = P_FEC_HOY      
           order by 1;
           
        Begin
          Job.Ejecuta := 'JOB_MULTI_USUARIO';--'JOB_PROCESO_CIERRE_MULTI_USUARIO';-- --ACollado09/09/2020 Coloco el nombre de Job correcto
          IniVarGlobalesLocales('CIERRES');
          BInicio (vProcName);     
              --<<rareyes 11/05/2017 verifica cierre completado>>
         select count(1) 
             into v_calendario
          from cierres c,calendarios cl 
         where cl.cod_empresa = variables.CodEmpresa
           and cl.cod_empresa = c.cod_empresa
           and c.cod_sistema = cl.cod_sistema
           and c.cod_agencia = cl.cod_agencia
           and c.en_proceso  ='N'   
           and cl.cod_sistema <> 'PA'--Se coloca la condicion --ACollado09/09/2020
           and cl.FEC_HOY != to_date(Param.Parametro_X_Empresa(1,'FECHA_NEDIC','CC')  ,'dd/mm/yyyy');
           
             -- HJORGE 08/03/2007 -- 
           -- vFechaMov := Parametros.Parametro_X_Empresa(:variables.CodEmpresa,'FECHA_NEDIC','CC'); -- Parametro de Fecha Mov     --<<rareyes 11/05/2017>>
          if v_calendario != 0 then --<<rareyes 11/05/2017 valida que tenga registro>> 
            for Fec in Fecha loop 
                     vMsg := vMsg||'Sistema: '||rpad(fec.cod_sistema,20,' ')||'Fecha: '||rpad(fec.FEC_HOY,17,' ')||chr(13);
                   vMsg := vMsg||'Agencias: ';
                   
                   for agen in agencia(fec.cod_sistema, fec.FEC_HOY) loop 
                       -- if Fec.Fec_Hoy != to_date(vFechaMov,'dd/mm/yyyy') then --<<rareyes 11/05/2017>>
                       vNum := vNum +1;
                       
                          if cuenta = 15 then       
                             vMsg := vMsg||', '||agen.cod_agencia||chr(13);
                             cuenta := 0;
                          end if;
           
                          vMsg := vMsg||', '||agen.cod_agencia;
                          cuenta := cuenta + 1;
                          
                    end loop;
                       -- send correo
                   -- vMsg := vMsg||rpad(fec.cod_sistema,20,' ')||rpad(fec.cod_agencia,17,' ')||rpad(to_char(fec.fec_hoy,'dd/mm/yyyy'),25,' ')||chr(13);                   
                --end if;-- fecha     --<<rareyes 11/05/2017>>  
            end loop;
          end if; --<<rareyes>>
          
           -- FIN HJORGE
            -- Buscar Parametro de Usuarios permitidos a Operar Durante Cierre
           -- vRolCierres := PARAMETROS.PARAMETRO_GENERAL ('ROL_USUARIO_CIERRE', 'PA'); EAM||SolicitudMejoraCierre||30/01/2020
           vRolCierres := PARAM.PARAMETRO_GENERAL ('ROL_USUARIO_CIERRE', 'PA'); -- EAM||SolicitudMejoraCierre||30/01/2020
          --SET_ALERT_PROPERTY(al_id, alert_message_text, 'Esta seguro que desea cambiar a estado Multiusuario?');
            --</JJIMENEZ 2015-M00112>
           -- if show_alert('CONFIRMACION') = ALERT_BUTTON1 then
            -- HJORGE 08/03/2007 -- Cambio a Multi-Usuario
                begin
                    if vMsg is not null then -- Armando el Mensaje
                        --BITACORA_CIERRES.ERROR(sysdate); --<<rareyes error proceso de monousuario>> EAM||SolicitudMejoraCierre||30/01/2020
                        utilitarios.obt_mensaje_error ('000686','PA',Job.SqlErrorApp);--ACollado09/09/2020 Agrego la descripcion del error
                        BITACORA_CIERRES_ERROR(sysdate); --EAM||SolicitudMejoraCierre||30/01/2020
                        -- Subject
                        vTit:= 'Cambio a Modo Multi-Usuario'; 
                        -- Detalle
                        vDet:= 'Durante el proceso de Cambio a Modo Multiusuario se Detectaron '||vNum||' Agencia(s) cuya Fecha del Dia No Corresponde con la Fecha de Calendario: '||vFechaMov||', listados a Continuacion :'||chr(13);
                       -- ||chr(13)||rpad('Sistema',20,' ')||rpad('Agencia',17,' ')||rpad('Fecha',25,' ')||chr(13); --<<rareyes 12/05/2017>>
                        -- Enviando Correo
                        pa.send_mail(variables.ip_correo,'SistemaB2000',variables.grupo_correo,vTit,vDet||vMsg);
                        Message('No es Posible Habilitar la Modalidad Multiusuario, Favor Comunicarse con el Administrador del Sistema.');
                        Message(' ');
                        vNum :=0;
                        vMsg := null;             
                        -- ATENCION, Ha Sido Enviado Correo de Agencias con Fecha de Calendario Invalidas
                        --bell;
                        UTILITARIOS.mensaje('000686',variables.CodIdioma,'PA');
                        -- Salir        
                        exit_form(no_validate);
                    Else--ACollado25/08/2020Agrego el Else para que se realice si todas las agencias tienen la nueva fecha
                        BITACORA_CIERRES_FIN(sysdate); 
                        insert into usuarios_x_roles
                        select * from usuarios_x_roles_tmp;
                              
                        delete from usuarios_x_roles_tmp;
        
                        update control_sistemas
                        set monousuario = 'N';    
                         commit;
                        --ACollado25/08/2020
                    end if;    
                EXCEPTION
                    WHEN OTHERS THEN
                    -- Error enviando Correo de Agencias con la Fecha de Calendario Incorrectas
                        UTILITARIOS.mensaje('000687',variables.CodIdioma,'PA');
                        -- Salir
                        --exit_form(no_validate); EAM||SolicitudMejoraCierre||30/01/2020 
                       -- return;
                end;   
                -- FIN HJORGE 
                -- Liberar permisos para usuarios en el sistema
                -- BITACORA_CIERRES.FIN(sysdate); --<<rareyes fin proceso  de monousuario>> EAM||SolcitudMejoraCierre||30/01/2020
                /*Estas instrucciones fueron comentadas para ponerse en el ELSE mas  arriba ACollado25/08/2020
                BITACORA_CIERRES_FIN(sysdate); --EAM||SolcitudMejoraCierre||30/01/2020 
                insert into usuarios_x_roles
                select * from usuarios_x_roles_tmp;
                      
                delete from usuarios_x_roles_tmp;
        
                -- Marcar table control_sistema con modo del sistema multiusuario         
                update control_sistemas
                set monousuario = 'N';    
                -- set_item_property('ETIQUETAS.SEMAFORO', ICON_NAME, 'PEOPLE');     
                --:etiquetas.ESTADO:='Multiusuario';
                --haga_commit; EAM||SolcitudMejoraCierre||30/01/2020
                 commit; */
                    --go_block('control');
            --end if;
      EXCEPTION
                    WHEN OTHERS THEN
                    -- Error enviando Correo de Agencias con la Fecha de Calendario Incorrectas
                        UTILITARIOS.mensaje('000687',variables.CodIdioma,'PA');
                        -- Salir
                        exit_form(no_validate);            
                        Message('Se produjo un error en el proceso: '||Sqlerrm); 
                        Message('  ');
                       BITACORA_CIERRES_ERROR(variables.fecha);
                      --Raise form_trigger_failure;                    
    END PROCESO_CIERRE_MULTI_USUARIO;  --FIN:EAM||SolcitudMejoraCierre||30/01/2020
    
    --  Funcion  : Inserta en CG_MOVIMIENTO_DETALLE,                           
--             Creando cada uno de los movimientos del asieto              
--  Fecha    : 5 de Marzo de 1994                                          
--  Analista : Grethel Matarrita Venegas (GIDESA)                          
--                                                                         
-- MODIFICACIONES:                                                         
--   GVIQ, 19-ABRIL-1995                                                   
--   Se copia y no se referencia porque el asiento por diferencial         
--   cambiario tiene varias excepciones a las normas generales de          
--   generacion de asientos, por lo que se necesita introducir los montos  
--   directamente y no con las conversiones y controles automaticos.       
--                                                                         
    procedure Lineas_del_Asiento2(                                             
                                Empresa       in number,                       
                                Agencia       in number,                       
                                Aplicacion    in char,                         
                                SubAplicacion in number,                       
                                Transaccion   in number,                       
                                SubTransac    in number,                       
                                NumTransac    in char,                         
                                Descrip       in char,                         
                                FechaMov      in date,                         
                                FechaValor    in date,                         
                                Fecha_del_dia in date,                         
                                NumAsiento    in number,                       
                                CtaCtable     in char,                         
                                Auxiliar      in number,                       
                                MontoOrigen   in number,                       
                                MontoBase     in number,                       
                                Acumula       in char,                         
                                TipoMov       in char,                         
                                ModificLinea  in char,                         
                                TipCamb1      in out number,                   
                                TipCamb2      in out number,                   
                                MensajeErr    in out char) is                  
        MonedaCta     number(2);                                               
        MontoCta      number;                                                  
        Deb_Origen    number;                                                  
        Cre_Origen    number;                                                  
        Deb_Cta       number;                                                  
        Cre_Cta       number;                                                  
        Deb_Base      number;                                                  
        Cre_Base      number;                                                  
        Clase_TC      char(1);                                                 
        Tipo_TC       char(1);                                                 
        TC_Historico  number;                                                  
        Incluir       boolean := False;                                        
        num_linea     number(8);
        vAuxiliar     number(10);                                              
    begin 
        if (MontoOrigen = 0) and (MontoBase = 0) then                          
          return;                                                              
        end if; 
        vAuxiliar := Auxiliar;
        
        MensajeErr := null;                                                    
        cg.cg_utl.Valida_CtaCtable(Empresa,
                                 CtaCtable,
                                 vAuxiliar,
                                 Clase_TC,
                                 MonedaCta,
                                 Tipo_TC,
                                 TC_Historico,
                                 to_char(Fecha_del_dia,'MM'),
                                 to_char(Fecha_del_dia,'YYYY'),
                                 MensajeErr);
        if (MensajeErr is not null) then
               message(MensajeErr);
               message(MensajeErr);
               --obt_mensaje_error('000099', 'CG', MensajeErr, 'Lineas del Asiento '||sqlcode);
            return;
        end if;

        if  MensajeErr is null                                                 
        and TipoMov not in ('D','C')                                           
        then                                                                   
            MensajeErr := 'Lineas_del_Asiento '||                              
                          'Tipo de movimiento invalido ';                      
            return;                                                            
        end if;         
        if  MensajeErr is null                                                 
        and NumAsiento is null                                                 
        then                                                                  
            MensajeErr := 'Lineas_del_Asiento '||                              
                          'Numero de asiento nulo';                            
            return;                                                            
        end if;
        if  MensajeErr is null                                                 
        and NumTransac is null                                                 
        then                                                                   
            MensajeErr := 'Lineas_del_Asiento '||                              
                          'Numero de transaccion nula';                        
            return;                                                            
        end if;
        --                                                                     
        -- excepcion para el asiento de Valuacion                              
        --                                                                     
        MontoCta   := 0;
        Cre_Origen := 0;                                                       
        Cre_Base   := 0;                                                       
        Cre_Cta    := 0;                                                       
        Deb_Origen := 0;                                                       
        Deb_Base   := 0;                                                       
        Deb_Cta    := 0;                                                       
        if  (TipoMov  = 'D'                                                    
        and  MontoOrigen >= 0)                                                 
        or  (TipoMov  = 'C'                                                    
        and  MontoOrigen <= 0)                                                 
        then                                                                   
            Deb_Origen := abs(MontoOrigen);                                    
            Deb_Base   := abs(MontoBase);                                      
            Deb_Cta    := abs(MontoCta);                                       
        elsif (TipoMov  = 'D'                                                  
        and    MontoOrigen <= 0)                                               
        or    (TipoMov  = 'C'                                                  
        and    MontoOrigen >= 0)                                               
        then                                                                   
            Cre_Origen := abs(MontoOrigen);                                    
            Cre_Base   := abs(MontoBase);                                      
            Cre_Cta    := abs(MontoCta);                                       
        end if;                                                                
        if  MensajeErr is not null                                             
        and Deb_Origen = 0                                                     
        and Cre_Origen = 0                                                     
        then                                                                   
            return;                                                            
        end if;                 
        --                                                                   
        -- Inserta en la tabla Detalle                                         
        --                                                                     
        if Acumula = 'S'                                                       
        then  
          begin                                                                
             update CG_MOVIMIENTO_DETALLE                                      
             set    DEBITO           = DEBITO      + Deb_Origen,               
                    CREDITO          = CREDITO     + Cre_Origen,               
                    DEBITO_CTA       = DEBITO_CTA  + Deb_Cta,                  
                    CREDITO_CTA      = CREDITO_CTA + Cre_Cta,                  
                    DEBITO_BASE      = DEBITO_BASE + Deb_Base,                 
                    CREDITO_BASE     = CREDITO_BASE + Cre_Base                 
             where  CODIGO_EMPRESA   = Empresa                                 
             and    NUMERO_ASIENTO   = NumAsiento                              
             and    FECHA_MOVIMIENTO = FechaMov                                
             and    CUENTA_CONTABLE  = CtaCtable                               
             and    COD_AUXILIAR     = vAuxiliar;                               
             if sql%notfound                                                   
             then                                                              
                Incluir := True;                                               
             end if;                                                           
          exception                                                            
             when others                                                       
             then                                                              
                 MensajeErr := 'Error actualizando Lineas_del_Asiento '|| 'Num Asiento '|| NumAsiento || -- NREGALADO Req.# 670380 10/06/2021 
                               to_char(sqlcode)||' '||                      
                               sqlerrm||' ';--||error_type;                                     
          end;                                                                 
        end if;                                                                
        if Acumula = 'N'                                                       
        or Incluir                                                             
        then  
           cg_utl.Sgte_Linea(num_linea);                                              
           insert into CG_MOVIMIENTO_DETALLE(                                  
               CODIGO_EMPRESA,                                                 
               FECHA_MOVIMIENTO,                                               
               NUMERO_ASIENTO,                                                 
               NUMERO_LINEA,                                                   
               CODIGO_AGENCIA,                                                 
               CODIGO_APLICACION,                                              
               CODIGO_SUB_APLICACION,                                          
               CODIGO_TIPO_TRANSACCION,                                        
               CODIGO_SUBTRANSACCION,                                          
               NUMERO_TRANSACCION,                                             
               CUENTA_CONTABLE,                                                
               COD_AUXILIAR,                                                   
               DEBITO,                                                         
               CREDITO,                                                        
               DEBITO_CTA,                                                     
               CREDITO_CTA,                                                    
               DEBITO_BASE,                                                    
               CREDITO_BASE,                                                   
               ESTADO,                                                         
               FECHA_INCLUSION,                                                
               FECHA_ADICION,                                                  
               ADICIONADO_POR,                                                 
               DETALLE,                                                        
               TIPO_CAMBIO1,                                                   
               TIPO_CAMBIO2,                                                   
               CLASE_TIPCAMBIO,                                                
               FECHA_VALOR,                                                    
               PERMITE_MODIFICAR)                                              
           values(                                                             
               Empresa,                                                        
               FechaMov,                                                       
               NumAsiento,                                                     
               num_linea,                                                      
               Agencia,                                                        
               Aplicacion,                                                     
               SubAplicacion,                                                  
               Transaccion,                                                    
               SubTransac,                                                     
               NumTransac,                                                     
               CtaCtable,                                                      
               nvl(vAuxiliar,0),                                                
               Deb_Origen,                                                     
               Cre_Origen,                                                     
               Deb_Cta,                                                        
               Cre_Cta,                                                        
               Deb_Base,                                                       
               Cre_Base,                                                       
               'I',                                                            
               Fecha_del_dia,                                                  
               sysdate,                                                        
               variables.usuario,                                                
               Descrip,                                                        
               TipCamb1,                                                       
               TipCamb2,                                                       
               Clase_TC,                                                       
               nvl(FechaValor,FechaMov),                                       
               nvl(ModificLinea,'N'));                                         
        end if;   
    exception                                                                  
      when others                                                              
      then    
          MensajeErr := 'Error insertando Lineas_del_Asiento '|| 'Num Asiento '|| NumAsiento || -- NREGALADO Req.# 670380 10/06/2021                                
                        to_char(sqlcode)||' '||                             
                        sqlerrm||' ';--||error_type;                                            
         return;                                                               
    end;                                                                       
    
    -------------------------------------------------------------------------------------------------------
    -- Aflorian-2023.08.10: GDI-2529, Se agrega al cursor "Datos", el campo "SIGN(monto_ingreso) margen" --
    -- Para asi determinar el tipo de segregacion solicitado para identificar las ganancias y perdidas   --
    -------------------------------------------------------------------------------------------------------
    PROCEDURE Genera_Asiento_Ingreso(pMontoIngreso  in number, 
                                     pFactorIngreso in number,
                                     pMonedaBase in varchar2,
                                     pMonedaDestino in varchar2) IS
    cursor datos is 
      select cod_empresa, cod_agencia, fec_transaccion fecha, cod_moneda_base,
           cod_moneda_destino,
                 sum(decode(cod_tipomov,'VENTA',monto_total_mov/monto_tipocambiocol,0)) monto_ventas_destino,
                 sum(nvl(monto_ingreso,0)) monto_ingreso,
                 SIGN(monto_ingreso) margen
        from di_transaccion
       where cod_empresa        = variables.codEmpresa
         and fec_transaccion    = parametros.fec_ini
         and cod_moneda_destino = pMonedaDestino
         and cod_estado = 'A'
       group by cod_empresa, cod_agencia, cod_moneda_base, cod_moneda_destino,Fec_transaccion, SIGN(monto_ingreso);

       --
       vCodError             varchar2(6);
       vMsjError             varchar2(300) := NULL; -- Mensaje de error
       v_tc1                 number(15,8):=null;
       v_tc2                 number(15,8):=null;
       vMonDiferencia        number(18,2) := 0.00;  -- Diferencia en Cuadre Asiento
       vCuenta               varchar2(25);
       vCuenta_prima         varchar2(25);
       exError               exception;
       vNumAsiento           number;
       vDifAsiento           number(12,2):=0;
       vMonto                number(18,2):=0;
       vCta_perdida_ganancia varchar2(25);
       vMovto_Prima          varchar(1);
       vMovto_dh             varchar(1);
       --
    BEGIN
       --
       -- Se genera la caratula del asiento de ingreso
       --

        CG_UTL.Caratula_del_Asiento(variables.codempresa,
                                                     variables.codagencia,
                                                     'BDI',
                                                     '600',
                                                     45,
                                                     '0',
                                                     '0',
                                                     'REGISTRO AUTOMATICO DEL INGRESO DIARIO POR MLD EN MONEDA '||pMonedaDestino,
                                                     variables.fecha_sistema,
                                                     variables.fecha_sistema,
                                                     vNumAsiento,
                                                     variables.usuario,
                                                     vMsjError);
                                    
       if vMsjError is not null then
          --      
          raise exError;
          --
       End if;
       
     -- RMARTINEZ 12/11/2007
     -- Movido aqui para tomar el monto del ingreso
     for dat in datos loop
        IF NVL(dat.Margen,0) <> 0 THEN --<Aflorian-2023.08.04: GDI-2529: Se condiciona segun valor del margen.>
            --if nvl(pMontoIngreso,0) > 0 then
            if dat.Monto_Ingreso > 0 then
                 vMovto_Prima := 'D'; -- Se hace un debito para liquidarla
                 vMovto_dh    := 'C';
                  --
                  -- Buscar cuenta de ingreso en moneda local segun la agencia
                  --   
                  begin
                      
                    select num_cuenta
                      into vCuenta
                      from di_cuenta_x_concepto
                     where cod_empresa = variables.codEmpresa
                       and cod_moneda  = pMonedaDestino -- RMARTINEZ 27/06/2006 and cod_moneda=pMonedaBase
                       and concepto    = 'INGRESO';
                  exception
                    when no_data_found then
                        mensaje('No se ha paremetrizado la cuenta para el concepto INGRESO');
                        --raise form_trigger_failure;
                        BITACORA_CIERRES_ERROR(variables.fecha);
                    when others then              
                        --      
                        vMsjError := 'Error buscando la cuenta para el concepto INGRESO '||sqlerrm;
                        raise exError;
                        --      
                  end;
            else
                 vMovto_Prima := 'C'; -- Se hace un debito para compensar la perdida
                 vMovto_dh    := 'D';
                  --
                  -- Buscar cuenta de perdida en moneda local segun la agencia
                  --   
                  begin   
                    select num_cuenta
                      into vCuenta
                      from di_cuenta_x_concepto
                     where cod_empresa=variables.codEmpresa
                       and cod_moneda = PMonedaDestino -- RMARTINEZ 27/06/2006 and cod_moneda=PMonedaBase
                       and concepto='PERDIDA';
                  exception
                    when no_data_found then
                        mensaje('No se ha paremetrizado la cuenta para el concepto PERDIDA');
                        --raise form_trigger_failure;
                        BITACORA_CIERRES_ERROR(variables.fecha);
                    when others then
            --
                        vMsjError := 'Error buscando la cuenta para el concepto PERDIDA '||sqlerrm;
                        raise exError;    
                        --
                    end;
            end if;
            --
            -- Buscar cuenta de la prima
            --   
            begin   
             select num_cuenta
               into vCuenta_prima
               from di_cuenta_x_concepto
              where cod_empresa=variables.codEmpresa
                and cod_moneda=pMonedaBase
                and concepto='COMPRA';
            exception
              when no_data_found then
                  mensaje('No se ha paremetrizado la cuenta para el concepto COMPRA para la agencia: '||
                  variables.codAgencia);
                  --raise form_trigger_failure;
                  BITACORA_CIERRES_ERROR(variables.fecha);
              when others then
           --
                   vMsjError := 'Error buscando la cuenta para el concepto COMPRA. '||sqlerrm;
                raise exError;
                --
            end;
            --
            -- Genera la linea del asiento contable de la prima
            --   
            -- RMARTINEZ 12/11/2007 Movido hacia arriba for dat in datos loop
            -- Descuenta el monto de la prima correspondiente a la agencia
        CG_UTL.Lineas_Del_Asiento(variables.codempresa,
                              dat.Cod_Agencia,
                                                  'BDI',
                                                  '600',
                                                  45,
                                                  '0',
                                                  '0',
                              'REGISTRO DEL INGRESO POR TRANSACCIONES MLD',
                                                  variables.fecha_sistema,
                                                variables.fecha_sistema,
                                                  variables.fecha_sistema,
                                                  vNumAsiento,
                                                  vCuenta_prima,
                                                  dat.cod_agencia,
                                                  abs(dat.Monto_Ingreso), -- RMARTINEZ 25/04/2008 abs(nvl(dat.monto_ventas_destino,0)*nvl(pFactorIngreso,0)),
                                                  'N',
                                                  vMovto_Prima,
                                                  'N',
                                                  v_tc1,
                                                  v_tc2,
                                                  variables.Usuario,
                                                  vMsjError);
                                      
                   If (vMsjError is not null) then
                   --
                      raise exError;
                   --
                   End if;
            --
            -- Genera la linea del asiento contable para el ingreso
            --  
            -- RMARTINEZ 27/06/2006
            -- Por cambio de contabilizacion MLD
            -- Para que solo inserte valor en moneda origen           
            Lineas_Del_Asiento2(variables.codempresa,
                                dat.cod_agencia,
                                'BDI',
                                '600',
                                45,
                                '0',
                                '0', 
                                'REGISTRO DEL INGRESO POR TRANSACCIONES MLD',
                                variables.fecha_sistema,         
                                variables.fecha_sistema,          
                                variables.fecha_sistema,        
                                vNumAsiento, 
                                vCuenta,
                                dat.cod_agencia,     
                                abs(dat.Monto_Ingreso), -- RMARTINEZ 25/04/2008 abs(nvl(dat.monto_ventas_destino,0)*nvl(pFactorIngreso,0)),
                                0,
                                'N',
                                vMovto_dh,
                                'N',                  
                                v_tc1,             
                                v_tc2,             
                                vMsjError);
                                  
               If (vMsjError is not null) then
               --
                  raise exError;
               --
               End if;
               --
               vMonto := vMonto + dat.Monto_Ingreso; -- RMARTINEZ 12/11/2007 (nvl(dat.monto_ventas_destino,0)*nvl(pFactorIngreso,0));
        END IF; -- FIN Margen <Aflorian-2023.08.04: GDI-2529> 
        --<Aflorian-2023.08.04: GDI-2529: Se condiciona segun valor del margen.>
        
     end loop;
      -- Cuadra el Asiento Contable Generado
      if vMonto <> 0 then        ------ aqui tenia  vmonto > a cero by wen 04/10/04 ahora es <> 0 para que llame proc. cuadra_asiento
        
        CG_UTL.Cuadre_Asiento(variables.codEmpresa,
                                          variables.fecha_sistema,
                                          vNumAsiento,
                                          vDifAsiento,
                                          vMsjError);
     --
       if vMsjError is not null then
          raise exError;
       end if;
           
      end if;
      
    exception
       when exError then
            mensaje('Genera_Asiento_Ingreso: '||vMsjError);
            --raise form_trigger_failure;
            BITACORA_CIERRES_ERROR(variables.fecha);
       when others then
            mensaje('Ocurri√≥ error en Genera_Asiento_Ingreso: '||sqlerrm);        
            --raise form_trigger_failure;
            BITACORA_CIERRES_ERROR(variables.fecha);
    END;
    
    PROCEDURE GENERA_NCF_REG_UINGRESO(pGrupo in varchar2,
                                      pCliente in Varchar2,
                                      pFechaIni in date,
                                      pFechaFin in date,
                                      pCodUsuario in varchar2,
                                      pnum_cuenta in varchar2,
                                      pmoneda    in    VARCHAR2,
                                      psistema    in varchar2,
                                      ptip_transaccion in varchar2,
                                      psubtip_transacc    in varchar2,
                                      pMonto    in varchar2,
                                      pcant_trans in varchar2,
                                      pNoComprobante in out varchar2,
                                      pMensajeErr in out    varchar2
                                      )    IS

         -- Busco el Tipo que corresponde al grupo del parametro.
         Cursor tipo_ncf is
        Select tipo_cf
          from ncf_grupos
       where cod_empresa  = variables.CodEmpresa
         and grupo_cf         = pGrupo; 
            
    vTipo                         ncf_grupos.tipo_cf%type;
    vSecuenciaFija        varchar2(12);
    --vConsecutivo            varchar2(8);
    vConsecutivo            varchar2(10); --ESPONS 17/02/2024 IPF-4330: SE AUMENTA TAMA√ëO POR E-CF
    vNoComprobante      ncf_encabezado.numero_comprobante%type; 
    pCantTrans                Number:=1;    
    vDuplicado                varchar2(1) := 'N';   
    vMensajeErr            varchar2(100);
    vAreaImpresion      varchar2(20);
    vAgenciaNCF         varchar2(20);
    vInsertEncabezadoOK BOOLEAN := FALSE;  --jsanquintin GDI-4308 Error en Cierre Diario de Divisas
    vMonto                number(18,2);
    vMoneda               varchar2(4);

    BEGIN

        -- Busco Tipo NCF que corresponde al grupo del parametro.
        open tipo_ncf;
        fetch tipo_ncf into vTipo;
        if tipo_ncf%notfound then
            pMensajeErr := 'Error buscando el Tipo NCF en la tabla NCF_GRUPOS';
        Mensaje('Error buscando el Tipo NCF en la tabla NCF_GRUPOS');
        raise form_trigger_failure;
            RETURN;
        end if;
        close tipo_ncf;
        
            Begin
            select valor
            Into vAgenciaNCF
            from parametros_x_empresa
            where cod_empresa = variables.codempresa
            And cod_sistema = 'PA'
            And abrev_parametro = 'AGENCIA_NCF';
        Exception 
            When Others Then
                mensaje('Error obteniendo Parametro AGENCIA_NCF '||sqlerrm);
                pMensajeErr := 'Error obteniendo Parametro AGENCIA_NCF';
                raise form_trigger_failure;
                return;
        End;

        
        Begin
            select substr(valor,1,3)
            Into vAreaImpresion
            from parametros_x_empresa
            where cod_empresa = variables.codempresa
            And cod_sistema = 'PA'
            and abrev_parametro = 'AREA_IMPRESION_NCF';    
        Exception
            When Others Then
                mensaje('Error obteniendo Parametro general AREA_IMPRESION_NCF '||sqlerrm);
                pMensajeErr := 'Error obteniendo Parametro general AREA_IMPRESION_NCF ';
                raise form_trigger_failure;
                return;
        End;


        -- OBTIENE MONEDA
        vMoneda := OBT_MONEDA_ORIGEN_EMP(variables.codempresa);  
        
        -- Busco el Numero de Comprobante Fiscal
        PA_NCF_En_Linea.NCF_Obtiene_Consecutivo( variables.CodEmpresa,
                                                         vTipo,
                                    vAgenciaNCF, -- Punto de Emision
                                    vAreaImpresion,
                                    vSecuenciaFija,
                                    vConsecutivo,
                                    vMensajeErr
                                );
     BEGIN
     
      IF vMensajeErr is not null then
          Mensaje('Genera_NCF_Reg_UIngreso '||vMensajeErr);
          --pMensajeErr := 'Error obteniendo Consecutivo para NCF'; --jsanquintin GDI-4308 Error en Cierre Diario de Divisas
          Bitacora (
                pMetodo        => 'DI',
                pNivel         => 0,
                pTextoMensaje  => 'Error obteniendo Consecutivo para NCF:  ' || SQLERRM || ' Empresa: ' || variables.CodEmpresa || ', NoComprobante: ' || pNoComprobante || ', Cuenta: ' || pnum_cuenta); --jsanquintin GDI-4308 Error en Cierre Diario de Divisas 
         
        --raise form_trigger_failure;
        --return;
      ELSE  
      --end if;
      --
        -- Construyo el Numero de Comprobante
      vNoComprobante := vSecuenciaFija||vConsecutivo;
      pNoComprobante := vNoComprobante;
      vMonto := pMonto; 
       
       BEGIN
        -- inserto los datos de la cabezera, cada vez que cambia el producto del cliente.
        PA_NCF_En_Linea.NCF_Inserta_Encabezado (variables.CodEmpresa,             pCliente,         pFechaIni,     pFechaFin, 
                                                        vNoComprobante, pnum_cuenta, pmoneda, psistema,    pGrupo,    
                                                        pCodUsuario);
        -- Si la inserci√≥n fue exitosa
        vInsertEncabezadoOK := TRUE;                                                 
       EXCEPTION
            WHEN OTHERS THEN
            Bitacora (
                pMetodo        => 'DI',
                pNivel         => 0,
                pTextoMensaje  => 'Error en Encabezado: ' || SQLERRM || ' Empresa: ' || variables.CodEmpresa || ', NoComprobante: ' || pNoComprobante || ', Cuenta: ' || pnum_cuenta); --jsanquintin GDI-4308 Error en Cierre Diario de Divisas

       -- No continuar con la inserci√≥n de detalles si hay un error en el encabezado
        vInsertEncabezadoOK := FALSE;
       END;
       
       -- Solo proceder con la inserci√≥n de los detalles si el encabezado se insert√≥ correctamente, Incremento la secuencia solo si el encabezado se insert√≥ correctamente.
        IF vInsertEncabezadoOK THEN
        --  
          if pmoneda <> vMoneda then
           vMonto := cg.f_convierte_monto(variables.codempresa, pa.calendar.OBTENER_ANT_FEC_HABIL(variables.codempresa, 
                                                                                      vAgenciaNCF, 
                                                                                      variables.FEC_HOY),
                                       pMonto, pmoneda, vMoneda);
          end if;
          --    
           Begin
           Update Ncf_encabezado
              set otra_forma_pago = vMonto
            where numero_comprobante = vNoComprobante;
          exception
             when others then
             null;
          End;
        
           BEGIN                   
            -- inserto los datos del detalle
            PA_NCF_En_Linea.NCF_Inserta_Detalle(variables.CodEmpresa, pNoComprobante, pnum_cuenta, pFechaIni, pFechaFin,ptip_transaccion,
                                                psubtip_transacc, pMonto, pcant_trans, pCodUsuario, vDuplicado, vMonto);
    
           EXCEPTION
                WHEN OTHERS  THEN
                 Bitacora (
                    pMetodo        => 'DI',
                    pNivel         => 0,
                    pTextoMensaje  => 'Error en Detalle: ' || SQLERRM || ' Empresa: ' || variables.CodEmpresa || ', NoComprobante: ' || pNoComprobante || ', Cuenta: ' || pnum_cuenta ); --jsanquintin GDI-4308 Error en Cierre Diario de Divisas
           END;
        
        -- Incremento la secuencia.
        --vConsecutivo := lpad(to_char(to_number(vConsecutivo)+1),8,'0');
        --vConsecutivo := lpad(to_char(to_number(vConsecutivo)+1),10,'0'); --ESPONS 17/02/2024 IPF-4330: SE AUMENTA TAMA√ëO POR E-CF
        /*BEGIN
        -- Actualizo el Consecutivo de Comprobantes, si genero trans. para el cliente.
         pa_ncf.NCF_Actualiza_Secuencia (variables.CodEmpresa, vTipo, vAgenciaNCF, vAreaImpresion, to_number(vConsecutivo));
         EXCEPTION
            WHEN OTHERS THEN
             Bitacora (
                pMetodo        => 'DI',
                pNivel         => 0,
                pTextoMensaje  => 'Error en Actualizaci√≥n: ' || SQLERRM || ' Empresa: ' || variables.CodEmpresa || ', NoComprobante: ' || pNoComprobante || ', Cuenta: ' || pnum_cuenta); --jsanquintin GDI-4308 Error en Cierre Diario de Divisas
         END;*/
        END IF; 
       END IF; 
     END;     
    END;  

    
    PROCEDURE GeneraDatosPosicion IS
       cursor datos is
                Select nvl(t.cod_empresa,variables.codempresa) cod_empresa ,
               nvl(t.cod_moneda_base,variables.moneda) cod_moneda_base,
               nvl(t.cod_moneda_destino, m.codigo_moneda) cod_moneda_destino,
               nvl(t.MONTO_COMPRAS_BASE,0) MONTO_COMPRAS_BASE,
               nvl(t.MONTO_VENTAS_BASE,0) MONTO_VENTAS_BASE,
               nvl(t.MONTO_COMPRAS_DESTINO,0) MONTO_COMPRAS_DESTINO,
               nvl(t.MONTO_VENTAS_DESTINO,0) MONTO_VENTAS_DESTINO,
               nvl(t.MONTO_INGRESO,0) MONTO_INGRESO
        from (
      select t.cod_empresa, fec_transaccion fecha, t.cod_moneda_base,
              t.cod_moneda_destino,
              sum(decode(t.cod_tipomov,'COMPRA',t.monto_total_mov,0)) monto_compras_base,
              sum(decode(t.cod_tipomov,'VENTA',t.monto_total_mov,0)) monto_ventas_base,
              sum(decode(t.cod_tipomov,'COMPRA',t.monto_total_mov/t.monto_tipocambiocol,0)) monto_compras_destino,
              sum(decode(t.cod_tipomov,'VENTA',t.monto_total_mov/t.monto_tipocambiocol,0)) monto_ventas_destino,
              sum(nvl(t.monto_ingreso,0)) monto_ingreso
      from di_transaccion t
     where t.cod_empresa                      = variables.codEmpresa
       and fec_transaccion                    = parametros.fec_ini
       and t.cod_estado                       = 'A'
     group by cod_empresa, cod_moneda_base, cod_moneda_destino,Fec_transaccion
     ) t, monedas m
      where m.codigo_moneda = T.COD_MONEDA_DESTINO(+)
        and M.CODIGO_MONEDA <> variables.moneda
      order by M.CODIGO_MONEDA;
        --<</raybar 25/10/2017>>
        
            -- DFATULE 07/12/2006 CURSOR AGREGADO PARA TRAER LAS TRANSACCIONES EN EFECTIVO     
        Cursor Efectivo(v_moneda in Varchar2) is 
                select dt.cod_empresa, trunc(dt.fec_transaccion) fecha,cod_moneda_base,
                     cod_moneda_destino,
                           sum(decode(dt.cod_tipomov,'COMPRA',dt.monto,0)) monto_compras_base,
                           sum(decode(dt.cod_tipomov,'VENTA',dt.monto,0)) monto_ventas_base
                    From     Di_Detalle_Transaccion dt, di_transaccion t
                    where dt.cod_empresa = t.cod_empresa
                    And   dt.COD_AGENCIA = t.COD_AGENCIA
                    And   dt.COD_TIPOMOV = t.COD_TIPOMOV
                    And   dt.NUM_DOCUMENTO        =    t.NUM_DOCUMENTO
                    And   dt.FEC_TRANSACCION      =    t.FEC_TRANSACCION
                    And   dt.cod_empresa            = variables.codEmpresa
                    and     trunc(dt.fec_transaccion) = parametros.fec_ini
                    and     t.cod_estado                            =    'A'
                    And     dt.cod_forma_pago        =    variables.PAGO_EFECTIVO --Efectivo 'EF'
                    and        t.cod_moneda_destino = v_moneda
                    And ((dt.cod_tiPoMov = 'COMPRA' AND dt.COD_TIPO_DETALLE = 'INGRESO')
                        OR (dt.cod_tiPoMov = 'VENTA'     AND dt.COD_TIPO_DETALLE = 'EGRESO' ))
                    group by dt.cod_empresa, trunc(dt.fec_transaccion),cod_moneda_base,
                                     cod_moneda_destino;
            -- DFATULE 07/12/2006    
                
       vInicial         number(15,2) := 0;
       vTasaGeneralAnt  di_transaccion.tipo_cambio_sobrev%type := 0;
       vFinal           number(15,2) := 0;
       vFecha           date;  
       vTPCompra        di_transaccion.tipo_cambio_sobrev%type :=0;
       vTPVenta         di_transaccion.tipo_cambio_sobrev%type :=0;
       vFactorIngreso   di_transaccion.tipo_cambio_sobrev%type :=0;
       vMonIngreso      number(15,2):=0;
       VPosInicGeneral  number(15,2):=0;
       vPosicion_ext    number(15,2) := 0;
       vPosicion_origen number(15,2) := 0;
       vTasa_Final      di_transaccion.tipo_cambio_sobrev%type :=0;
       vAsientoIngreso  number(8):=0;
       vMsjError        varchar2(300);
       exConta          exception;
        --dfatule 07/12/2006
        V_Monto_Efectivo_Inicial    di_historico_posicion.Monto_Efectivo_Inicial%type;
        V_Monto_Efectivo_Final        di_historico_posicion.Monto_Efectivo_Final%type;
          --dfatule 07/12/2006
        vNoComprobante            di_historico_posicion.Numero_CF%type;
      vGrupo_CF        varchar2(10);
      -- Flarsen 14/01/2013
      -- Se agreaga variable para mostrar el error en el calculo del reporte historico de la posicion.
      p_error_Cierre   varchar2(4000);
      al_id            Alert; 
      al_button        Number; 
      -- Flarsen 06/03/2014 la variable para determinar si ocurrio un error al recalcular la posicion.  
      vError        varchar2(4000);
    BEGIN
      -- Flarsen 14/01/2013
       -- Se agrega el codigo para calcular los valores historicos de la posicion.
       begin
         --al_id := Find_Alert('AVISO_ERROR');
           Di_Reg_Cierre_Posicion_his(
                                    variables.codEmpresa,
                                    parametros.fec_ini,
                                    p_error_Cierre
                                   );
         if p_error_Cierre is not null then
            Set_Alert_Property(al_id, alert_message_text, p_error_Cierre );
            al_button := Show_Alert( al_id ); 
         end if;
       exception
             when others then
            Set_Alert_Property(al_id, alert_message_text, p_error_Cierre||'-'||sqlerrm);
            al_button := Show_Alert( al_id ); 
       end;
       --
      for dat in datos loop
          -- Se busca el monto inicial
          vInicial := 0;
          vFinal := 0;
          --dfatule 07/12/2006
            --Inicializo variables para cada moneda
            V_Monto_Efectivo_Inicial := 0;
            V_Monto_Efectivo_Final := 0;    
            --dfatule 07/12/2006
          -- se busca la fecha de la ultima posicion de la agencia,
          -- con el fin de tomar cual fue la ultima posicion de la misma.
          begin
             select max(fecha)
               into vFecha
               from di_historico_posicion
              where cod_empresa=variables.codEmpresa
                and fecha < parametros.fec_ini
                and cod_moneda_Base    = dat.cod_moneda_base
                and cod_moneda_destino = dat.cod_moneda_destino;
          exception
              when no_data_found then
                   vFecha := parametros.fec_ini;
          end;
          --  Se busca la posicion final de la ultima fecha de registro de posicion de
          --  de la agencia
          begin
             select nvl(monto_posicion_final,0), Nvl(Monto_Efectivo_Final,0) --dfatule 07/12/2006
               into vInicial, V_Monto_Efectivo_Inicial --dfatule 07/12/2006
               from di_historico_posicion
              where cod_empresa=variables.codEmpresa
                and fecha = vFecha
                and cod_moneda_Base    = dat.cod_moneda_base
                and cod_moneda_destino = dat.cod_moneda_destino;
          exception
             when no_data_found then
                  vInicial := 0;
                  V_Monto_Efectivo_Inicial :=0;
          end;
          -- se busca la fecha de la ultima posicion general para leer la ultima tasa
          -- de cambio a la que se cerr√≥.
          begin
             select max(fecha)
               into vFecha
               from di_historico_posicion
              where cod_empresa=variables.codEmpresa
                and fecha < parametros.fec_ini
                and cod_moneda_Base    = dat.cod_moneda_base
                and cod_moneda_destino = dat.cod_moneda_destino;
          exception
              when no_data_found then
                  vMsjError := 'No existe registro inicial en el historico de posici√≥n de la empresa';
                  --raise form_trigger_failure;
                  Mensaje(vMsjError);
                  BITACORA_CIERRES_ERROR(variables.fecha);
          end;
          --  Se busca la tasa final de la empresa
          begin
             select nvl(tasa_final,0)
               into vTasaGeneralAnt
               from di_historico_posicion
              where cod_empresa=variables.codEmpresa
                and fecha = vFecha
                and cod_moneda_Base    = dat.cod_moneda_base
                and cod_moneda_destino = dat.cod_moneda_destino;
          exception
             when no_data_found then
                  vMsjError := 'No existe registro inicial en el historico de posici√≥n de la empresa';
                  --raise form_trigger_failure;
                  Mensaje(vMsjError);
                  BITACORA_CIERRES_ERROR(variables.fecha);
          end; 
          
          -- RMARTINEZ 04/04/2008
          -- Se busca la posicion en linea
          --Flarsen 06/03/2014 Se ignora la consulta directa a la tabla di_Posicion_actual
          --begin
          --   select nvl(monto,0),nvl(monto_origen,0)
          --   into vPosicion_ext,vPosicion_Origen
          --   from di_posicion_actual
          --   where cod_empresa = variables.codEmpresa
          --     and cod_moneda  = dat.cod_moneda_destino;
          --exception
          --   when others then
          --        vMsjError := 'Error buscando Posicion en Linea';
          --        --raise form_trigger_failure;
          --end; 
          -- Flarsen 21/05/2023 Se cambia funcion para determinar los registros por dia para calcular.
          --DI_PKG_POSICION.Obt_Monto_Posicion(pCodEmpresa              => variables.codEmpresa ,
           Obt_Monto_Posicion_Cierre(pCodEmpresa        => variables.codEmpresa ,
                                     pMonedaPosicion    => dat.cod_moneda_destino,
                                     pFechaCierre       => parametros.fec_ini,
                                     pMontoOrigen       => vPosicion_Origen,
                                     pMontoDestino      => vPosicion_ext,
                                     pError             => vError
                                     );
                                            
          if vError is not null then
             mensaje('[VERIFICA_POSICION]: ['||vError||']');
             Raise form_trigger_failure;
          end if;                                            
          
          if nvl(vPosicion_origen,0) <> 0 then
              vTasa_Final := abs(nvl(vPosicion_Origen,0)/nvl(vPosicion_ext,0));
          else
              vTasa_Final := 0;
          end if;
          -- RMARTINEZ 04/04/2008
          
          
          vFinal := nvl(vInicial,0) + nvl(dat.monto_compras_destino,0)-nvl(dat.monto_ventas_destino,0);
          -- Calculando promedio de las compras, ventas y factor de ingreso
          
          if (nvl(vInicial,0)+nvl(dat.monto_compras_destino,0)) > 0 then
                  vTPCompra := ((nvl(vInicial,0)*nvl(vTasaGeneralAnt,1))+dat.monto_compras_base)  /
                               (nvl(vInicial,0)+nvl(dat.monto_compras_destino,1));
          else
                vTPCompra:=0;
          end if;
          if nvl(dat.monto_ventas_destino,0) > 0 then 
              vTPVenta  := dat.monto_ventas_base/nvl(dat.monto_ventas_destino,0);
          else        
                vTPVenta := 0;
          end if;
          vFactorIngreso  := nvl(vTPVenta,0)-nvl(vTPCompra,0);
          vMonIngreso := dat.monto_ventas_destino*vFactorIngreso;
          --
          --dfatule 07/12/2006
          --Insertar aqui el calculo de la posicion en Monto efectivo Inicial y Final
                  For E in Efectivo(dat.cod_moneda_destino) Loop
                         V_Monto_Efectivo_Final := Nvl(V_Monto_Efectivo_Inicial,0) + (Nvl(E.monto_compras_base,0)-Nvl(E.monto_ventas_base,0));
                  

                  End Loop;
          --
             -- DFATULE 07/12/2006 
             
          -- Inserto Linea Historico Posicion del dia.
          begin
               insert 
               into di_historico_posicion(COD_EMPRESA,
                                            FECHA,
                                          COD_MONEDA_BASE,
                                          COD_MONEDA_DESTINO,
                                          MONTO_POSICION_INICIAL,
                                          TASA_INICIAL,
                                          MONTO_COMPRAS_BASE,
                                          MONTO_COMPRAS_DESTINO,
                                          MONTO_VENTAS_BASE,
                                          MONTO_VENTAS_DESTINO,
                                          MONTO_POSICION_FINAL,
                                          TASA_FINAL,
                                          MONTO_INGRESO,
                                          ADICIONADO_POR,
                                          FECHA_ADICION,
                                          Monto_Efectivo_Inicial,     --dfatule 07/12/2006
                                          Monto_Efectivo_Final)      --dfatule 07/12/2006                                                              
              values(variables.codEmpresa,
                     parametros.fec_ini,
                     dat.cod_moneda_base,
                     dat.cod_moneda_destino,                 
                     vInicial,
                     vTasaGeneralAnt,
                     dat.monto_compras_base,
                     dat.monto_compras_destino,
                     dat.monto_ventas_base,
                     dat.monto_ventas_destino,
                     vPosicion_ext, -- RMARTINEZ 14/04/2008 vFinal,    -- posicion final agencia
                     vTasa_Final, -- RMARTINEZ 14/04/2008 vTPCompra, -- tasa final agencia
                     dat.Monto_Ingreso, -- RMARTINEZ 14/04/2008 vMonIngreso, -- monto ingreso agencia
                     user,
                     sysdate,
                     v_Monto_Efectivo_Inicial, --Monto en Banco(Caja/Boveda) del Dia anterior
                     v_Monto_Efectivo_Final); --Monto en Banco(Caja/Boveda) del Dia

          exception          
              when others then
                   vMsjError := 'Error insertando Datos de posici√≥n '||sqlerrm;
                   --raise form_trigger_failure;
                   Mensaje(vMsjError);
                   BITACORA_CIERRES_ERROR(variables.fecha);
          end;
          -- RMARTINEZ 12/11/2007
          -- Se registrara el ingreso que se tiene en cada transaccion
          --if vMonIngreso <> 0 then          
              if nvl(dat.monto_ingreso,0) <> 0 then
                  Genera_Asiento_Ingreso(dat.Monto_Ingreso,vFactorIngreso,dat.cod_moneda_base,dat.cod_moneda_destino);
              end if;
              
              -- RMARTINEZ 14/12/2007
              -- Para generar NCF Registro Unico de Ingreso
              vMsjError := null;
              vGrupo_CF := Param.Parametro_X_Empresa(variables.CodEmpresa,'GRUPO_NCF_ING_DIA','DI');
              if vGrupo_CF is null then
                  Mensaje('Parametro x Empresa GRUPO_NCF_ING_DIA No Definido');
                  --raise form_trigger_failure;
                  BITACORA_CIERRES_ERROR(variables.fecha);
              end if;
           if dat.monto_ingreso > 0 then -- EBlanco: 21-04-2012: se excluye los NCF con valor cero
              Genera_NCF_Reg_UIngreso(vGrupo_CF,              -- Grupo 
                                      variables.codEmpresa,  -- Cliente
                                      parametros.fec_ini,    -- Fecha Inicial
                                      parametros.fec_ini,    -- Fecha Final
                                      user,                   -- Usuario 
                                      'Ingreso_Diario',       -- Cuenta
                                      dat.cod_moneda_destino, -- Moneda
                                      'DI',                   -- Sistema
                                      45,                     -- Tipo de Transaccion
                                      0,                      -- SubTipo de Transaccion
                                      dat.monto_ingreso, -- RMARTINEZ 15/04/2008 vMonIngreso,            -- Monto
                                      1,                      -- Cantidad de Transaccion
                                      vNoComprobante,         -- Numero de Comprobante
                                      vMsjError);
           end if;
            if vMsjError is not null then
                Mensaje(vMsjError||sqlerrm);
                --raise form_trigger_failure;
                BITACORA_CIERRES_ERROR(variables.fecha);
            end if;                                  
                                      
            if vNoComprobante is not null then
                begin
                  update di_historico_posicion
                     set ind_genero_ncf = 'S',
                         numero_cf     = vNoComprobante
                   where cod_empresa        = variables.CodEmpresa
                     and fecha              = parametros.fec_ini
                     and cod_moneda_base    = dat.cod_moneda_base
                     and cod_moneda_destino = dat.cod_moneda_destino;
                  
                if sql%rowcount = 0 then
                      mensaje('Error Actualizando Numero de Comprobante en DI_HISTORICO_POSICION '||sqlerrm);
                       --:global.error := 'S';
                       --raise form_trigger_failure;
                       BITACORA_CIERRES_ERROR(variables.fecha);

                end if;
              end;    
          end if;                                        
         -- RMARTINEZ 14/12/2007                                                                                                      
      end loop;
        
        
        BEGIN
          -- Se anulan las autorizaciones de transacciones
          -- de compra y con condiciones especiales. [srosario 26Ene2006]
          update di_autorizacion
             set cod_estado='N'
           where cod_empresa=variables.codEmpresa
        --    and fecha_autorizacion = :parametros.fec_ini      SF 24/agosto/2006
             and fecha_autorizacion < parametros.fec_ini     -- Solo anular las autorizaciones mayor o igual horas
             and cod_estado in ('P','S')
			 and sub_tip_contrato is null; --desantiago IPF-5315 15/04/2025, se agrego condicion para que la autorizaciones spot no se anulen
        EXCEPTION
             when others then
                  mensaje('Error Anulando Autorizacion Transaccion '||sqlerrm);
                  --:global.error := 'S';
                  BITACORA_CIERRES_ERROR(variables.fecha);
        END;  
        
    -- RMARTINEZ 04/10/2006
    -- Para que anule las autorizaciones de operaciones triangulares    
    BEGIN
          update di_autorizacion_triangular
             set cod_estado='N'
           where cod_empresa=variables.codEmpresa    
             and fecha_autorizacion < parametros.fec_ini    
             and cod_estado in ('P','S');        
            
        EXCEPTION
             when others then
                  mensaje('Error Anulando Autorizacion de Transacciones Triangulares '||sqlerrm);
                  --global.error := 'S';
                  BITACORA_CIERRES_ERROR(variables.fecha);
        END;
    -- RMARTINEZ 04/10/2006
        
    EXCEPTION
        WHEN exConta THEN
           mensaje('Error Generando caratula de asiento de ingreso: '||vMsjError);
           BITACORA_CIERRES_ERROR(variables.fecha);
        WHEN OTHERS THEN
           mensaje('Error Generando Datos de la posici√≥n '||sqlerrm);
           BITACORA_CIERRES_ERROR(variables.fecha);
    END;
    
    -- Efectua: Realiza la anulacion de las divisas pendientes al momento de efectuar el cierre.
    -- Requiere: Como parametro se le enviara el valor de 'N' para anular.
    -- Historia: -- FACRUZ: 23-11-2016: Se crea esta funcion para satifacer el requerimiento 2016-M00253        
    -- ----------------------------------------------------------------------------------------------------------- --
    PROCEDURE anula_pendientes IS
    BEGIN
        UPDATE di_Transaccion 
           SET cod_estado          = 'N',
                   FEC_ANULACION   = variables.FECHA_SISTEMA,
                   ANULADO_POR     = variables.USUARIO
         WHERE cod_empresa         = variables.codEmpresa
           AND fec_transaccion     = parametros.fec_ini
             AND cod_estado        = 'P';         
    END;
    
    -- Efectua: Realiza la anulacion de un numero de asiento en caja general .
    -- Requiere: Como parametro se le enviara el Numero de asiento que se anulara.
    -- Historia: -- FACRUZ: 23-11-2016: Se crea esta funcion para satifacer el requerimiento 2016-M00253        
    -- ----------------------------------------------------------------------------------------------------------- --
    PROCEDURE anula_pendienteCG (vNumero_Asiento varchar2) IS
    BEGIN
     UPDATE cg_movimiento_resumen cgmr
      SET
          CGMR.ESTADO                     = 'N',            
          CGMR.MODIFICADO_POR             = variables.USUARIO,
          CGMR.FECHA_MODIFICACION         = variables.FECHA_SISTEMA
          
           WHERE CODIGO_EMPRESA           = variables.codEmpresa
           AND FECHA_MOVIMIENTO           = parametros.fec_ini
           AND ESTADO                     = 'I'
           AND NUMERO_ASIENTO             = vNumero_Asiento;       
     --
     UPDATE cg_movimiento_detalle cgmd
      SET
          cgmd.ESTADO                     = 'N',            
          cgmd.MODIFICADO_POR             = variables.USUARIO,
          cgmd.FECHA_MODIFICACION         = variables.FECHA_SISTEMA
          
           WHERE CODIGO_EMPRESA           = variables.codEmpresa
           AND FECHA_MOVIMIENTO           = parametros.fec_ini
           AND ESTADO                     = 'I'
           AND NUMERO_ASIENTO             = vNumero_Asiento;       
    END;



    PROCEDURE Verifica_Cierre IS
      vExistePosicion          char(1):='N';
      vExistePend              number(4):=0;
      vMsjError                varchar2(300):=null;
      vNumero_Asiento          varchar2(25);  --<<FACRUZ>>-Variable para almacenar el asiento que se anulara.
      vExistePendientes        number(3);         --<<FACRUZ>>-Variable para almacenar los que estan en estado pendiente.
      vSubject                 varchar2(500); --<<FACRUZ>>-Variable que contendra el titulo del correo.
      vTexto                   varchar2(32767); --<<FACRUZ>>-Variable que contendra el cuerpo del correo.
      
      --Se declara un cursor para extraer los datos que seran enviados por correo
    CURSOR transacciones is    --FACRUZ 23-NOV-2016
     SELECT COD_AGENCIA, COD_TIPOMOV, NUM_DOCUMENTO, NUM_AUTORIZA, FEC_TRANSACCION, COD_ESTADO
     , COD_MONEDA_BASE, COD_MONEDA_DESTINO, ORIGEN_DESTINO, COD_USUARIO, MONTO_TOTAL_MOV, COD_CLIENTE
     , NOM_CLIENTE, NUM_ASIENTO_INGRESO, NUM_ASIENTO_EGRESO --<<FACRUZ 17-ENE-2017>> SE AGREGA NUM_ASIENTO_EGRESO PARA TAMBIEN PONER EN NULO LOS ASIENTOS DE EGRESOS QUE ESTAN EN ESTADO I.                              
      FROM di_Transaccion
      WHERE cod_empresa=variables.codEmpresa
        AND fec_transaccion=parametros.fec_ini
        AND cod_estado='P'
        AND NUM_ASIENTO_INGRESO != 0;  --Se valida que se busque solo aquellos que tengan un numero de asiento
      
      
    BEGIN
         -- verifica que el cierre no se haya efectuado con anterioridad.
         begin
          select 'S'
            into vExistePosicion
            from di_historico_posicion
           where cod_empresa= variables.codEmpresa
             and fecha=parametros.fec_ini;
         exception
            when no_data_found then
                 vExistePosicion := 'N';
            when others then
                 vMsjError := 'Error verificando existencia de Posicion';
                 message(vMsjError);
                 BITACORA_CIERRES_ERROR(variables.fecha);
         end;
         if vExistePosicion = 'S' then
            vMsjError := 'Ya el Cierre de Posici√≥n fue efectuado para esta empresa.';
            message(vMsjError);
            BITACORA_CIERRES_ERROR(variables.fecha);
         end if;
         -- Ahora se verifica que no hayan transacciones pendientes.
         begin
         --<<FACRUZ 13-01-2017 2016-M00253>>Se crea el procedimiento que evaluara si existe solicitudes en estado P
            select count(*)
              into vExistePendientes
            from di_Transaccion
           where cod_empresa=variables.codEmpresa
             and fec_transaccion=parametros.fec_ini
             and cod_estado='P'
             AND NUM_ASIENTO_INGRESO != 0;  --Se valida que se busque solo aquellos que tengan un numero de asiento
         exception
            when no_data_found then
                 vExistePendientes := 0;
            when others then
                 vMsjError := 'Error verificando existencia de Transacciones Pendientes: '||SQLERRM;
                 message(vMsjError);
                 BITACORA_CIERRES_ERROR(variables.fecha);
         end;
         if vExistePendientes > 0 then
            --vMsjError := 'Existen transacciones Pendientes de procesar.  Verifique.';
            --message(vMsjError);
            --BITACORA_CIERRES_ERROR(variables.fecha);
            --<<FACRUZ 13-01-2017 2016-M00253>>Se Crea este procedimiento de enviar correo al grupo de correo deseado cuando existe solicitudes de divisas en estado P
                vSubject:= 'Solicitudes en pendiente en el Cierre de Divisas'; 
                vTexto := '<style type="text/css">table {border-collapse: collapse;} td, th {border: 1px solid black;padding: 3px;}</style>';
                vTexto := vTexto || '<h3>'|| 'Solicitudes Pendientes que seran Anuladas en el Cierre de Divisas' || '</h3>';
                vTexto := vTexto || '<br><table><thead><tr><th>CODIGO AGENCIA</th><th>CODIGO TIPO MOVIMIENTO</th><th>NUMERO DOCUMENTO</th><th>NUMERO AUTORIZA</th><th>FECCHA TRANSACCION</th><th>CODIGO ESTADO</th><th>CODIGO MONEDA BASE</th><th>CODIGO MONEDA DESTINO</th><th>ORIGEN DESTINO</th><th>CODIGO USUARIO</th><th>MONTO TOTAL MOVIMIENTO</th><th>CODIGO CLIENTE</th><th>NOMBRE CLIENTE</th></tr></thead><tbody>';
                FOR i IN transacciones loop             
                    vTexto :=  vTexto || '<tr><td>'||i.COD_AGENCIA||'</td><td>'||i.COD_TIPOMOV||'</td><td>'||i.NUM_DOCUMENTO||'</td><td>'||i.NUM_AUTORIZA||'</td><td>'||i.FEC_TRANSACCION||'</td><td>'||i.COD_ESTADO||'</td><td>'||i.COD_MONEDA_BASE||'</td><td>'||i.COD_MONEDA_DESTINO||'</td><td>'||i.ORIGEN_DESTINO||'</td><td>'||i.COD_USUARIO||'</td><td>'||i.MONTO_TOTAL_MOV||'</td><td>'||i.COD_CLIENTE||'</td><td>'||i.NOM_CLIENTE||'</td></tr>';
                    ANULA_PENDIENTES(); -- FACRUZ 22-NOV-2016 se creo una funcion para anular las funciones Pendientes.
                    ANULA_PENDIENTECG(i.NUM_ASIENTO_INGRESO); -- FACRUZ 23-NOV-2016
                    ANULA_PENDIENTECG(i.NUM_ASIENTO_EGRESO); -- FACRUZ 17-ENE-2017  
                                    
                END LOOP;
                --vTexto :=  vTexto || '</tbody></table>';                
                --pa.send_mail_html(PA.PARAM.PARAMETRO_X_EMPRESA(variables.codEmpresa,'SERVIDOR_SMTP','PA')
                --,PA.PARAM.PARAMETRO_X_EMPRESA(variables.codEmpresa,'CORREO_SENDER','PA') 
                --,PA.PARAM.PARAMETRO_X_EMPRESA(variables.codEmpresa,'CIERRE_DIV_SOL_PENDI','PA')            
                --, vSubject
                --, vTexto);
         end if;
    EXCEPTION
         when others then
              mensaje('Error en Verifica Cierre: '||nvl(vmsjerror,sqlerrm));
              BITACORA_CIERRES_ERROR(variables.fecha);
              
    END Verifica_Cierre; 
    
    PROCEDURE ACT_LIMITES_CANALES_ELECT IS
    
    BEGIN
    
      UPDATE DI_PARAM_CANAL_ELECT
         SET ACUMULADO_DIA = 0
       WHERE cod_empresa    =    variables.codEmpresa
         and cod_moneda is not null
         and cod_tipomov is not null;

      IF SQL%ROWCOUNT = 0 THEN
          Mensaje('Error Actualizando en DI_PARAM_CANAL_ELECT');
          BITACORA_CIERRES_ERROR(variables.fecha);
      END IF;
      
    END ACT_LIMITES_CANALES_ELECT;
    
    PROCEDURE IncrementaCalendarios IS
       v_ultimo_habil_mes date;
       v_primer_dia_mes   date;
       v_tipo_cierre      varchar2(2):='D';
       vMensaje           varchar2(300);
       exError            exception;
    BEGIN
        
        select trunc(variables.fecha_sistema,'MM') 
        into v_primer_dia_mes  
        from dual;
        v_ultimo_habil_mes  := CALENDAR.Obtener_Ultimo_Habil_Mes(variables.codEmpresa,
                                                                 variables.codAgencia,
                                                                 v_primer_dia_mes);
        
      if  variables.fecha_sistema = v_ultimo_habil_mes then
           v_tipo_cierre  := 'M';
      end if;
      
      Cambia_Calendario_Agencias(variables.CodEmpresa,
                                 'DI',
                                 variables.codAgencia,
                                 variables.fecha_sistema,
                                 v_Tipo_cierre,
                                 variables.Usuario,
                                 VMensaje);
                                 
      if vMensaje is not null then
            raise exError;
      end if;
      
    EXCEPTION
       when exError then
            mensaje('Error actualizando calendarios: '||vMensaje);
            BITACORA_CIERRES_ERROR(variables.fecha);
       when others then
            mensaje('Error actualizando calendarios: '||sqlerrm);
            BITACORA_CIERRES_ERROR(variables.fecha);
    END IncrementaCalendarios;
    
    PROCEDURE Calcula_Monto_Acumulado_Clte_C(pFechaCierre  date) IS
    ------------------------------------------------------------------------------------------
    --                                                                                      --
    -- EFECTUA:                                                                             --
    --    Busca los clientes ceros (0) que han realizado transacciones entre la fecha de    --
    --    cierre y la cantidad de dias estableclidos en el parametro por empresa            --
    --    CLE_CERO_DIAS_CALC y los inserta en la tabla de clientes cero con montos acumulad --
    --    os por transacciones de cambio de divisas.                                        --
    --                                                                                      --
    -- REQUIERE:                                                                            --         
    --    N/A                                                                               --
    --                                                                                      --
    -- HISTORIA:                                                                            --
    --   FLARSEN 10/08/2011                                                                 --
    --   Creacion                                                                           --
    --                                                                                      --
    ------------------------------------------------------------------------------------------
  
  vEstado       Di_Maestro_Clte_cero.estado%type;
  vFechaBloqueo date := sysdate;
  vMontoLimite  number := to_number(PARAM.PARAMETRO_X_EMPRESA(variables.codempresa,'CLE_CERO_LIM_TRANSAC',variables.codsistema));
  vCantDiaCalc  number := to_number(PARAM.PARAMETRO_X_EMPRESA(variables.codempresa,'CLE_CERO_DIAS_CALC',variables.codsistema));
  vMonedaCalc   varchar2(5) := PARAM.PARAMETRO_X_EMPRESA(variables.codempresa,'CLE_CERO_MONEDA_MONT',variables.codsistema);
  --
  cursor datos is 
                    SELECT c.num_doc_referencia, c.cliente_ventanilla,
                       SUM(Monto_compras) + SUM(Monto_Ventas)  Monto_acumulado,
                       SUM(Monto_compras)+sum(nvl(Monto_Triangular,0)) monto_compras,
                         SUM(Monto_Ventas) Monto_Ventas,
                         sum(e2.Monto_Triangular) Monto_Triangular,
                        --kadames-excello 02/05/2023
                        --Inicio
                         SUM(Monto_compras_15) + SUM(Monto_Ventas_15)  Monto_acumulado_15,
                         SUM(Monto_compras_15)+sum(nvl(Monto_Triangular_15,0)) monto_compras_15,
                         SUM(Monto_Ventas_15) Monto_Ventas_15,
                         sum(e2.Monto_Triangular_15) Monto_Triangular_15,
                         --Fin
                         c.nombres, c.apellidos
                  FROM (       
                SELECT e.num_doc_referencia, e.cliente_ventanilla,
                        ROUND(DECODE(E.COD_TipoMov,'COMPRA',DECODE(e.cod_moneda_destino,vMonedaCalc,d.monto, d.monto * e.tipo_Cambio_destino),0),2) MONTO_COMPRAS,
                        0 MONTO_VENTAS, e.nombres, e.apellidos,
                        --kadames-excello 02/05/2023
                        --Inicio
                        CASE WHEN TRUNC(e.fec_transaccion) BETWEEN TRUNC(pFechaCierre) - 14 AND TRUNC(pFechaCierre) THEN
                            ROUND(DECODE(E.COD_TipoMov,'COMPRA',DECODE(e.cod_moneda_destino,vMonedaCalc,d.monto, d.monto * e.tipo_Cambio_destino),0),2)
                        ELSE
                        0 END MONTO_COMPRAS_15, 0 MONTO_VENTAS_15
                        --FIn
                  FROM di_transaccion_his e,
                       di_detalle_transaccion_his d
                 WHERE TRUNC(e.fec_transaccion) BETWEEN TRUNC(pFechaCierre) - (vCantDiaCalc - 1) AND TRUNC(pFechaCierre)
                   AND e.cod_estado = 'A'
                   AND e.cod_cliente = '0'
                   AND e.num_doc_triangular IS NULL
                   --
                   AND e.cod_empresa               = d.cod_Empresa
                   AND e.cod_agencia               = d.cod_agencia
                   AND e.num_documento             = d.num_documento
                   --
                   AND d.cod_tipomov               = 'COMPRA'
                   AND d.cod_tipo_detalle          = 'INGRESO'
                   --
                UNION
                SELECT e.num_doc_referencia, e.cliente_ventanilla,
                       0 MONTO_COMPRAS,
                          ROUND(DECODE(E.COD_TipoMov,'VENTA',DECODE(e.cod_moneda_destino,vMonedaCalc,d.monto, d.monto * e.tipo_Cambio_destino),0),2) MONTO_VENTAS,
                          e.nombres, e.apellidos,
                         --kadames-excello 02/05/2023
                        --Inicio
                          0,
                           CASE WHEN TRUNC(e.fec_transaccion) BETWEEN TRUNC(pFechaCierre) - 14 AND TRUNC(pFechaCierre) THEN
                            ROUND(DECODE(E.COD_TipoMov,'VENTA',DECODE(e.cod_moneda_destino,vMonedaCalc,d.monto, d.monto * e.tipo_Cambio_destino),0),2)
                        ELSE
                        0 END
                        --Fin
                  FROM di_transaccion_his e,
                       di_detalle_transaccion_his d
                 WHERE TRUNC(e.fec_transaccion) BETWEEN TRUNC(pFechaCierre) - (vCantDiaCalc - 1) AND TRUNC(pFechaCierre)
                   AND e.cod_estado = 'A'
                   AND e.cod_cliente = '0'
                   AND e.num_doc_triangular IS NULL
                   --
                   AND e.cod_empresa               = d.cod_Empresa
                   AND e.cod_agencia               = d.cod_agencia
                   AND e.num_documento             = d.num_documento
                   --
                   AND d.cod_tipomov               = 'VENTA'
                   AND d.cod_tipo_detalle          = 'EGRESO'
                   --
                  )  c,
                  (SELECT SUM(e1.monto_moneda_destino) Monto_Triangular,
                          e1.num_doc_referencia,
                         --kadames-excello 02/05/2023
                         --Inicio
                         SUM( CASE WHEN TRUNC(e1.fec_transaccion) BETWEEN TRUNC(pFechaCierre) - 14 AND TRUNC(pFechaCierre)
                         THEN
                         e1.monto_moneda_destino
                         ELSE
                         0
                         END
                         )Monto_Triangular_15
                         --Fin
                       FROM di_transaccion_his e1
                      WHERE TRUNC(e1.fec_transaccion) BETWEEN TRUNC(pFechaCierre) - (vCantDiaCalc - 1) AND TRUNC(pFechaCierre)
                      AND e1.num_doc_triangular        IS NOT NULL
                      AND e1.cod_moneda_destino        = vMonedaCalc
                    group by e1.num_doc_referencia
                         ) e2
       where e2.num_doc_referencia(+)       = c.num_doc_referencia
             GROUP BY c.num_doc_referencia, c.cliente_ventanilla, c.nombres, c.apellidos;
                
   function Clte_Cero_Bloqueado(pIdentificacionVentanilla di_maestro_Clte_cero.identificacion_ventanilla%type)
           return varchar2 is
         vDummy varchar2(1);
         begin
              select 'x' 
                into vDummy
                from DI_MAESTRO_CLTE_CERO
               where identificacion_ventanilla = pIdentificacionVentanilla;
              return('S');
         exception
              when no_data_found then
                return ('N');
              when too_many_rows then
                return ('S');
              when others then
                return 'S';
         end;
         
    BEGIN
        --
        DELETE DI_MAESTRO_CLTE_CERO where estado != 'B';
        --
      for x in datos loop
           if (Clte_Cero_Bloqueado(x.num_doc_referencia) = 'N') then
                if (nvl(x.Monto_Acumulado ,0) + nvl(x.Monto_Triangular,0) >= vMontoLimite) then
                      vEstado := 'B';
                      vFechaBloqueo := sysdate;
                else
                     vEstado := 'A';
                     vFechaBloqueo := to_date(null);
                end if;
                --
                insert into DI_MAESTRO_CLTE_CERO
                (   IDENTIFICACION_VENTANILLA ,
                        CLIENTE_VENTANILLA,
                        ESTADO   ,
                        MONTO_ACUMULADO ,
                        MONTO_COMPRAS   ,
                        MONTO_VENTAS ,
                        FECHA_BLOQUEO  ,
                        INCLUIDO_POR  ,
                        FECHA_INCLUSION  ,
                        MODIFICADO_POR  ,
                        FECHA_MODIFICACION ,
                        OBSERVACION   ,
                        NOMBRES  ,
                        APELLIDOS  ,
                         --kadames-excello 02/05/2023
                            --Inicio
                        MONTO_ACUMULADO_15   ,
                        MONTO_COMPRAS_15  ,
                        MONTO_VENTAS_15
                    --Fin
                    )
                values (x.num_doc_referencia,
                        x.Cliente_Ventanilla,
                        vEstado,
                        nvl(x.Monto_Acumulado ,0) + nvl(x.Monto_Triangular,0),
                        nvl(x.Monto_Compras ,0) + nvl(x.Monto_Triangular,0),
                        nvl(x.Monto_ventas,0),
                        vFechaBloqueo,
                        null,
                        to_date(null),
                        null,
                        to_date(null),
                        null,
                        x.nombres,
                        x.apellidos,
                        --kadames-excello 02/05/2023
                        --Inicio
                        nvl(x.Monto_Acumulado_15,0) + nvl(x.Monto_Triangular_15,0),
                        nvl(x.Monto_Compras_15 ,0) + nvl(x.Monto_Triangular_15,0),
                        nvl(x.Monto_ventas_15,0)
                        --Fin
                        );
                --
           end if;
      end loop;
      --:system.message_level := 25;
      --standard.commit;
      --:system.message_level := 0;
      
      COMMIT;
    END;
    
    PROCEDURE Pase_Historico_Movimientos IS
    --VBARRANTES FDS-1538 21/05/2023
    vFecha  DATE;    
    BEGIN
      --VBARRANTES FDS-1538 21/05/2023
      vFecha := pa.calendar.OBTENER_ANT_FEC_HABIL(variables.codEmpresa,
                                                  variables.codAgencia,
                                                 pa.calendar.fecha_actual_calendario('DI', variables.codEmpresa, variables.codAgencia)
                                                 );
      -- Se pasan los encabezados del diario al historico
      insert into di_transaccion_his
      select * from di_transaccion
      where cod_empresa = variables.codEmpresa
        and fec_transaccion <= vFecha; --VBARRANTES FDS-1538 21/05/2023
      -- Se pasan los detalles
      insert into di_detalle_transaccion_his
      select * from di_detalle_transaccion
      where cod_empresa = variables.codEmpresa
        and fec_transaccion <= vFecha; --VBARRANTES FDS-1538 21/05/2023
      -- Se borran los encabezados
      delete di_transaccion
      where cod_empresa = variables.codEmpresa
        and fec_transaccion <= vFecha; --VBARRANTES FDS-1538 21/05/2023;
      -- Se borran los detalles.
      delete di_detalle_transaccion
       where cod_empresa = variables.codEmpresa
         and fec_transaccion <= vFecha; --VBARRANTES FDS-1538 21/05/2023      
      -- Flarsen para limites Clientes Cero por acomulado en rango de fecha
      Calcula_Monto_Acumulado_Clte_C(parametros.fec_ini);
    EXCEPTION
        when others then
             ROLLBACK;
             mensaje('Error Pasando movimientos al hist√≥rico: '||sqlerrm);
             DBMS_OUTPUT.put_line ( SUBSTR ('PA.PKG_CIERRE_DIARIO_PA.PASE_HISTORICO_MOVIMIENTOS - Error insertando en tabla ' ||sqlerrm||dbms_utility.format_error_backtrace, 1, 2000)); -- NREGALADO Req.# 670380 10/06/2021
             BITACORA_CIERRES_ERROR(variables.fecha);
    END Pase_Historico_Movimientos;
    
    
    PROCEDURE Lleva_Info_Interfaz IS
        ORACONN VARCHAR2(50);
        SQLCONN VARCHAR2(50);
        vMoneda DI_TIPO_CAMBIO.COD_MONEDA_BASE%TYPE;
        vTasa   DI_TIPO_CAMBIO.MONTO_TIPO_CAMBIO%TYPE;
        vFecha  DI_TIPO_CAMBIO.FECHA_VIGENCIA%TYPE;
        vValida Boolean := true;
        
    BEGIN
    
      Begin
            select a.fecha_vigencia, b.moneda_iso, a.monto_tipo_cambio 
              into vFecha, vMoneda, vTasa
                from di_tipo_cambio a, moneda b
               where cod_empresa = '1'
                 and cod_moneda_base = '2'
                 and b.cod_moneda = a.cod_moneda_base
                 and cod_moneda_destino = '1'
                 and cod_forma_pago = 1
                 and tipo_operacion = 'VENTA'
                 and fecha_vigencia = (select max(fecha_vigencia)
                                         from di_tipo_cambio
                                        where cod_empresa = 1
                                          and cod_moneda_base = '2'
                                          and cod_moneda_destino = '1'
                                          and cod_forma_pago = 1
                                          and tipo_operacion = 'VENTA');
      Exception 
           when no_data_found Then
                Message('No se encontro la tasa del d√≠a para enviar a extreme');
                Message('No se encontro la tasa del d√≠a para enviar a extreme');
                vValida := false;
           when others then
                Message('Lleva_Info_Interfaz - Error buscando la tasa del d√≠a: '||sqlerrm);     
                Message('Lleva_Info_Interfaz - Error buscando la tasa del d√≠a: '||sqlerrm);
                vValida := false;
      End;
      --             
      If vValida Then
--              ORACONN :=  Get_Application_Property(USERNAME) || '/' || 
--                          Get_Application_Property(PASSWORD) || '@' || 
--                          Get_Application_Property(CONNECT_STRING);
                -- RCEBALLOS 16-09-2010 Busqueda de la clave de conexi√≥n a SQL Server encriptada
            BEGIN
               SELECT BASE_DATOS || '/' || USUARIO || '&' || PA.DESENCRIPTAR(CLAVE)
                 INTO SQLCONN
                 FROM INTERFACES_EXTERNAS_B2000
                WHERE COD_EMPRESA = variables.codEmpresa
                  AND COD_SISTEMA = 'BCC'
                  AND NOMBRE_PROGRAMA = 'ENVEXTREME';
            EXCEPTION
                 WHEN NO_DATA_FOUND THEN
                      SQLCONN := NULL;
            END;
              --SQLCONN := PA.PARAM.Parametro_x_Empresa(:VARIABLES.CODEMPRESA,  'CONEXION_BD_EXTREME', :VARIABLES.CODSISTEMA);
            
            IF LENGTH(SQLCONN) > 0 THEN                                                                                                                                                                                        
                --HOST('EnvioExtreme.exe CMD:PUT_TASA, ORA:' || ORACONN || ', SQL:' || SQLCONN || ', PAR:'||to_char(vFecha,'YYYY-MM-DD')||'/'||vMoneda||'/'||to_char(vTasa));
                null;                             
            ELSE
                MESSAGE('No se ha definido el par√°metro CONEXION_BD_EXTREME' ); MESSAGE(' ');
            END IF;
            
      End If;
                       
    END Lleva_Info_Interfaz;
	---INICIO desantiago 16/04/2025 IPF-5315, procedimiento creado para generar el asiento de contingencia y reverso
    PROCEDURE RegistraErrorAutorizacion(pNumAutorizacion    in number, 
                                        pCodMonedaDes       in number,
                                        pCodAgencia         in number,
                                        pNumAsiento         in number,
                                        pMsjError           in varchar2
                                        )IS
    BEGIN
    
        insert into BITACORA_ERROR_AUTORIZACION(NUM_AUTORIZACION,COD_MONEDA_DES,COD_AGENCIA,NUM_ASIENTO,AGENCIA_CIERRE,COD_EMPRESA_CIERRE,
                                                TXT_ERROR,FECHA_ADICION,USUARIO_ADICION)
                                    values(pNumAutorizacion,pCodMonedaDes,pCodAgencia,pNumAsiento,variables.codAgencia,variables.codEmpresa,
                                            pMsjError,sysdate,variables.usuario);
                                    
        commit;
        
    EXCEPTION   
        when others then
            mensaje('RegistraErrorAutorizacion: '||sqlerrm);
            BITACORA_CIERRES_ERROR(variables.fecha);
    END RegistraErrorAutorizacion;
    
    PROCEDURE GeneraAsiento(pNumAutorizacion    in number,
                            pCodSubAplicacion   in number,
                            pCodTransaccion     in number,
                            pCodSubTransaccion  in number,
                            pDesAsiento     in varchar2,
                            pConcepto1      in varchar2,
                            pConcepto2      in varchar2,
                            pMonto          in number,
                            pInd_DC         in varchar2,
                            pInd_DC2        in varchar2,
                            pTasa           in number,
                            pCodAgencia     in number,
                            pCodMonedaDes   in number,
                            pNumAsiento     out number
                        ) IS
    
    ---Variables---------    
    v_tc1   number(15,8) := 1;
    v_tc2   number(15,8) := pTasa;
    
    vCuenta1    varchar2(25);
    vCuenta2    varchar2(25);
    vNumAsiento number;
    vDifAsiento number(12,2) := 0;
    vUnidadTesoreria    number;
    --
    vMsjError   varchar2(300) := null; -- Mensaje de error
    exError     exception;
    BEGIN
        vUnidadTesoreria := param.Parametro_x_Empresa(variables.codEmpresa,'UNIDAD_TESORERIA','DI');

        begin
            select num_cuenta
              into vCuenta1
              from di_cuenta_x_concepto
             where cod_empresa = variables.codEmpresa
               and cod_agencia = variables.codAgencia
               and cod_moneda = pCodMonedaDes
               and concepto = pConcepto1;
        exception
            when no_data_found then
                vMsjError := 'No se ha paremetrizado la cuenta para el concepto '||pConcepto1;
                raise exError;
            when others then
                vMsjError := 'Error buscando la cuenta para el concepto '||pConcepto1||': '||sqlerrm;
                raise exError; 
        end;
        
        begin   
            select num_cuenta
              into vCuenta2
              from di_cuenta_x_concepto
             where cod_empresa = variables.codEmpresa
               and cod_agencia = variables.codAgencia
               and cod_moneda = pCodMonedaDes
               and concepto = pConcepto2;
        exception
            when no_data_found then
                vMsjError := 'No se ha paremetrizado la cuenta para el concepto '||pConcepto2;
                raise exError;
            when others then
                vMsjError := 'Error buscando la cuenta para el concepto '||pConcepto2||': '||sqlerrm;
                raise exError; 
        end;
        
        -- Se genera la caratula del asiento
        CG_UTL.Caratula_del_Asiento(variables.codempresa,
                                    variables.codagencia,
                                    'BDI',
                                    pCodSubAplicacion,
                                    pCodTransaccion,
                                    pCodSubTransaccion,
                                    pNumAutorizacion,
                                    pDesAsiento,
                                    variables.fecha_sistema,
                                    variables.fecha_sistema,
                                    vNumAsiento,
                                    variables.usuario,
                                    vMsjError);
        
        if vMsjError is not null then
            raise exError;
        else 
            pNumAsiento := vNumAsiento;
        End if;

        -- Genera la primera linea del asiento contable
        CG_UTL.Lineas_Del_Asiento(variables.codempresa,
                                  pCodAgencia,
                                  'BDI',
                                  pCodSubAplicacion,
                                  pCodTransaccion,
                                  pCodSubTransaccion,
                                  '0',
                                  pDesAsiento,
                                  variables.fecha_sistema,
                                  variables.fecha_sistema,
                                  variables.fecha_sistema,
                                  vNumAsiento,
                                  vCuenta1,
                                  vUnidadTesoreria,
                                  pMonto,
                                  'N',
                                  pInd_DC,
                                  'N',
                                  v_tc1, --tasa cambio1
                                  v_tc2, --tasa cambio2
                                  variables.Usuario,
                                  vMsjError);
        
            If (vMsjError is not null) then
                raise exError;
            End if;
        
        -- Genera la segunda linea del asiento contable
        CG_UTL.Lineas_Del_Asiento(variables.codempresa,
                                  pCodAgencia,
                                  'BDI',
                                  pCodSubAplicacion,
                                  pCodTransaccion,
                                  pCodSubTransaccion,
                                  '0',
                                  pDesAsiento,
                                  variables.fecha_sistema,
                                  variables.fecha_sistema,
                                  variables.fecha_sistema,
                                  vNumAsiento,
                                  vCuenta2,
                                  vUnidadTesoreria,
                                  pMonto,
                                  'N',
                                  pInd_DC2,
                                  'N',
                                  v_tc1, --tasa cambio1
                                  v_tc2, --tasa cambio2
                                  variables.Usuario,
                                  vMsjError);
        
        If (vMsjError is not null) then
            raise exError;
        End if;
    
        CG_UTL.Cuadre_Asiento(variables.codEmpresa,
                              variables.fecha_sistema,
                              vNumAsiento,
                              vDifAsiento,
                              vMsjError);
        
        if vMsjError is not null then
            raise exError;
        end if;
    
    exception
        when exError then
            mensaje('GeneraDatosContingencia:GeneraAsiento: '||vMsjError);
            BITACORA_CIERRES_ERROR(variables.fecha);
            RegistraErrorAutorizacion(pNumAutorizacion  => pNumAutorizacion, 
                                        pCodMonedaDes   => pCodMonedaDes,
                                        pCodAgencia     => pCodAgencia,
                                        pNumAsiento     => vNumAsiento,
                                        pMsjError       => 'GeneraDatosContingencia:GeneraAsiento: '||vMsjError);
        when others then
            mensaje('Ocurri√≥ error en GeneraDatosContingencia:GeneraAsiento: '||sqlerrm);
            BITACORA_CIERRES_ERROR(variables.fecha);
            RegistraErrorAutorizacion(pNumAutorizacion  => pNumAutorizacion, 
                                        pCodMonedaDes   => pCodMonedaDes,
                                        pCodAgencia     => pCodAgencia,
                                        pNumAsiento     => vNumAsiento,
                                        pMsjError       => 'Error en GeneraDatosContingencia:GeneraAsiento: '||vMsjError);
    END GeneraAsiento;

    PROCEDURE GeneraDatosContingencia IS
        cursor datos(pcontrato varchar2) is
            select a.num_autorizacion,a.cod_tipomov,a.tip_contrato,st.sub_tip_contrato,a.cod_moneda_destino,a.monto_total_mov,a.monto_tipocambio_dest,
                    a.fecha_autorizacion,a.cod_agencia,a.cod_estado,a.asiento_contingencia,a.asiento_reverso
              from di_autorizacion a, di_sub_tip_contrato st
             where a.cod_empresa = variables.codEmpresa
               --and ((a.cod_estado = 'P' and nvl(a.asiento_contingencia,0) = 0) --desantiago 19/08/2025 IPF-5315, cambio de condicion solo se toma en cuenta las operaciones pediente sin asiento del dia
			   and ((a.cod_estado = 'P' and nvl(a.asiento_contingencia,0) = 0 and a.fecha_autorizacion = variables.Fec_Hoy)--desantiago 19/08/2025 IPF-5315, cambio de condicion solo se toma en cuenta las operaciones pediente sin asiento del dia
                    or (nvl(a.asiento_contingencia,0) != 0 and nvl(a.asiento_reverso,0) = 0)
                )
               and instr(','||pcontrato||',',','||a.tip_contrato||',') > 0
               and st.cod_tip_contrato = a.tip_contrato 
               and st.codigo = a.sub_tip_contrato;       

                
        ---Variables-----    
        vContratoSpot   varchar2(80);
        vDiaHabil       number; 
        vCodSubAplicacion   number;
        vCodTransaccion     number;
        vCodSubTransaccion  number;
        vDesAsiento     varchar2(100);
        vInd_DC         varchar2(1);
        vInd_DC2        varchar2(1);
        vTipContrato    varchar2(100); --definida para concatenar todos los tipo de contratos que aplican
        vConcepto1      varchar2(20);
        vConcepto2      varchar2(20);
        vNumAsiento     number;
		vExisteLiquidacion number := 0;
		vAplicaRevero varchar2(1) := 'N';
        ---
        vMsjError   varchar2(1000);
        exError     exception;
        exError2    exception;
    BEGIN
        vContratoSpot := param.Parametro_x_Empresa(variables.codEmpresa,'AUTORIZACION_SPOT','DI');
        vTipContrato := vContratoSpot;
        
        for dat in datos(vTipContrato) loop
        begin --begin colocado para manejar las exciones dentro del loop si detenerlo
            vNumAsiento := null;
			vAplicaRevero := 'N';
			begin    
                select CODIGO_SUB_APLICACION
                  into vCodSubAplicacion
                  from SUB_APLICACIONES
                 where CODIGO_APLICACION = 'BDI'
                   and codigo_moneda = dat.cod_moneda_destino;
                   
            exception
                when no_data_found then
                    vMsjError := 'Debe parametrizar codigo sub aplicacion para la codigo moneda: '||dat.cod_moneda_destino;
                    raise exError;
                when others then
                    vMsjError := 'Error buscando codigo sub aplicacion. '||sqlerrm;
                    raise exError;
            end;
                        
            if dat.cod_tipomov = 'VENTA' then
                vCodTransaccion := to_number(param.Parametro_x_Empresa(variables.codEmpresa,'CODTRANS_OP_VNT','DI'));
            else
                vCodTransaccion := to_number(param.Parametro_x_Empresa(variables.codEmpresa,'CODTRANS_OP_CMP','DI'));
            end if;

            --llena variables para las spot
            if instr(','||vContratoSpot||',',','||dat.tip_contrato||',') > 0 then
                vDiaHabil := to_number(param.Parametro_x_Empresa(variables.codEmpresa,'DIA_VENCE_SPOT','DI'));
                vDesAsiento := 'Operaci√≥n contado divisas '||dat.num_autorizacion;
                
                if dat.cod_tipomov = 'VENTA' then
                    vConcepto1 := 'VNTSPOTCON';
                    vConcepto2 := 'VNTSPOTREV';
                    vCodSubTransaccion := to_number(param.Parametro_x_Empresa(variables.codEmpresa,'SUBTRANS_VNT_SPOT','DI'));
                else
                    vConcepto1 := 'CMPSPOTCON';
                    vConcepto2 := 'CMPSPOTREV';
                    vCodSubTransaccion := to_number(param.Parametro_x_Empresa(variables.codEmpresa,'SUBTRANS_CMP_SPOT','DI'));
                end if;
				
				--indica si aplica reverso por vencimiento 
				if (CASE WHEN CALENDAR.DIAS_HABILES_ENTRE_FECHAS(variables.codEmpresa,variables.codagencia,
                                                            dat.fecha_autorizacion,dat.fecha_autorizacion + 2) = vDiaHabil THEN 
                          dat.fecha_autorizacion + 2
                     WHEN CALENDAR.DIAS_HABILES_ENTRE_FECHAS(variables.codEmpresa,variables.codagencia,
                                                             dat.fecha_autorizacion,dat.fecha_autorizacion + 3) = vDiaHabil THEN 
                          dat.fecha_autorizacion + 3
                     WHEN CALENDAR.DIAS_HABILES_ENTRE_FECHAS(variables.codEmpresa,variables.codagencia,
                                                             dat.fecha_autorizacion,dat.fecha_autorizacion + 4) = vDiaHabil THEN 
                          dat.fecha_autorizacion + 4
                END) = variables.Fec_Hoy then
                    vAplicaRevero := 'S';
                else 
                    vAplicaRevero := 'N';
                end if;
            end if;
            ---
            --Registra asiento de contingencia
            if dat.cod_estado = 'P' and nvl(dat.asiento_contingencia,0) = 0 then
                vInd_DC := 'D'; --se hace un debito para el asiento de contingencia
                vInd_DC2 := 'C';
 
                GeneraAsiento(dat.num_autorizacion,
                              vCodSubAplicacion,
                              vCodTransaccion,
                              vCodSubTransaccion,
                              vDesAsiento,
                              vConcepto1,
                              vConcepto2,
                              dat.monto_total_mov,
                              vInd_DC,
                              vInd_DC2,
                              dat.monto_tipocambio_dest,
                              dat.cod_agencia,
                              dat.cod_moneda_destino,
                              vNumAsiento);
                
               --Asigna asiento contingencia  
                BEGIN
                    update di_autorizacion set 
                        asiento_contingencia = vNumAsiento
                     where cod_empresa = variables.codEmpresa
                       and num_autorizacion = dat.num_autorizacion;
                EXCEPTION
                     when others then
                          vMsjError := 'Error asignando asiento de contingencia en la Autorizacion: '||sqlerrm;
                          raise exError;
                END;                                   
            end if;
            
            
            --Registra asiento de reversa 
			vExisteLiquidacion := 0;
            select count(*) 
              into vExisteLiquidacion
              from di_transaccion
             where NUM_AUTORIZA = dat.num_autorizacion;
			 
            if nvl(dat.asiento_contingencia,0) != 0 and (dat.cod_estado != 'P' or vExisteLiquidacion > 0 or vAplicaRevero = 'S') then
                --
                vInd_DC := 'C'; 
                vInd_DC2 := 'D'; --se hace un debito para reversar el asiento de contingencia

                GeneraAsiento(dat.num_autorizacion,
                              vCodSubAplicacion,
                              vCodTransaccion,
                              vCodSubTransaccion,
                              vDesAsiento,
                              vConcepto1,
                              vConcepto2,
                              dat.monto_total_mov,
                              vInd_DC,
                              vInd_DC2,
                              dat.monto_tipocambio_dest,
                              dat.cod_agencia,
                              dat.cod_moneda_destino,
                              vNumAsiento);
                
                --Anula autorizacion 
                if vAplicaRevero = 'S' and vExisteLiquidacion = 0 then 
                    BEGIN
                        update di_autorizacion set 
                            cod_estado = 'N',
                            asiento_reverso = vNumAsiento
                         where cod_empresa = variables.codEmpresa
                           and num_autorizacion = dat.num_autorizacion;
                    EXCEPTION
                         when others then
                              vMsjError := 'Error anulando la autorizacion : '||sqlerrm;
                              raise exError;
                    END;
                else 
                    BEGIN
                        update di_autorizacion set 
                            asiento_reverso = vNumAsiento
                         where cod_empresa = variables.codEmpresa
                           and num_autorizacion = dat.num_autorizacion;
                    EXCEPTION
                         when others then
                              vMsjError := 'Error asignando numero de asiento de reverso en la autorizacion : '||sqlerrm;
                              raise exError;
                    END;
                end if;
                ---
            end if;
        
        exception 
            when exError then
            mensaje('GeneraDatosContingencia:'||vMsjError);
            BITACORA_CIERRES_ERROR(variables.fecha);
            RegistraErrorAutorizacion(pNumAutorizacion  => dat.num_autorizacion, 
                                      pCodMonedaDes   => dat.cod_moneda_destino,
                                      pCodAgencia     => dat.cod_agencia,
                                      pNumAsiento     => vNumAsiento,
                                      pMsjError       => 'GeneraDatosContingencia: '||vMsjError);
        end;       
        end loop;

    exception
        when exError2 then
            mensaje('GeneraDatosContingencia: '||sqlerrm);
            BITACORA_CIERRES_ERROR(variables.fecha);
        when others then
            mensaje('Ocurri√≥ error en GeneraDatosContingencia: '||sqlerrm);        
            BITACORA_CIERRES_ERROR(variables.fecha);
    
    END GeneraDatosContingencia;
    ---FIN desantiago 16/04/2025 IPF-5315
 
    /* -------------------------------------------------------------------- */
    /* DESCRIPCION: CIERRE DIARIO DE DI                                    */
   /* -------------------------------------------------------------------- */
   PROCEDURE CIERRE_DIARIO_DI IS

       -- Declaracion de Variables de Trabajo.
       vNivel          Number(3);
       vMsjError       Varchar2(300) := Null;
       vSqlError       Varchar2(300) := Null; 
       vProcName       VARCHAR2(80)  := 'CIERRE_DIARIO_DI';
       
       l_rindex_g      PLS_INTEGER := DBMS_APPLICATION_INFO.set_session_longops_nohint;
       l_slno_g        PLS_INTEGER;
       pTarget         PLS_INTEGER;

   BEGIN
    
       Job.Ejecuta := 'JOB_CIERRE_DIARIO_DI';
       IniVarGlobalesLocales('DICIERRE');
       BInicio (vProcName);
       
       /*Proceso que realiza un MLD con el Incoming
          recibido de ITC.*/
        --<<ContabilizacionAutomatizaUBER>>--
        --<<201706A027||RFELIZ||21MAYO2018>>--
       DI.DI_CREA_MLD_INCOMING_TC(USER);
      
       DBMS_APPLICATION_INFO.set_session_longops (
                         rindex        => l_rindex_g,
                         slno          => l_slno_g,
                         op_name       => Job.Ejecuta,
                         target        => pTarget,
                         context       => 0,
                         sofar         => 1,
                         --totalwork     => 6, --desantiago 21/04/2025 IPF-5315, se cambio el numero
						 totalwork     => 7, --desantiago 21/04/2025 IPF-5315, se cambio el numero
                         target_desc   => 'Procesando  ...',
                         units         => 'rows');
         
       --BITACORA_CIERRES
       BITACORA_CIERRES_INICIO (variables.FEC_HOY);

       if (parametros.cod_empresa is not null) and
          (parametros.cod_agencia is not null) and 
          (parametros.fec_ini     is not null) then
             
           -- se verifica si ya se hizo el cierre.
           Verifica_Cierre;
            
         DBMS_APPLICATION_INFO.set_session_longops (
                         rindex        => l_rindex_g,
                         slno          => l_slno_g,
                         op_name       => Job.Ejecuta,
                         target        => pTarget,
                         context       => 0,
                         sofar         => 2,
                         --totalwork     => 6, --desantiago 21/04/2025 IPF-5315, se cambio el numero
						 totalwork     => 7, --desantiago 21/04/2025 IPF-5315, se cambio el numero
                         target_desc   => 'Procesando  ...',
                         units         => 'rows');
                         
            GeneraDatosPosicion;                         
         
         DBMS_APPLICATION_INFO.set_session_longops (
                         rindex        => l_rindex_g,
                         slno          => l_slno_g,
                         op_name       => Job.Ejecuta,
                         target        => pTarget,
                         context       => 0,
                         sofar         => 3,
                         --totalwork     => 6, --desantiago 21/04/2025 IPF-5315, se cambio el numero
						 totalwork     => 7, --desantiago 21/04/2025 IPF-5315, se cambio el numero
                         target_desc   => 'Procesando  ...',
                         units         => 'rows');
                         
            Act_Limites_Canales_Elect;                         
         
         DBMS_APPLICATION_INFO.set_session_longops (
                         rindex        => l_rindex_g,
                         slno          => l_slno_g,
                         op_name       => Job.Ejecuta,
                         target        => pTarget,
                         context       => 0,
                         sofar         => 4,
                         --totalwork     => 6, --desantiago 21/04/2025 IPF-5315, se cambio el numero
						 totalwork     => 7, --desantiago 21/04/2025 IPF-5315, se cambio el numero
                         target_desc   => 'Procesando  ...',
                         units         => 'rows');
        
		---INICIO desantiago 21/04/2025 IPF-5315, se agrgeo para generar el asiento de contingencia y el reverso
             GeneraDatosContingencia;
                                    
         DBMS_APPLICATION_INFO.set_session_longops (
                         rindex        => l_rindex_g,
                         slno          => l_slno_g,
                         op_name       => Job.Ejecuta,
                         target        => pTarget,
                         context       => 0,
                         sofar         => 5,
                         totalwork     => 7,
                         target_desc   => 'Procesando  ...',
                         units         => 'rows'); 
        ---FIN desantiago 21/04/2025 IPF-5315
		
            IncrementaCalendarios;      
            
         DBMS_APPLICATION_INFO.set_session_longops (
                         rindex        => l_rindex_g,
                         slno          => l_slno_g,
                         op_name       => Job.Ejecuta,
                         target        => pTarget,
                         context       => 0,
                         --sofar         => 5,--desantiago 21/04/2025 IPF-5315, se cambio el numero
                         sofar         => 6,--desantiago 21/04/2025 IPF-5315, se cambio el numero
                         --totalwork     => 6, --desantiago 21/04/2025 IPF-5315, se cambio el numero
						 totalwork     => 7, --desantiago 21/04/2025 IPF-5315, se cambio el numero
                         target_desc   => 'Procesando  ...',
                         units         => 'rows');
                        
             Pase_Historico_Movimientos;
                                    
         DBMS_APPLICATION_INFO.set_session_longops (
                         rindex        => l_rindex_g,
                         slno          => l_slno_g,
                         op_name       => Job.Ejecuta,
                         target        => pTarget,
                         context       => 0,
                         --sofar         => 6,--desantiago 21/04/2025 IPF-5315, se cambio el numero
                         sofar         => 7,--desantiago 21/04/2025 IPF-5315, se cambio el numero
                         --totalwork     => 6, --desantiago 21/04/2025 IPF-5315, se cambio el numero
						 totalwork     => 7, --desantiago 21/04/2025 IPF-5315, se cambio el numero
                         target_desc   => 'Procesando  ...',
                         units         => 'rows');                                                        
            
            /*Se comenta este proceso por sugerencia de Moises Figueroa hasta que se resuelva la ejecucion
            del servicio "EnvioExtreme" en base de datos ya que de igual forma no funciona en 6I*/
            --Lleva_Info_Interfaz;
          commit;
       
       Else
          ROLLBACK;
          MESSAGE('ERROR: '||'El cierre no se pudo efectuar exitosamente.');
          BITACORA_CIERRES_ERROR(VARIABLES.FEC_HOY); 
                                
       End If;         
       
       --BITACORA_CIERRES
       BITACORA_CIERRES_FIN(variables.fec_hoy);
       BFinal (vProcName);
       
   EXCEPTION
     WHEN OTHERS THEN 
        ROLLBACK;
        MESSAGE('ERROR: '||SQLCODE||'-'||SQLERRM);
        BITACORA_CIERRES_ERROR(VARIABLES.FEC_HOY);       
       
   END CIERRE_DIARIO_DI;
   
   PROCEDURE Rechaza_sol_pend_traslados IS
   BEGIN
        --
        UPDATE cj.bcj_solicitud_efectivo
           SET estado             = 'X',
               rechazado_por      = VARIABLES.usuario,
               fecha_rechazo      = VARIABLES.fecha_cal
         WHERE cod_empresa        = VARIABLES.codempresa
           and fecha_solicitud    = VARIABLES.fecha_cal
           and estado             in ('S','A');
        --
   END Rechaza_sol_pend_traslados;
   
   PROCEDURE TRANSACCIONES is
          DUMMY         VARCHAR2(1);
          TRANSA        exception;
     Cursor pendientes is
                  select a.codigo_cajero, c.nombre nom_caj,
                         count(a.codigo_cajero) total
                  from   BCJ_MOVIMIENTO_DIARIO_ENCA a,
                         BCJ_CAJEROS b,
                         PA.USUARIOS_DEL_SISTEMA_B2000 c
                  where  a.CODIGO_EMPRESA = VARIABLES.CODEMPRESA
                  and    a.CODIGO_TRANSACCION < 53
                  and    a.FECHA_MOVIMIENTO <= VARIABLES.FECHA_CAL
                  and    a.CODIGO_CAJERO = B.CODIGO_CAJERO
                  and    b.CODIGO_USUARIO = C.CODIGO_USUARIO
                  and    codigo_Estado_movimiento != 'N'
                  and      b.tipo_cajero <> 'A'    -- No incluye los ATMs, pues estas son pasadas al historico en la proxima funcion
                  group by a.codigo_cajero, c.nombre ;
                  
    begin
    
       DUMMY := null;
       for pen in pendientes loop
           if pen.total > 0
           then
               DUMMY := 'X';
               UTILITARIOS.MENSAJE ('000352', variables.codidioma, 'CJ', NULL, 'Usuario :' || pen.codigo_cajero || ' Nombre de Usuario : ' || pen.nom_caj); --EnFrancisco : 05/08/2011 : se puso para que fuera mas legible el mensaje.
               MESSAGE('Atencion: Transacciones pendientes del cajero: '||'Usuario :' || pen.codigo_cajero || ' Nombre de Usuario : ' || pen.nom_caj);
               BITACORA_CIERRES_ERROR(VARIABLES.FECHA_CAL);
           end if;
       end loop;
       if DUMMY in ('X')
       then
           Rollback;
           vExit := TRUE;--<<RFELIZ>>--Salimos del proceso
           --exit_form(no_commit);
       end if;
       
    exception
         when NO_DATA_FOUND then
              DUMMY := NULL;
         when TOO_MANY_ROWS or TRANSA THEN
              UTILITARIOS.MENSAJE ('000349', variables.codidioma, 'CJ', NULL, '!! No puede Efectuar el Cierre Existen Transacciones'||' Pendientes !!'); --EnFrancisco : 05/08/2011 : se puso para que fuera mas legible el mensaje.
              Mensaje('!! No puede Efectuar el Cierre Existen Transacciones'||' Pendientes !!');
              BITACORA_CIERRES_ERROR(VARIABLES.FECHA_CAL);
              --mensaje('!! No puede Efectuar el Cierre Existen Transacciones'||' Pendientes !!');
              Rollback;
              --exit_form(no_commit);
         when OTHERS then
              UTILITARIOS.MENSAJE ('000275', variables.codidioma, 'CJ', NULL, sqlerrm); --EBlanco: 21-09-2011: Se cambio el mesaje de error para mostrar el texto y no el codigo
              Mensaje(sqlerrm);
              BITACORA_CIERRES_ERROR(VARIABLES.FECHA_CAL);
              --mensaje('1.Error # '||to_char(SQLCODE)||' Cominicarlo');
              Rollback;
              --exit_form(no_commit);
    end TRANSACCIONES;
    
   PROCEDURE ACTUALIZA_SALDOS_ATMs is
          
          DUMMY          VARCHAR2(1);
          SALDO          exception;
          ACT_SALDO      exception;
          --
           
           --HJORGE 16/07/2009 - Buscar el Monto Total por cada ATM segun la fecha a la que este el calendario de CJ 
           -- Los codigos de transaccion a tomar en cuenta en este proceso son 1,2,3,51,52,53 y 54.
           --  1 - Sobrante. 2 - Faltante. 3- Traslado(credito). 11 - Traslado(Debito).51 - Reverso BSC. 52 - Reverso NO BSC. 53 - Retiro BSC. 54  - Retiro NO BSC. 
           cursor cTrans_dia(pCodCajero varchar2) is 
            select 
                  SUM(decode(c.tip_movimiento,'C',b.monto_movimiento,'D',b.monto_movimiento * -1)) monto                
                from  BCJ_CAJEROS A, bcj_movimiento_diario_enca B, CAT_TIP_TRANSAC C
                where a.codigo_cajero = pCodCajero  
                and a.codigo_cajero = b.codigo_cajero
                and a.tipo_cajero = 'A'
                and b.codigo_estado_movimiento = 'A'
                and fecha_movimiento <= trunc(VARIABLES.FECHA_CAL)
                and b.codigo_transaccion = c.TIP_TRANSACCION
                --and b.codigo_transaccion = c.sigla
                and c.cod_sistema = 'CJ'
                group by b.codigo_cajero,b.fecha_movimiento;        
                
           CURSOR Atms_Sal_Dia(pCodCajero varchar2, pMoneda varchar2, pCodAgencia varchar2) is  -- API 2404/2018: pCodAgencia
                     select
                           C.CODIGO_EMPRESA, 
                                        C.CODIGO_AGENCIA, 
                                        C.CODIGO_CAJERO, 
                                        C.CODIGO_MONEDA, 
                                        c.FECHA_CIERRE,
                                        C.SALDO_IDEAL, 
                                        C.SALDO_INICIAL_EFECTIVO, 
                                        C.SALDO_INICIAL_DOCUMENTO, 
                                        C.SALDO_ACTUAL_EFECTIVO, 
                                        C.SALDO_ACTUAL_DOCUMENTO, 
                                        C.ADICIONADO_POR, 
                                        C.MODIFICADO_POR, 
                                        C.FECHA_ADICION, 
                                        C.FECHA_MODIFICACION, 
                                        C.DENOMINACION_2000, 
                                        C.DENOMINACION_1000, 
                                        C.DENOMINACION_500, 
                                        C.DENOMINACION_200, 
                                        C.DENOMINACION_100, 
                                        C.DENOMINACION_50, 
                                        C.DENOMINACION_25,
                                        C.DENOMINACION_20, 
                                        C.DENOMINACION_10, 
                                        C.DENOMINACION_5, 
                                        C.DENOMINACION_1, 
                                        C.MONEDAS, 
                                        C.DENOMINACION_2
                            from  BCJ_CAJEROS A, BCJ_CAJEROS_EMPRESA B, BCJ_CAJA_SALDOS_DIARIOS C
                            where B.CODIGO_EMPRESA = VARIABLES.CODEMPRESA
                            and    A.TIPO_CAJERO = 'A'        -- ATMS
                            and A.CODIGO_CAJERO = B.CODIGO_CAJERO
                            and B.CODIGO_EMPRESA = C.CODIGO_EMPRESA
                            and    B.CODIGO_CAJERO = C.CODIGO_CAJERO
                            AND C.FECHA_CIERRE = pa.calendar.OBTENER_ANT_FEC_HABIL(VARIABLES.CODEMPRESA,VARIABLES.CODAGENCIA,trunc(VARIABLES.FECHA_CAL))
                            AND C.CODIGO_CAJERO = pCodCajero
                            AND C.CODIGO_MONEDA = pMoneda
                            AND C.CODIGO_AGENCIA = pCodAgencia;  -- API 24042018 Filtrar por la agencia en la que existan saldos
                   -- --
          CURSOR Atms is
          select C.CODIGO_EMPRESA,                 C.CODIGO_AGENCIA, 
                                C.CODIGO_CAJERO, 
                                C.CODIGO_MONEDA, 
                                C.SALDO_IDEAL, 
                                C.SALDO_INICIAL_EFECTIVO, 
                                C.SALDO_INICIAL_DOCUMENTO, 
                                C.SALDO_ACTUAL_EFECTIVO, 
                                C.SALDO_ACTUAL_DOCUMENTO, 
                                C.ADICIONADO_POR, 
                                C.MODIFICADO_POR, 
                                C.FECHA_ADICION, 
                                C.FECHA_MODIFICACION, 
                                C.DENOMINACION_2000, 
                                C.DENOMINACION_1000, 
                                C.DENOMINACION_500, 
                                C.DENOMINACION_200, 
                                C.DENOMINACION_100, 
                                C.DENOMINACION_50, 
                                C.DENOMINACION_25, -- RMARTINEZ 22/03/2006
                                C.DENOMINACION_20, 
                                C.DENOMINACION_10, 
                                C.DENOMINACION_5, 
                                C.DENOMINACION_1, 
                                C.MONEDAS, 
                                C.DENOMINACION_2
           from   BCJ_CAJEROS A, BCJ_CAJEROS_EMPRESA B, BCJ_CAJA_SALDOS_EXISTENTES C
           where  B.CODIGO_EMPRESA = VARIABLES.CODEMPRESA
           and    A.TIPO_CAJERO = 'A'        -- ATMs
                   and     A.CODIGO_CAJERO = B.CODIGO_CAJERO
                   and  B.CODIGO_EMPRESA = C.CODIGO_EMPRESA
                   and    B.CODIGO_CAJERO = C.CODIGO_CAJERO
                   order by C.CODIGO_CAJERO;
                   
        vTotalDenominacion number;
        vMontoDeducir number;
        
    begin                      
       --
        FOR i in ATMs LOOP    
                          
            -- Buscar el Saldo que corresponde al dia de cierre                
            IF i.codigo_moneda <> '2' THEN
                    OPEN cTrans_dia(i.codigo_cajero);
                    FETCH cTrans_dia into vMontoDeducir;                    
                    IF cTrans_dia%NOTFOUND THEN
                        vMontoDeducir := 0;
                    END IF;    
                    CLOSE cTrans_dia;
            END IF;         
                        
            -- Buscar los datos del dia anterior para el atm correspondiente.               
            FOR x in Atms_Sal_Dia(i.codigo_cajero, i.codigo_moneda, i.codigo_agencia) LOOP     -- API 24042018 Filtrar por la agencia en la que existan saldos               
                          
              -- Insertar el Nuevo Registro correspondiente al dia que se esta cerrando [:VARIABLES.FECHA_CAL].          
               Begin        
                       insert into BCJ_CAJA_SALDOS_DIARIOS
                       (CODIGO_EMPRESA,
                        CODIGO_AGENCIA,
                        CODIGO_CAJERO,
                        CODIGO_MONEDA,
                        FECHA_CIERRE,
                        SALDO_INICIAL_EFECTIVO,
                        SALDO_INICIAL_DOCUMENTO,
                        SALDO_IDEAL,
                        SALDO_ACTUAL_EFECTIVO,
                        SALDO_ACTUAL_DOCUMENTO,
                        ADICIONADO_POR,
                        MODIFICADO_POR,
                        FECHA_ADICION,
                        FECHA_MODIFICACION,
                        DENOMINACION_2000,
                        DENOMINACION_1000,
                        DENOMINACION_500,
                        DENOMINACION_200,
                        DENOMINACION_100,
                        DENOMINACION_50,
                        DENOMINACION_25,  
                        DENOMINACION_20,
                        DENOMINACION_10,
                        DENOMINACION_5,
                        DENOMINACION_2,
                        DENOMINACION_1,
                        MONEDAS)
                values (x.CODIGO_EMPRESA,
                        x.CODIGO_AGENCIA,
                        x.CODIGO_CAJERO,
                        x.CODIGO_MONEDA,
                        trunc(VARIABLES.FECHA_CAL),
                        x.SALDO_ACTUAL_EFECTIVO,--x.SALDO_INICIAL_EFECTIVO, 
                        x.SALDO_INICIAL_DOCUMENTO,
                        x.SALDO_IDEAL,
                        (nvl(x.SALDO_ACTUAL_EFECTIVO,0) - nvl(vMontoDeducir,0)),-- x.SALDO_ACTUAL_EFECTIVO, 
                        x.SALDO_ACTUAL_DOCUMENTO,
                        x.ADICIONADO_POR,
                        x.MODIFICADO_POR,
                        x.FECHA_ADICION,
                        x.FECHA_MODIFICACION,
                        x.DENOMINACION_2000,
                        x.DENOMINACION_1000,
                        x.DENOMINACION_500,
                        x.DENOMINACION_200,
                        x.DENOMINACION_100,
                        x.DENOMINACION_50,
                        x.DENOMINACION_25,  
                        x.DENOMINACION_20,
                        x.DENOMINACION_10,
                        x.DENOMINACION_5,
                        x.DENOMINACION_2,
                        x.DENOMINACION_1,
                           (nvl(x.SALDO_ACTUAL_EFECTIVO,0) - nvl(vMontoDeducir,0))--x.MONEDAS
                           );
               Exception
                     when others then
                        message('Error insertando en tabla BCJ_CAJA_SALDOS_DIARIOS Agencia: '||  x.CODIGO_AGENCIA ||  ' Cajero '|| x.CODIGO_CAJERO||' Moneda '|| x.CODIGO_MONEDA -- NREGALADO Req.# 670380 10/06/2021
                          || sqlerrm); 
                          message(' ');                                 
               End;
               --                   
             
               if sql%rowcount = 0 then
                  raise SALDO;
               end if;
            
                --Se actualiza la bitacora de cierres
                Insert into Bcj_Bitacora
                   (codigo_empresa, 
                    codigo_agencia, 
                    codigo_cajero, 
                    fecha_cerrada,
                    cierre_inic, 
                    usuario, 
                    fecha_registro, 
                    codigo_moneda,
                    saldo_ant_efectivo, 
                    saldo_ant_documento, 
                    saldo_act_efectivo,
                    saldo_act_documento, 
                    hora
                )
                values
                   (x.CODIGO_EMPRESA,
                    x.CODIGO_AGENCIA,
                    x.CODIGO_CAJERO,
                    VARIABLES.fecha_cal,
                    'C',
                    VARIABLES.usuario,
                    sysdate,
                    x.CODIGO_MONEDA,
                    x.SALDO_INICIAL_EFECTIVO,
                    x.SALDO_INICIAL_DOCUMENTO,
                    x.SALDO_ACTUAL_EFECTIVO,
                    x.SALDO_ACTUAL_DOCUMENTO,
                    to_char(sysdate,'dd/mm/yyyy hh:mi:ss')
                );               
               
               --
               update BCJ_CAJA_SALDOS_EXISTENTES
                       set SALDO_INICIAL_EFECTIVO  = (nvl(x.SALDO_ACTUAL_EFECTIVO,0) - nvl(vMontoDeducir,0)),
                           SALDO_ACTUAL_EFECTIVO = (nvl(x.SALDO_ACTUAL_EFECTIVO,0) - nvl(vMontoDeducir,0)),
                           MONEDAS = (nvl(x.SALDO_ACTUAL_EFECTIVO,0) - nvl(vMontoDeducir,0)),
                           SALDO_INICIAL_DOCUMENTO = 0,
                           SALDO_ACTUAL_DOCUMENTO = 0  
                    where  CODIGO_EMPRESA  = x.CODIGO_EMPRESA
                      and  CODIGO_AGENCIA  = x.CODIGO_AGENCIA
                      and  CODIGO_CAJERO   = x.CODIGO_CAJERO;               
               
               if sql%rowcount = 0 then
                   raise ACT_SALDO;
               end if;           
               --
            END LOOP;                              
               
            vMontoDeducir := 0;
            
        END LOOP;
        --
    exception
         --JAC 21-10-2013 separado para manejar ambas situaciones
         when SALDO--JAC 21-10-2013 para que no se detenga el cierre
         then
           UTILITARIOS.MENSAJE ('000340', VARIABLES.CODIDIOMA, 'CJ');
         --when NO_DATA_FOUND or SALDO
         when NO_DATA_FOUND --JAC 21-10-2013 separado para manejar ambas situaciones
         then
           UTILITARIOS.MENSAJE ('000340', VARIABLES.CODIDIOMA, 'CJ');
            --mensaje('** No se Registro el Saldo en el Historico **');
            MESSAGE('No se registro el saldo en el historico');
            BITACORA_CIERRES_ERROR(VARIABLES.FEC_HOY);
            --clear_Form(no_commit, Full_Rollback);
            --exit_form(no_commit);
         when ACT_SALDO
         then
            UTILITARIOS.MENSAJE ('000341', VARIABLES.CODIDIOMA, 'CJ');
            --mensaje('** No se Actualizo el Saldo Inicial **');
            MESSAGE('No se actualizo el saldo inicial');
            BITACORA_CIERRES_ERROR(VARIABLES.FEC_HOY);
            --clear_Form(no_commit, Full_Rollback);
            --exit_form(no_commit);
         when OTHERS
         then
            UTILITARIOS.MENSAJE ('000275', VARIABLES.CODIDIOMA, 'CJ', null, sqlerrm);
            MESSAGE('ERROR: '||SQLCODE||'-'||SQLERRM);
            BITACORA_CIERRES_ERROR(VARIABLES.FEC_HOY);
            --mensaje('1.Error # '||to_char(SQLCODE)||' Comunicarlo');
            --clear_Form(no_commit, Full_Rollback);
            --exit_form(no_commit);
            
    end ACTUALIZA_SALDOS_ATMs;
    
    PROCEDURE Transacciones_ATMs IS
              DUMMY          VARCHAR2(1);
              ENCABEZADO     exception;
              DETALLE        exception;
              CONTADOR       number;
              --
              CURSOR enca is
               select A.NUMERO_AUTORIZACION, 
                                        A.NUMERO_AUTORIZACION_CUENTA, 
                                        A.NUMERO_SOLICITUD, 
                                        A.OBSERVACIONES1, 
                                        A.OBSERVACIONES2, 
                                        A.OBSERVACIONES3, 
                                        A.OBSERVACIONES4, 
                                        A.USUARIO_IMPRIME_CHEQUE, 
                                        A.NUMERO_CHEQUE_IMPRESO, 
                                        A.NOMBRE_BENEFICIARIO, 
                                        A.TIPO_EMISOR, 
                                        A.CODIGO_EMISOR, 
                                        A.NUMERO_ASIENTO_CONTABLE, 
                                        A.ADICIONADO_POR, 
                                        A.MODIFICADO_POR, 
                                        A.ANULADO_POR, 
                                        A.FECHA_ADICION, 
                                        A.FECHA_MODIFICACION, 
                                        A.FECHA_ANULACION, 
                                        A.CODIGO_EMPRESA, 
                                        A.CODIGO_AGENCIA, 
                                        A.CODIGO_TRANSACCION, 
                                        A.NUMERO_DOCUMENTO, 
                                        A.CODIGO_MONEDA, 
                                        A.CODIGO_SUBTRANSACCION, 
                                        A.CODIGO_CAJERO, 
                                        A.CODIGO_APLICACION, 
                                        A.CODIGO_CAJERO1, 
                                        A.NUMERO_CUENTA, 
                                        A.NUMERO_CUENTA_DESTINO, 
                                        A.TIPO_CUENTA_DESTINO, 
                                        A.DETALLE_CUENTA_DESTINO, 
                                        A.CODIGO_CLIENTE, 
                                        A.CODIGO_MONEDA1, 
                                        A.FECHA_MOVIMIENTO, 
                                        A.FECHA_VALOR_MOVIMIENTO, 
                                        A.CODIGO_RECAUDADOR, 
                                        A.CODIGO_SERVICIO, 
                                        A.MONTO_MOVIMIENTO, 
                                        A.MONTO_EFECTIVO, 
                                        A.MONTO_DOCUMENTO, 
                                        A.MONTO_VUELTO, 
                                        A.MONTO_COMISION, 
                                        A.MONTO_MOVIMIENTO1, 
                                        A.MONTO_EFECTIVO1, 
                                        A.MONTO_DOCUMENTO1, 
                                        A.MONTO_TIPOCAMBIO1, 
                                        A.MONTO_TIPOCAMBIO2, 
                                        A.CODIGO_ESTADO_MOVIMIENTO, 
                                        A.REVISADO_POR, 
                                        A.FECHA_REVISADO, 
                                        A.AUTORIZADO_POR, 
                                        A.FECHA_AUTORIZACION, 
                                        A.CORTE, 
                                        A.COD_DIVISA, 
                                        A.PROCESA_LOTE, 
                                        A.MONTO_LOTE, 
                                        A.AGENCIA_DESTINO, 
                                        A.DETALLE_DENOMINACIONES, A.IDENTIFICACION_VENTANILLA -- Enfrancisco : 4/8/2011 : se agrego para que se pase tambien la cedula de las transacciones de ventanilla.
               from   BCJ_MOVIMIENTO_DIARIO_ENCA a, BCJ_CAJEROS b
               where  A.CODIGO_EMPRESA = VARIABLES.CODEMPRESA
                 and  to_char(A.FECHA_MOVIMIENTO,'DD/MM/YYYY') <= to_char(VARIABLES.FEC_ANT, 'DD/MM/YYYY')
                 and  A.CODIGO_CAJERO = B.CODIGO_CAJERO 
                 and  B.TIPO_CAJERO = 'A'        -- Cajero tipo ATM
                 and  A.CODIGO_TRANSACCION < 60
               order  by CODIGO_EMPRESA, CODIGO_AGENCIA, A.CODIGO_CAJERO,
                         CODIGO_TRANSACCION, NUMERO_DOCUMENTO;
               --
               CURSOR deta (EMPRESA     number,
                            AGENCIA     number,
                            CAJERO      VARCHAR2,
                            TRANSACCION number,
                            DOCUMENTO   VARCHAR2 ) Is
               select *
               from   BCJ_MOVIMIENTO_DIARIO_DETA
               where  CODIGO_EMPRESA     = EMPRESA
                 and  CODIGO_AGENCIA     = AGENCIA
                 and  CODIGO_CAJERO      = CAJERO
                 and  CODIGO_TRANSACCION = TRANSACCION
                 and  NUMERO_DOCUMENTO   = DOCUMENTO
               order  by CODIGO_EMPRESA, CODIGO_AGENCIA, CODIGO_CAJERO,
                         CODIGO_TRANSACCION, NUMERO_DOCUMENTO;
               --
    begin
        CONTADOR  := 0;
        --
        FOR i in ENCA LOOP
            --
            -- GENERANDO EL ENCABEZADO DE LAS TRANSACCIONES
            --
            CONTADOR := CONTADOR + 1;
            --Desplegar_Mensaje('!! GENERANDO LOS DATOS HISTORICOS '||to_char(CONTADOR) || ' !!');
            --
            begin
              Insert Into BCJ_MOVIMIENTO_MEN_ENCA
                   (CODIGO_EMPRESA,
                    CODIGO_AGENCIA,
                    CODIGO_TRANSACCION,
                    CODIGO_SUBTRANSACCION,
                    NUMERO_DOCUMENTO,
                    CODIGO_MONEDA,
                    CODIGO_CAJERO,
                    CODIGO_CAJERO1,
                    CODIGO_APLICACION,
                    NUMERO_CUENTA,
                    CODIGO_CLIENTE,
                    CODIGO_MONEDA1,
                    FECHA_MOVIMIENTO,
                    CODIGO_RECAUDADOR,
                    CODIGO_SERVICIO,
                    MONTO_MOVIMIENTO,
                    MONTO_EFECTIVO,
                    MONTO_DOCUMENTO,
                    MONTO_VUELTO,
                    MONTO_COMISION,
                    MONTO_TIPOCAMBIO1,
                    MONTO_TIPOCAMBIO2,
                    CODIGO_ESTADO_MOVIMIENTO,
                    NUMERO_AUTORIZACION,
                    NUMERO_AUTORIZACION_CUENTA,
                    NUMERO_SOLICITUD,
                    OBSERVACIONES1,
                    OBSERVACIONES2,
                    OBSERVACIONES3,
                    OBSERVACIONES4,
                    USUARIO_IMPRIME_CHEQUE,
                    NUMERO_CHEQUE_IMPRESO,
                    NUMERO_ASIENTO_CONTABLE,
                    NOMBRE_BENEFICIARIO,
                    TIPO_EMISOR,
                    CODIGO_EMISOR,
                    ADICIONADO_POR,
                    MODIFICADO_POR,
                    ANULADO_POR,
                    FECHA_ADICION,
                    FECHA_MODIFICACION,
                    FECHA_ANULACION,
                    MONTO_MOVIMIENTO1,
                    MONTO_EFECTIVO1,
                    MONTO_DOCUMENTO1,
                    NUMERO_CUENTA_DESTINO,
                    TIPO_CUENTA_DESTINO,
                    DETALLE_CUENTA_DESTINO,
                    REVISADO_POR,
                    AUTORIZADO_POR,
                    FECHA_AUTORIZACION,
                    FECHA_REVISADO,
                    FECHA_VALOR_MOVIMIENTO,
                    COD_DIVISA,
                    PROCESA_LOTE,
                    MONTO_LOTE,
                    DETALLE_DENOMINACIONES,
                    IDENTIFICACION_VENTANILLA -- Enfrancisco : 4/8/2011 : se agrego para que se pase tambien la cedula de las transacciones de ventanilla.
                    )     
            values (i.CODIGO_EMPRESA,
                    i.CODIGO_AGENCIA,
                    i.CODIGO_TRANSACCION,
                    i.CODIGO_SUBTRANSACCION,
                    i.NUMERO_DOCUMENTO,
                    i.CODIGO_MONEDA,
                    i.CODIGO_CAJERO,
                    i.CODIGO_CAJERO1,
                    i.CODIGO_APLICACION,
                    i.NUMERO_CUENTA,
                    i.CODIGO_CLIENTE,
                    i.CODIGO_MONEDA1,
                    i.FECHA_MOVIMIENTO,
                    i.CODIGO_RECAUDADOR,
                    i.CODIGO_SERVICIO,
                    i.MONTO_MOVIMIENTO,
                    i.MONTO_EFECTIVO,
                    i.MONTO_DOCUMENTO,
                    i.MONTO_VUELTO,
                    i.MONTO_COMISION,
                    i.MONTO_TIPOCAMBIO1,
                    i.MONTO_TIPOCAMBIO2,
                    i.CODIGO_ESTADO_MOVIMIENTO,
                    i.NUMERO_AUTORIZACION,
                    i.NUMERO_AUTORIZACION_CUENTA,
                    i.NUMERO_SOLICITUD,
                    i.OBSERVACIONES1,
                    i.OBSERVACIONES2,
                    i.OBSERVACIONES3,
                    i.OBSERVACIONES4,
                    i.USUARIO_IMPRIME_CHEQUE,
                    i.NUMERO_CHEQUE_IMPRESO,
                    i.NUMERO_ASIENTO_CONTABLE,
                    i.NOMBRE_BENEFICIARIO,
                    i.TIPO_EMISOR,
                    i.CODIGO_EMISOR,
                    i.ADICIONADO_POR,
                    i.MODIFICADO_POR,
                    i.ANULADO_POR,
                    i.FECHA_ADICION,
                    i.FECHA_MODIFICACION,
                    i.FECHA_ANULACION,
                    i.MONTO_MOVIMIENTO1,
                    i.MONTO_EFECTIVO1,
                    i.MONTO_DOCUMENTO1,
                    i.NUMERO_CUENTA_DESTINO,
                    i.TIPO_CUENTA_DESTINO,
                    i.DETALLE_CUENTA_DESTINO,
                    i.REVISADO_POR,
                    i.AUTORIZADO_POR,
                    i.FECHA_AUTORIZACION,
                    i.FECHA_REVISADO,
                    i.FECHA_VALOR_MOVIMIENTO,
                    i.COD_DIVISA,
                    i.PROCESA_LOTE,
                    i.MONTO_LOTE,
                    i.DETALLE_DENOMINACIONES,
                    i.IDENTIFICACION_VENTANILLA -- Enfrancisco : 4/8/2011 : se agrego para que se pase tambien la cedula de las transacciones de ventanilla.
                    );     
            --
            exception
              when DUP_VAL_ON_INDEX
            then
              utilitarios.mensaje ('000334', variables.codidioma, 'CJ', NULL, to_char(i.codigo_transaccion)||i.numero_documento);
              --mensaje('DUPLICADO, trans.: '||to_char(i.codigo_transaccion)||'docum.: '||i.numero_documento);
              Rollback;
              exit_form(no_commit);
            when OTHERS
            then
              UTILITARIOS.MENSAJE ('000335', VARIABLES.CODIDIOMA, 'CJ', NULL, TO_CHAR(SQLCODE));
              --mensaje('OTRO ERROR : '||to_char(sqlcode));
              Rollback;
              exit_form(no_commit);
            end;
            --
            if sql%rowcount = 0 then
               raise ENCABEZADO;
            end if;
            --
            FOR j in DETA (i.CODIGO_EMPRESA,
                           i.CODIGO_AGENCIA,
                           i.CODIGO_CAJERO,
                           i.CODIGO_TRANSACCION,
                           i.NUMERO_DOCUMENTO)    LOOP
                  --
                  -- GENERANDO EL DETALLE
                  --
                  insert into BCJ_MOVIMIENTO_MEN_DETA
                         (CODIGO_EMPRESA,
                         CODIGO_AGENCIA,
                         CODIGO_TRANSACCION,
                         NUMERO_DOCUMENTO,
                         CODIGO_MONEDA,
                         CODIGO_FORMA_PAGO,
                         CODIGO_CAJERO,
                         NUMERO_DOCUMENTO_DETALLE,
                         TIPO_EMISOR,
                         CODIGO_EMISOR,
                         NUMERO_CERTIFICADO,
                         NUMERO_CUPON,
                         NUMERO_CUENTA,
                         NUMERO_AUTORIZACION_CUENTA,
                         MONTO_DOCUMENTO_DETALLE,
                         ESTADO,
                         NUMERO_DEPOSITO)
                  values (j.CODIGO_EMPRESA,
                          j.CODIGO_AGENCIA,
                          j.CODIGO_TRANSACCION,
                          j.NUMERO_DOCUMENTO,
                          j.CODIGO_MONEDA,
                          j.CODIGO_FORMA_PAGO,
                          j.CODIGO_CAJERO,
                          j.NUMERO_DOCUMENTO_DETALLE,
                          j.TIPO_EMISOR,
                          j.CODIGO_EMISOR,
                          j.NUMERO_CERTIFICADO,
                          j.NUMERO_CUPON,
                          j.NUMERO_CUENTA,
                          j.NUMERO_AUTORIZACION_CUENTA,
                          j.MONTO_DOCUMENTO_DETALLE,
                          j.ESTADO,
                          j.NUMERO_DEPOSITO);
                if sql%rowcount = 0 then
                   raise DETALLE;
                end if;
                --
                -- ELIMINANDO EL REGISTRO
                --
                delete BCJ_MOVIMIENTO_DIARIO_DETA
                where  CODIGO_EMPRESA     = j.CODIGO_EMPRESA
                  and  CODIGO_AGENCIA     = j.CODIGO_AGENCIA
                  and  CODIGO_CAJERO      = j.CODIGO_CAJERO
                  and  CODIGO_TRANSACCION = j.CODIGO_TRANSACCION
                  and  NUMERO_DOCUMENTO   = j.NUMERO_DOCUMENTO;
            END LOOP;
            --
            -- ELIMINANDO EL ENCABEZADO
            --
            delete BCJ_MOVIMIENTO_DIARIO_ENCA
            where  CODIGO_EMPRESA     = i.CODIGO_EMPRESA
              and  CODIGO_AGENCIA     = i.CODIGO_AGENCIA
              and  CODIGO_CAJERO      = i.CODIGO_CAJERO
              and  CODIGO_TRANSACCION = i.CODIGO_TRANSACCION
              and  NUMERO_DOCUMENTO   = i.NUMERO_DOCUMENTO;
        END LOOP;
        
        
        /* API 06/06/2005 Borrar las transacciones de la tabla temporal de movimientos de ATMs */
        delete from bcj_movimiento_atm_tmp
        where estado = 'P';
        --
    exception
        when NO_DATA_FOUND or ENCABEZADO
        then
           UTILITARIOS.MENSAJE ('000337', VARIABLES.CODIDIOMA, 'CJ', NULL, TO_CHAR(SQLCODE));
           MESSAGE('ERROR: '||'No se registro el encabezado en el historico');
           BITACORA_CIERRES_ERROR(VARIABLES.FEC_HOY);
           --mensaje('** No se Registro el Encabezado en el Historico **');
           Rollback;
           --exit_form(no_commit);
        when DETALLE
        then
           UTILITARIOS.MENSAJE ('000338', VARIABLES.CODIDIOMA, 'CJ', NULL, TO_CHAR(SQLCODE));
           MESSAGE('ERROR: '||'No se registro el detalle en el historico');
           BITACORA_CIERRES_ERROR(VARIABLES.FEC_HOY);
            --mensaje('** No se Registro el Detalle en el Historico **');
           Rollback;
           --exit_form(no_commit);
        when OTHERS
        then
           UTILITARIOS.MENSAJE ('000342', VARIABLES.CODIDIOMA, 'CJ', null, to_char(SQLCODE));
           MESSAGE('ERROR: '||SQLCODE||'-'||SQLERRM);
           BITACORA_CIERRES_ERROR(VARIABLES.FEC_HOY);
           --mensaje('2.Error # '||to_char(SQLCODE)||' Comunicarlo');
           Rollback;
           --exit_form(no_commit);
           
    end Transacciones_ATMs;
    
    --ACollado-29/03/2022 --Se crea procedimiento para pasar a mensual los movimientos de Cash Recycling
    PROCEDURE Transacciones_recy IS
              DUMMY          VARCHAR2(1);
              ENCABEZADO     exception;
              DETALLE        exception;
              CONTADOR       number;
               --
              CURSOR encaRecy is
               select A.NUMERO_AUTORIZACION, 
                                        A.NUMERO_AUTORIZACION_CUENTA, 
                                        A.NUMERO_SOLICITUD, 
                                        A.OBSERVACIONES1, 
                                        A.OBSERVACIONES2, 
                                        A.OBSERVACIONES3, 
                                        A.OBSERVACIONES4, 
                                        A.USUARIO_IMPRIME_CHEQUE, 
                                        A.NUMERO_CHEQUE_IMPRESO, 
                                        A.NOMBRE_BENEFICIARIO, 
                                        A.TIPO_EMISOR, 
                                        A.CODIGO_EMISOR, 
                                        A.NUMERO_ASIENTO_CONTABLE, 
                                        A.ADICIONADO_POR, 
                                        A.MODIFICADO_POR, 
                                        A.ANULADO_POR, 
                                        A.FECHA_ADICION, 
                                        A.FECHA_MODIFICACION, 
                                        A.FECHA_ANULACION, 
                                        A.CODIGO_EMPRESA, 
                                        A.CODIGO_AGENCIA, 
                                        A.CODIGO_TRANSACCION, 
                                        A.NUMERO_DOCUMENTO, 
                                        A.CODIGO_MONEDA, 
                                        A.CODIGO_SUBTRANSACCION, 
                                        A.CODIGO_CAJERO, 
                                        A.CODIGO_APLICACION, 
                                        A.CODIGO_CAJERO1, 
                                        A.NUMERO_CUENTA, 
                                        A.NUMERO_CUENTA_DESTINO, 
                                        A.TIPO_CUENTA_DESTINO, 
                                        A.DETALLE_CUENTA_DESTINO, 
                                        A.CODIGO_CLIENTE, 
                                        A.CODIGO_MONEDA1, 
                                        A.FECHA_MOVIMIENTO, 
                                        A.FECHA_VALOR_MOVIMIENTO, 
                                        A.CODIGO_RECAUDADOR, 
                                        A.CODIGO_SERVICIO, 
                                        A.MONTO_MOVIMIENTO, 
                                        A.MONTO_EFECTIVO, 
                                        A.MONTO_DOCUMENTO, 
                                        A.MONTO_VUELTO, 
                                        A.MONTO_COMISION, 
                                        A.MONTO_MOVIMIENTO1, 
                                        A.MONTO_EFECTIVO1, 
                                        A.MONTO_DOCUMENTO1, 
                                        A.MONTO_TIPOCAMBIO1, 
                                        A.MONTO_TIPOCAMBIO2, 
                                        A.CODIGO_ESTADO_MOVIMIENTO, 
                                        A.REVISADO_POR, 
                                        A.FECHA_REVISADO, 
                                        A.AUTORIZADO_POR, 
                                        A.FECHA_AUTORIZACION, 
                                        A.CORTE, 
                                        A.COD_DIVISA, 
                                        A.PROCESA_LOTE, 
                                        A.MONTO_LOTE, 
                                        A.AGENCIA_DESTINO, 
                                        A.DETALLE_DENOMINACIONES, A.IDENTIFICACION_VENTANILLA 
               from   BCJ_MOVIMIENTO_DIARIO_ENCA a
               where  A.CODIGO_EMPRESA = VARIABLES.CODEMPRESA
                 -- and  to_char(A.FECHA_MOVIMIENTO,'DD/MM/YYYY') <= to_char(VARIABLES.FEC_ANT, 'DD/MM/YYYY') --FDS-1754--Realizo mejora para que el "Menor que" funcione porque con el to_char no lo hace
                 and  A.FECHA_MOVIMIENTO <= VARIABLES.FEC_ANT
                 and  exists (select 1
                                 from pa.pa_maquina_recy
                                where codigo_maquina_prov = a.adicionado_por)
               order  by CODIGO_EMPRESA, CODIGO_AGENCIA, A.CODIGO_CAJERO,
                         CODIGO_TRANSACCION, NUMERO_DOCUMENTO;    
             CURSOR detaRecy (EMPRESA     number,
                              AGENCIA     number,
                              TRANSACCION number,
                              DOCUMENTO   VARCHAR2 ) Is
               select *
               from   BCJ_MOVIMIENTO_DIARIO_DETA
               where  CODIGO_EMPRESA     = EMPRESA
                 and  CODIGO_AGENCIA     = AGENCIA
                 and  CODIGO_TRANSACCION = TRANSACCION
                 and  NUMERO_DOCUMENTO   = DOCUMENTO
               order  by CODIGO_EMPRESA, CODIGO_AGENCIA, CODIGO_CAJERO,
                         CODIGO_TRANSACCION, NUMERO_DOCUMENTO;                         
    begin
        --IPB-425-ACollado.02/03/2022.Transacciones generadas desde cajeros de cash recycling
        CONTADOR  := 0;
        --
        FOR i in ENCARecy LOOP
            --
            -- GENERANDO EL ENCABEZADO DE LAS TRANSACCIONES
            --
            CONTADOR := CONTADOR + 1;
            --Desplegar_Mensaje('!! GENERANDO LOS DATOS HISTORICOS '||to_char(CONTADOR) || ' !!');
            --
            begin
              Insert Into BCJ_MOVIMIENTO_MEN_ENCA
                   (CODIGO_EMPRESA,
                    CODIGO_AGENCIA,
                    CODIGO_TRANSACCION,
                    CODIGO_SUBTRANSACCION,
                    NUMERO_DOCUMENTO,
                    CODIGO_MONEDA,
                    CODIGO_CAJERO,
                    CODIGO_CAJERO1,
                    CODIGO_APLICACION,
                    NUMERO_CUENTA,
                    CODIGO_CLIENTE,
                    CODIGO_MONEDA1,
                    FECHA_MOVIMIENTO,
                    CODIGO_RECAUDADOR,
                    CODIGO_SERVICIO,
                    MONTO_MOVIMIENTO,
                    MONTO_EFECTIVO,
                    MONTO_DOCUMENTO,
                    MONTO_VUELTO,
                    MONTO_COMISION,
                    MONTO_TIPOCAMBIO1,
                    MONTO_TIPOCAMBIO2,
                    CODIGO_ESTADO_MOVIMIENTO,
                    NUMERO_AUTORIZACION,
                    NUMERO_AUTORIZACION_CUENTA,
                    NUMERO_SOLICITUD,
                    OBSERVACIONES1,
                    OBSERVACIONES2,
                    OBSERVACIONES3,
                    OBSERVACIONES4,
                    USUARIO_IMPRIME_CHEQUE,
                    NUMERO_CHEQUE_IMPRESO,
                    NUMERO_ASIENTO_CONTABLE,
                    NOMBRE_BENEFICIARIO,
                    TIPO_EMISOR,
                    CODIGO_EMISOR,
                    ADICIONADO_POR,
                    MODIFICADO_POR,
                    ANULADO_POR,
                    FECHA_ADICION,
                    FECHA_MODIFICACION,
                    FECHA_ANULACION,
                    MONTO_MOVIMIENTO1,
                    MONTO_EFECTIVO1,
                    MONTO_DOCUMENTO1,
                    NUMERO_CUENTA_DESTINO,
                    TIPO_CUENTA_DESTINO,
                    DETALLE_CUENTA_DESTINO,
                    REVISADO_POR,
                    AUTORIZADO_POR,
                    FECHA_AUTORIZACION,
                    FECHA_REVISADO,
                    FECHA_VALOR_MOVIMIENTO,
                    COD_DIVISA,
                    PROCESA_LOTE,
                    MONTO_LOTE,
                    DETALLE_DENOMINACIONES,
                    IDENTIFICACION_VENTANILLA 
                    )     
            values (i.CODIGO_EMPRESA,
                    i.CODIGO_AGENCIA,
                    i.CODIGO_TRANSACCION,
                    i.CODIGO_SUBTRANSACCION,
                    i.NUMERO_DOCUMENTO,
                    i.CODIGO_MONEDA,
                    i.CODIGO_CAJERO,
                    i.CODIGO_CAJERO1,
                    i.CODIGO_APLICACION,
                    i.NUMERO_CUENTA,
                    i.CODIGO_CLIENTE,
                    i.CODIGO_MONEDA1,
                    i.FECHA_MOVIMIENTO,
                    i.CODIGO_RECAUDADOR,
                    i.CODIGO_SERVICIO,
                    i.MONTO_MOVIMIENTO,
                    i.MONTO_EFECTIVO,
                    i.MONTO_DOCUMENTO,
                    i.MONTO_VUELTO,
                    i.MONTO_COMISION,
                    i.MONTO_TIPOCAMBIO1,
                    i.MONTO_TIPOCAMBIO2,
                    i.CODIGO_ESTADO_MOVIMIENTO,
                    i.NUMERO_AUTORIZACION,
                    i.NUMERO_AUTORIZACION_CUENTA,
                    i.NUMERO_SOLICITUD,
                    i.OBSERVACIONES1,
                    i.OBSERVACIONES2,
                    i.OBSERVACIONES3,
                    i.OBSERVACIONES4,
                    i.USUARIO_IMPRIME_CHEQUE,
                    i.NUMERO_CHEQUE_IMPRESO,
                    i.NUMERO_ASIENTO_CONTABLE,
                    i.NOMBRE_BENEFICIARIO,
                    i.TIPO_EMISOR,
                    i.CODIGO_EMISOR,
                    i.ADICIONADO_POR,
                    i.MODIFICADO_POR,
                    i.ANULADO_POR,
                    i.FECHA_ADICION,
                    i.FECHA_MODIFICACION,
                    i.FECHA_ANULACION,
                    i.MONTO_MOVIMIENTO1,
                    i.MONTO_EFECTIVO1,
                    i.MONTO_DOCUMENTO1,
                    i.NUMERO_CUENTA_DESTINO,
                    i.TIPO_CUENTA_DESTINO,
                    i.DETALLE_CUENTA_DESTINO,
                    i.REVISADO_POR,
                    i.AUTORIZADO_POR,
                    i.FECHA_AUTORIZACION,
                    i.FECHA_REVISADO,
                    i.FECHA_VALOR_MOVIMIENTO,
                    i.COD_DIVISA,
                    i.PROCESA_LOTE,
                    i.MONTO_LOTE,
                    i.DETALLE_DENOMINACIONES,
                    i.IDENTIFICACION_VENTANILLA
                    );     
            --
            exception
              when DUP_VAL_ON_INDEX
            then
              utilitarios.mensaje ('000334', variables.codidioma, 'CJ', NULL, to_char(i.codigo_transaccion)||i.numero_documento);
              Rollback;
              exit_form(no_commit);
            when OTHERS
            then
              UTILITARIOS.MENSAJE ('000335', VARIABLES.CODIDIOMA, 'CJ', NULL, TO_CHAR(SQLCODE));
              Rollback;
              exit_form(no_commit);
            end;
            --
            if sql%rowcount = 0 then
               raise ENCABEZADO;
            end if;
            --
            FOR j in detaRecy (i.CODIGO_EMPRESA,
                               i.CODIGO_AGENCIA,
                               i.CODIGO_TRANSACCION,
                               i.NUMERO_DOCUMENTO)    LOOP
                  --
                  -- GENERANDO EL DETALLE
                  --
                  insert into BCJ_MOVIMIENTO_MEN_DETA
                         (CODIGO_EMPRESA,
                         CODIGO_AGENCIA,
                         CODIGO_TRANSACCION,
                         NUMERO_DOCUMENTO,
                         CODIGO_MONEDA,
                         CODIGO_FORMA_PAGO,
                         CODIGO_CAJERO,
                         NUMERO_DOCUMENTO_DETALLE,
                         TIPO_EMISOR,
                         CODIGO_EMISOR,
                         NUMERO_CERTIFICADO,
                         NUMERO_CUPON,
                         NUMERO_CUENTA,
                         NUMERO_AUTORIZACION_CUENTA,
                         MONTO_DOCUMENTO_DETALLE,
                         ESTADO,
                         NUMERO_DEPOSITO)
                  values (j.CODIGO_EMPRESA,
                          j.CODIGO_AGENCIA,
                          j.CODIGO_TRANSACCION,
                          j.NUMERO_DOCUMENTO,
                          j.CODIGO_MONEDA,
                          j.CODIGO_FORMA_PAGO,
                          j.CODIGO_CAJERO,
                          j.NUMERO_DOCUMENTO_DETALLE,
                          j.TIPO_EMISOR,
                          j.CODIGO_EMISOR,
                          j.NUMERO_CERTIFICADO,
                          j.NUMERO_CUPON,
                          j.NUMERO_CUENTA,
                          j.NUMERO_AUTORIZACION_CUENTA,
                          j.MONTO_DOCUMENTO_DETALLE,
                          j.ESTADO,
                          j.NUMERO_DEPOSITO);
                if sql%rowcount = 0 then
                   raise DETALLE;
                end if;
                --
                -- ELIMINANDO EL REGISTRO
                --
                delete BCJ_MOVIMIENTO_DIARIO_DETA
                where  CODIGO_EMPRESA     = j.CODIGO_EMPRESA
                  and  CODIGO_AGENCIA     = j.CODIGO_AGENCIA
                  and  CODIGO_TRANSACCION = j.CODIGO_TRANSACCION
                  and  NUMERO_DOCUMENTO   = j.NUMERO_DOCUMENTO;
            END LOOP;
            --
            -- ELIMINANDO EL ENCABEZADO
            --
            delete BCJ_MOVIMIENTO_DIARIO_ENCA
            where  CODIGO_EMPRESA     = i.CODIGO_EMPRESA
              and  CODIGO_AGENCIA     = i.CODIGO_AGENCIA
              and  CODIGO_TRANSACCION = i.CODIGO_TRANSACCION
              and  NUMERO_DOCUMENTO   = i.NUMERO_DOCUMENTO;
        END LOOP;   
        --ACollado.02/03/2022.fin--IPB-437     
    exception
        when NO_DATA_FOUND or ENCABEZADO
        then
           UTILITARIOS.MENSAJE ('000337', VARIABLES.CODIDIOMA, 'CJ', NULL, TO_CHAR(SQLCODE));
           MESSAGE('ERROR: '||'No se registro el encabezado en el historico');
           BITACORA_CIERRES_ERROR(VARIABLES.FEC_HOY);
           --mensaje('** No se Registro el Encabezado en el Historico **');
           Rollback;
           --exit_form(no_commit);
        when DETALLE
        then
           UTILITARIOS.MENSAJE ('000338', VARIABLES.CODIDIOMA, 'CJ', NULL, TO_CHAR(SQLCODE));
           MESSAGE('ERROR: '||'No se registro el detalle en el historico');
           BITACORA_CIERRES_ERROR(VARIABLES.FEC_HOY);
            --mensaje('** No se Registro el Detalle en el Historico **');
           Rollback;
           --exit_form(no_commit);
        when OTHERS
        then
           UTILITARIOS.MENSAJE ('000342', VARIABLES.CODIDIOMA, 'CJ', null, to_char(SQLCODE));
           MESSAGE('ERROR: '||SQLCODE||'-'||SQLERRM);
           BITACORA_CIERRES_ERROR(VARIABLES.FEC_HOY);
           --mensaje('2.Error # '||to_char(SQLCODE)||' Comunicarlo');
           Rollback;
           --exit_form(no_commit);           
    end Transacciones_recy;

    --ACollado.26/07/2023--GDI-2463-POST-Agrego transacciones de Agilizadora
    PROCEDURE Transacciones_agil IS
              DUMMY          VARCHAR2(1);
              ENCABEZADO     exception;
              DETALLE        exception;
              CONTADOR       number;
               --
              CURSOR encaAgil is
               select A.NUMERO_AUTORIZACION, 
                                        A.NUMERO_AUTORIZACION_CUENTA, 
                                        A.NUMERO_SOLICITUD, 
                                        A.OBSERVACIONES1, 
                                        A.OBSERVACIONES2, 
                                        A.OBSERVACIONES3, 
                                        A.OBSERVACIONES4, 
                                        A.USUARIO_IMPRIME_CHEQUE, 
                                        A.NUMERO_CHEQUE_IMPRESO, 
                                        A.NOMBRE_BENEFICIARIO, 
                                        A.TIPO_EMISOR, 
                                        A.CODIGO_EMISOR, 
                                        A.NUMERO_ASIENTO_CONTABLE, 
                                        A.ADICIONADO_POR, 
                                        A.MODIFICADO_POR, 
                                        A.ANULADO_POR, 
                                        A.FECHA_ADICION, 
                                        A.FECHA_MODIFICACION, 
                                        A.FECHA_ANULACION, 
                                        A.CODIGO_EMPRESA, 
                                        A.CODIGO_AGENCIA, 
                                        A.CODIGO_TRANSACCION, 
                                        A.NUMERO_DOCUMENTO, 
                                        A.CODIGO_MONEDA, 
                                        A.CODIGO_SUBTRANSACCION, 
                                        A.CODIGO_CAJERO, 
                                        A.CODIGO_APLICACION, 
                                        A.CODIGO_CAJERO1, 
                                        A.NUMERO_CUENTA, 
                                        A.NUMERO_CUENTA_DESTINO, 
                                        A.TIPO_CUENTA_DESTINO, 
                                        A.DETALLE_CUENTA_DESTINO, 
                                        A.CODIGO_CLIENTE, 
                                        A.CODIGO_MONEDA1, 
                                        A.FECHA_MOVIMIENTO, 
                                        A.FECHA_VALOR_MOVIMIENTO, 
                                        A.CODIGO_RECAUDADOR, 
                                        A.CODIGO_SERVICIO, 
                                        A.MONTO_MOVIMIENTO, 
                                        A.MONTO_EFECTIVO, 
                                        A.MONTO_DOCUMENTO, 
                                        A.MONTO_VUELTO, 
                                        A.MONTO_COMISION, 
                                        A.MONTO_MOVIMIENTO1, 
                                        A.MONTO_EFECTIVO1, 
                                        A.MONTO_DOCUMENTO1, 
                                        A.MONTO_TIPOCAMBIO1, 
                                        A.MONTO_TIPOCAMBIO2, 
                                        A.CODIGO_ESTADO_MOVIMIENTO, 
                                        A.REVISADO_POR, 
                                        A.FECHA_REVISADO, 
                                        A.AUTORIZADO_POR, 
                                        A.FECHA_AUTORIZACION, 
                                        A.CORTE, 
                                        A.COD_DIVISA, 
                                        A.PROCESA_LOTE, 
                                        A.MONTO_LOTE, 
                                        A.AGENCIA_DESTINO, 
                                        A.DETALLE_DENOMINACIONES, A.IDENTIFICACION_VENTANILLA 
               from   BCJ_MOVIMIENTO_DIARIO_ENCA a
               where  A.CODIGO_EMPRESA = VARIABLES.CODEMPRESA
                 --and  to_char(A.FECHA_MOVIMIENTO,'DD/MM/YYYY') <= to_char(VARIABLES.FEC_ANT, 'DD/MM/YYYY')--FDS-1754--Realizo mejora para que el "Menor que" funcione porque con el to_char no lo hace
                   and  A.FECHA_MOVIMIENTO <= VARIABLES.FEC_ANT
                 and  exists (select 1
                                 from pa.pa_maquina
                                where codigo_maquina_prov = a.adicionado_por)
               order  by CODIGO_EMPRESA, CODIGO_AGENCIA, A.CODIGO_CAJERO,
                         CODIGO_TRANSACCION, NUMERO_DOCUMENTO;    
             CURSOR detaAgil (EMPRESA     number,
                              AGENCIA     number,
                              TRANSACCION number,
                              DOCUMENTO   VARCHAR2 ) Is
               select *
               from   BCJ_MOVIMIENTO_DIARIO_DETA
               where  CODIGO_EMPRESA     = EMPRESA
                 and  CODIGO_AGENCIA     = AGENCIA
                 and  CODIGO_TRANSACCION = TRANSACCION
                 and  NUMERO_DOCUMENTO   = DOCUMENTO
               order  by CODIGO_EMPRESA, CODIGO_AGENCIA, CODIGO_CAJERO,
                         CODIGO_TRANSACCION, NUMERO_DOCUMENTO;                         
    begin
        --IPB-425-ACollado.02/03/2022.Transacciones generadas desde cajeros de cash recycling
        CONTADOR  := 0;
        --
        FOR i in ENCAAgil LOOP
            --
            -- GENERANDO EL ENCABEZADO DE LAS TRANSACCIONES
            --
            CONTADOR := CONTADOR + 1;
            --Desplegar_Mensaje('!! GENERANDO LOS DATOS HISTORICOS '||to_char(CONTADOR) || ' !!');
            --
            begin
              Insert Into BCJ_MOVIMIENTO_MEN_ENCA
                   (CODIGO_EMPRESA,
                    CODIGO_AGENCIA,
                    CODIGO_TRANSACCION,
                    CODIGO_SUBTRANSACCION,
                    NUMERO_DOCUMENTO,
                    CODIGO_MONEDA,
                    CODIGO_CAJERO,
                    CODIGO_CAJERO1,
                    CODIGO_APLICACION,
                    NUMERO_CUENTA,
                    CODIGO_CLIENTE,
                    CODIGO_MONEDA1,
                    FECHA_MOVIMIENTO,
                    CODIGO_RECAUDADOR,
                    CODIGO_SERVICIO,
                    MONTO_MOVIMIENTO,
                    MONTO_EFECTIVO,
                    MONTO_DOCUMENTO,
                    MONTO_VUELTO,
                    MONTO_COMISION,
                    MONTO_TIPOCAMBIO1,
                    MONTO_TIPOCAMBIO2,
                    CODIGO_ESTADO_MOVIMIENTO,
                    NUMERO_AUTORIZACION,
                    NUMERO_AUTORIZACION_CUENTA,
                    NUMERO_SOLICITUD,
                    OBSERVACIONES1,
                    OBSERVACIONES2,
                    OBSERVACIONES3,
                    OBSERVACIONES4,
                    USUARIO_IMPRIME_CHEQUE,
                    NUMERO_CHEQUE_IMPRESO,
                    NUMERO_ASIENTO_CONTABLE,
                    NOMBRE_BENEFICIARIO,
                    TIPO_EMISOR,
                    CODIGO_EMISOR,
                    ADICIONADO_POR,
                    MODIFICADO_POR,
                    ANULADO_POR,
                    FECHA_ADICION,
                    FECHA_MODIFICACION,
                    FECHA_ANULACION,
                    MONTO_MOVIMIENTO1,
                    MONTO_EFECTIVO1,
                    MONTO_DOCUMENTO1,
                    NUMERO_CUENTA_DESTINO,
                    TIPO_CUENTA_DESTINO,
                    DETALLE_CUENTA_DESTINO,
                    REVISADO_POR,
                    AUTORIZADO_POR,
                    FECHA_AUTORIZACION,
                    FECHA_REVISADO,
                    FECHA_VALOR_MOVIMIENTO,
                    COD_DIVISA,
                    PROCESA_LOTE,
                    MONTO_LOTE,
                    DETALLE_DENOMINACIONES,
                    IDENTIFICACION_VENTANILLA 
                    )     
            values (i.CODIGO_EMPRESA,
                    i.CODIGO_AGENCIA,
                    i.CODIGO_TRANSACCION,
                    i.CODIGO_SUBTRANSACCION,
                    i.NUMERO_DOCUMENTO,
                    i.CODIGO_MONEDA,
                    i.CODIGO_CAJERO,
                    i.CODIGO_CAJERO1,
                    i.CODIGO_APLICACION,
                    i.NUMERO_CUENTA,
                    i.CODIGO_CLIENTE,
                    i.CODIGO_MONEDA1,
                    i.FECHA_MOVIMIENTO,
                    i.CODIGO_RECAUDADOR,
                    i.CODIGO_SERVICIO,
                    i.MONTO_MOVIMIENTO,
                    i.MONTO_EFECTIVO,
                    i.MONTO_DOCUMENTO,
                    i.MONTO_VUELTO,
                    i.MONTO_COMISION,
                    i.MONTO_TIPOCAMBIO1,
                    i.MONTO_TIPOCAMBIO2,
                    i.CODIGO_ESTADO_MOVIMIENTO,
                    i.NUMERO_AUTORIZACION,
                    i.NUMERO_AUTORIZACION_CUENTA,
                    i.NUMERO_SOLICITUD,
                    i.OBSERVACIONES1,
                    i.OBSERVACIONES2,
                    i.OBSERVACIONES3,
                    i.OBSERVACIONES4,
                    i.USUARIO_IMPRIME_CHEQUE,
                    i.NUMERO_CHEQUE_IMPRESO,
                    i.NUMERO_ASIENTO_CONTABLE,
                    i.NOMBRE_BENEFICIARIO,
                    i.TIPO_EMISOR,
                    i.CODIGO_EMISOR,
                    i.ADICIONADO_POR,
                    i.MODIFICADO_POR,
                    i.ANULADO_POR,
                    i.FECHA_ADICION,
                    i.FECHA_MODIFICACION,
                    i.FECHA_ANULACION,
                    i.MONTO_MOVIMIENTO1,
                    i.MONTO_EFECTIVO1,
                    i.MONTO_DOCUMENTO1,
                    i.NUMERO_CUENTA_DESTINO,
                    i.TIPO_CUENTA_DESTINO,
                    i.DETALLE_CUENTA_DESTINO,
                    i.REVISADO_POR,
                    i.AUTORIZADO_POR,
                    i.FECHA_AUTORIZACION,
                    i.FECHA_REVISADO,
                    i.FECHA_VALOR_MOVIMIENTO,
                    i.COD_DIVISA,
                    i.PROCESA_LOTE,
                    i.MONTO_LOTE,
                    i.DETALLE_DENOMINACIONES,
                    i.IDENTIFICACION_VENTANILLA
                    );     
            --
            exception
              when DUP_VAL_ON_INDEX
            then
              utilitarios.mensaje ('000334', variables.codidioma, 'CJ', NULL, to_char(i.codigo_transaccion)||i.numero_documento);
              Rollback;
              exit_form(no_commit);
            when OTHERS
            then
              UTILITARIOS.MENSAJE ('000335', VARIABLES.CODIDIOMA, 'CJ', NULL, TO_CHAR(SQLCODE));
              Rollback;
              exit_form(no_commit);
            end;
            --
            if sql%rowcount = 0 then
               raise ENCABEZADO;
            end if;
            --
            FOR j in detaAgil (i.CODIGO_EMPRESA,
                               i.CODIGO_AGENCIA,
                               i.CODIGO_TRANSACCION,
                               i.NUMERO_DOCUMENTO)    LOOP
                  --
                  -- GENERANDO EL DETALLE
                  --
                  insert into BCJ_MOVIMIENTO_MEN_DETA
                         (CODIGO_EMPRESA,
                         CODIGO_AGENCIA,
                         CODIGO_TRANSACCION,
                         NUMERO_DOCUMENTO,
                         CODIGO_MONEDA,
                         CODIGO_FORMA_PAGO,
                         CODIGO_CAJERO,
                         NUMERO_DOCUMENTO_DETALLE,
                         TIPO_EMISOR,
                         CODIGO_EMISOR,
                         NUMERO_CERTIFICADO,
                         NUMERO_CUPON,
                         NUMERO_CUENTA,
                         NUMERO_AUTORIZACION_CUENTA,
                         MONTO_DOCUMENTO_DETALLE,
                         ESTADO,
                         NUMERO_DEPOSITO)
                  values (j.CODIGO_EMPRESA,
                          j.CODIGO_AGENCIA,
                          j.CODIGO_TRANSACCION,
                          j.NUMERO_DOCUMENTO,
                          j.CODIGO_MONEDA,
                          j.CODIGO_FORMA_PAGO,
                          j.CODIGO_CAJERO,
                          j.NUMERO_DOCUMENTO_DETALLE,
                          j.TIPO_EMISOR,
                          j.CODIGO_EMISOR,
                          j.NUMERO_CERTIFICADO,
                          j.NUMERO_CUPON,
                          j.NUMERO_CUENTA,
                          j.NUMERO_AUTORIZACION_CUENTA,
                          j.MONTO_DOCUMENTO_DETALLE,
                          j.ESTADO,
                          j.NUMERO_DEPOSITO);
                if sql%rowcount = 0 then
                   raise DETALLE;
                end if;
                --
                -- ELIMINANDO EL REGISTRO
                --
                delete BCJ_MOVIMIENTO_DIARIO_DETA
                where  CODIGO_EMPRESA     = j.CODIGO_EMPRESA
                  and  CODIGO_AGENCIA     = j.CODIGO_AGENCIA
                  and  CODIGO_TRANSACCION = j.CODIGO_TRANSACCION
                  and  NUMERO_DOCUMENTO   = j.NUMERO_DOCUMENTO;
            END LOOP;
            --
            -- ELIMINANDO EL ENCABEZADO
            --
            delete BCJ_MOVIMIENTO_DIARIO_ENCA
            where  CODIGO_EMPRESA     = i.CODIGO_EMPRESA
              and  CODIGO_AGENCIA     = i.CODIGO_AGENCIA
              and  CODIGO_TRANSACCION = i.CODIGO_TRANSACCION
              and  NUMERO_DOCUMENTO   = i.NUMERO_DOCUMENTO;
        END LOOP;   
        --ACollado.02/03/2022.fin--IPB-437     
    exception
        when NO_DATA_FOUND or ENCABEZADO
        then
           UTILITARIOS.MENSAJE ('000337', VARIABLES.CODIDIOMA, 'CJ', NULL, TO_CHAR(SQLCODE));
           MESSAGE('ERROR: '||'No se registro el encabezado en el historico');
           BITACORA_CIERRES_ERROR(VARIABLES.FEC_HOY);
           --mensaje('** No se Registro el Encabezado en el Historico **');
           Rollback;
           --exit_form(no_commit);
        when DETALLE
        then
           UTILITARIOS.MENSAJE ('000338', VARIABLES.CODIDIOMA, 'CJ', NULL, TO_CHAR(SQLCODE));
           MESSAGE('ERROR: '||'No se registro el detalle en el historico');
           BITACORA_CIERRES_ERROR(VARIABLES.FEC_HOY);
            --mensaje('** No se Registro el Detalle en el Historico **');
           Rollback;
           --exit_form(no_commit);
        when OTHERS
        then
           UTILITARIOS.MENSAJE ('000342', VARIABLES.CODIDIOMA, 'CJ', null, to_char(SQLCODE));
           MESSAGE('ERROR: '||SQLCODE||'-'||SQLERRM);
           BITACORA_CIERRES_ERROR(VARIABLES.FEC_HOY);
           --mensaje('2.Error # '||to_char(SQLCODE)||' Comunicarlo');
           Rollback;
           --exit_form(no_commit);           
    end Transacciones_Agil;    
        
    PROCEDURE contabiliza_transacciones IS
    Cursor cajerosAtm is
            select a.codigo_Cajero, b.codigo_agencia, a.codigo_usuario
            from bcj_cajeros a, bcj_cajeros_empresa b
            where a.tipo_cajero = 'A'
              and a.codigo_cajero = b.codigo_cajero
            order by a.codigo_cajero;
                    
    vMontoRetiros number;
    vMontoReversos number;
    vMontoRetirosBSC number;
    vMontoReversosBSC number;
    V_MENSAJE_ERROR Varchar2(250);
    v_Num_asiento number;
    V_CUENTA_CONTABLE  VARchar2(25);
    V_CUENTA_CONTABLE_ITC  VARchar2(25);
    vTipoCambio1 number;
    vTipoCambio2 number;
    vCxCATH varchar2(25);
    v_monto_diferencia number;
    vContador number := 0;
    vUnidad varchar2(5);
    fecha_parametro date;

    BEGIN
        
        --<<RFELIZ>>--Se creo el bloque ya que esta fecha retorna una fecha en espanol
        Begin
            fecha_parametro := pa.param.parametro_x_empresa(variables.codempresa,'FECHA_CONTA_COMI_SWI','CJ');
        Exception 
            When Others Then
                fecha_parametro := To_DATE(pa.param.parametro_x_empresa(variables.codempresa,'FECHA_CONTA_COMI_SWI','CJ'),'DD-MONTH-YY','NLS_DATE_LANGUAGE = SPANISH');
        End;        
        
        --vCxCATH := parametros.parametro_x_empresa(:variables.codempresa,'CXCRETIROATH','CJ');
        vUnidad := param.parametro_x_empresa(variables.codempresa,'UNIDAD_CENTRAL','CC');            

        for i in cajerosATM loop

             variables.mensaje := 'Generando asientos para el cajero '||i.codigo_cajero;
             synchronize;
                
             select CUENTA_CONTABLE
             into   V_CUENTA_CONTABLE
             from   BCJ_CONTABILIDAD
             where  CODIGO_EMPRESA    = VARIABLES.CODEMPRESA
               and  CODIGO_AGENCIA    = i.codigo_agencia
               and  CODIGO_MONEDA     = 1
               and  CODIGO_CAJERO     = i.CODIGO_CAJERO
               and  CODIGO_FORMA_PAGO = '1';
        
          -- Buscamos la cuenta contable referente a los retiros en ATM de otros bancos
          -- Se utilizara el campo CUENTA_CONTABLE_CANCELACION ya que se usara para las cuentas Cxc ATH
                -- RCEBALLOS 07-07-2011
          Begin
                 select CUENTA_CONTABLE_CANCELACION
               into vCxCATH
               from BCJ_CAJA_SALDOS_PARAMETROS
              where CODIGO_EMPRESA    = VARIABLES.CODEMPRESA
                and CODIGO_AGENCIA    = i.codigo_agencia
                and CODIGO_MONEDA     = 1
                and CODIGO_CAJERO     = i.CODIGO_CAJERO;
              Exception 
                     When no_data_found Then
                          Message('La cuenta contable referente a las tarjetas de cr√©dito del BSC en cajeros BSC, del cajero '||i.codigo_usuario||' no existe, Favor verificar...');
                          --Message(' '); 
                          BITACORA_CIERRES_ERROR(VARIABLES.FEC_HOY);
                          --Raise form_trigger_failure;
                     When Others Then
                          Message('Error buscando la cuenta contable referente a las tarjetas de cr√©dito del BSC en cajeros BSC, del cajero '||i.codigo_usuario||':'||sqlerrm);
                          --Message(' '); 
                          BITACORA_CIERRES_ERROR(VARIABLES.FEC_HOY);
                          --Raise form_trigger_failure;
          End;

                --    RETIROS EN ATM  --
                
                Begin            
                  Select nvl(sum(a.MONTO_EFECTIVO),0) --espons 07/02/2023 se cambia la columna de donde se toma el monto del movimiento
                  --Select nvl(sum(monto_documento_detalle),0)
                      into vMontoRetiros
                  From   BCJ_MOVIMIENTO_DIARIO_ENCA a, BCJ_MOVIMIENTO_DIARIO_DETA b
                  Where a.codigo_empresa = variables.codempresa
                  and a.fecha_movimiento <= variables.fec_ant 
                  and a.codigo_transaccion = 52         -- Retiros no BSC
                  and a.codigo_cajero = i.codigo_cajero
                  and a.codigo_estado_movimiento = 'A'
                  AND b.estado = 'A'     
                  AND a.codigo_empresa = b.codigo_empresa
                  AND a.codigo_agencia = b.codigo_agencia
                  AND a.codigo_transaccion = b.codigo_transaccion
                  AND a.numero_documento = b.numero_documento                                   
                  AND a.MONTO_EFECTIVO = b.monto_documento_detalle -- espons 08/02/2023 para evitir movimientos erroneos y solo traiga los que se encuntran en el encabezado
                  GROUP BY a.codigo_cajero;

                exception
                    when others then
                        vMontoRetiros := 0;
                end;
                
                if vMontoRetiros > 0 then
                   
                    vContador := vContador + 1;
                    -- Contabilizar retiros
                    CG.CG_UTL.Caratula_Del_Asiento  (VARIABLES.codempresa,
                                                    i.codigo_agencia,
                                                    'BCJ',
                                                    902,
                                                    52,
                                                    NULL,
                                                    0,
                                                    'Asiento Resumido por ATM - Retiros Clientes no BSC',
                                                    VARIABLES.FEC_ANT,
                                                    VARIABLES.FEC_ANT,
                                                    V_NUM_ASIENTO,
                                                    i.codigo_usuario,
                                                    V_MENSAJE_ERROR);
                              
                    if v_mensaje_error is not null then
                          UTILITARIOS.MENSAJE ('000126', variables.codidioma, 'CJ');
                          message (v_mensaje_error);-- message(' ');
                          BITACORA_CIERRES_ERROR(VARIABLES.FEC_HOY);
                          Rollback;
                          --exit_form(no_commit);           
                    end if;
                     
                    variables.mensaje := 'Generando asientos para el cajero '||i.codigo_cajero||'. No. '||V_NUM_ASIENTO;
                    synchronize;
                 
                     begin
                     
                         CG.CG_UTL.Lineas_Del_Asiento(VARIABLES.codempresa,
                                                        i.codigo_agencia,
                                                        'BCJ',
                                                        902,
                                                        52,
                                                        NULL,
                                                        0, --.NUMERO_DOCUMENTO,
                                                        'Asiento Resumido por ATM - Retiros Clientes no BSC',
                                                        VARIABLES.FEC_ANT,
                                                        VARIABLES.FEC_ANT,
                                                        VARIABLES.FEC_ANT,
                                                        v_num_asiento,
                                                        V_CUENTA_CONTABLE,
                                                        i.codigo_agencia,
                                                        vMontoRetiros,
                                                        'N',
                                                        'C',
                                                        'N',
                                                        vTipoCambio1,
                                                        vTipoCambio2,
                                                        i.codigo_usuario,
                                                        V_MENSAJE_ERROR);
                        --
                         if V_MENSAJE_ERROR is NOT NULL 
                         then
                                  UTILITARIOS.MENSAJE ('000126', variables.codidioma, 'CJ');
                                  message (v_mensaje_error); --message(' ');
                                  Rollback;
                                  BITACORA_CIERRES_ERROR(VARIABLES.FEC_HOY);
                                  --exit_form(no_commit);                 
                         end if;
                         
                         CG.CG_UTL.Lineas_Del_Asiento(VARIABLES.codempresa,
                                                        i.codigo_agencia,
                                                        'BCJ',
                                                        902,
                                                        52,
                                                        NULL,
                                                        0, --.NUMERO_DOCUMENTO,
                                                        'Asiento Resumido por ATM - Retiros Clientes no BSC',
                                                        VARIABLES.FEC_ANT,
                                                        VARIABLES.FEC_ANT,
                                                        VARIABLES.FEC_ANT,
                                                        v_num_asiento,
                                                        vCxCATH,
                                                        vUnidad,
                                                        vMontoRetiros,
                                                        'N',
                                                        'D',
                                                        'N',
                                                        vTipoCambio1,
                                                        vTipoCambio2,
                                                        i.codigo_usuario,
                                                        V_MENSAJE_ERROR);
                         --
                         if V_MENSAJE_ERROR is NOT NULL 
                         then
                                  UTILITARIOS.MENSAJE ('000126', variables.codidioma, 'CJ');
                                  message (v_mensaje_error); --message(' ');
                                  Rollback;
                                  BITACORA_CIERRES_ERROR(VARIABLES.FEC_HOY);
                                  --exit_form(no_commit);                 
                         end if;
        
                         CG.CG_UTL.Cuadre_Asiento (VARIABLES.codempresa,
                                                   VARIABLES.FEC_ANT,
                                                   v_num_asiento,
                                                   V_MONTO_DIFERENCIA,
                                                   V_MENSAJE_ERROR);
                                         
                         if V_MENSAJE_ERROR is not null then
                            message(v_mensaje_error||' No. '||to_char(v_num_asiento));   
                            --message(' ');
                            Rollback;
                            BITACORA_CIERRES_ERROR(VARIABLES.FEC_HOY);
                            --exit_form(no_commit);
                         end if;
                         
                     end;
                     
                     -- Cambiar el estado de la transaccion a Contabilizado (C)
                     UPDATE   BCJ_MOVIMIENTO_DIARIO_DETA 
                        SET estado = 'C'
                        WHERE codigo_empresa = variables.codempresa
                          AND codigo_agencia = i.codigo_agencia  
                          AND codigo_cajero = i.codigo_cajero
                            AND numero_documento IN (SELECT numero_documento 
                                                       FROM BCJ_MOVIMIENTO_DIARIO_ENCA
                                                        WHERE codigo_empresa = variables.codempresa
                                                          AND codigo_agencia = i.codigo_agencia
                                                          AND codigo_cajero = i.codigo_cajero
                                                          AND fecha_movimiento = variables.fec_ANT
                                                          AND codigo_transaccion = 52)                       
                          AND codigo_transaccion = 52        -- Retiros en ATM 
                          AND estado = 'A';
                          
                          
                        /*MTEJADAA IPF-4717 04/07/2024 VINCULO DE TRANSACCIONES DE CAJA*/
                        UPDATE BCJ_MOVIMIENTO_DIARIO_ENCA
                           SET NUMERO_ASIENTO_CONTABLE = v_num_asiento,
                               codigo_estado_movimiento = 'C'
                         WHERE     codigo_empresa = variables.codempresa
                               AND codigo_agencia = i.codigo_agencia
                               AND codigo_cajero = i.codigo_cajero
                               AND fecha_movimiento = variables.fec_ANT
                               AND codigo_transaccion = 52
                               AND codigo_estado_movimiento = 'A';
       
                     
                end if;
                
                v_num_asiento := null;
                
                --    REVERSOS EN ATM  --
                
                Begin            

                  Select nvl(sum(a.MONTO_EFECTIVO),0) --espons 07/02/2023 se cambia la columna de donde se toma el monto del movimiento
                  --Select nvl(sum(monto_documento_detalle),0)
                      into vMontoReversos
                  From   BCJ_MOVIMIENTO_DIARIO_ENCA a, BCJ_MOVIMIENTO_DIARIO_DETA b
                  Where a.codigo_empresa = variables.codempresa
                  and a.fecha_movimiento <= variables.fec_ant 
                  and a.codigo_transaccion = 54         -- Reversos no BSC
                  and a.codigo_cajero = i.codigo_cajero
                  and a.codigo_estado_movimiento = 'A'
                  AND b.estado = 'A'      
                  AND a.codigo_empresa = b.codigo_empresa
                  AND a.codigo_agencia = b.codigo_agencia
                  AND a.codigo_transaccion = b.codigo_transaccion
                  AND a.numero_documento = b.numero_documento                                   
                  AND a.MONTO_EFECTIVO = b.monto_documento_detalle -- espons 08/02/2023 para evitir movimientos erroneos y solo traiga los que se encuntran en el encabezado
                  GROUP BY a.codigo_cajero;
                exception
                    when others then
                        vMontoReversos := 0;
                end;            
                
                if vMontoReversos > 0 then
                    vContador := vContador + 1; 
                    -- Contabilizar reversos
                    CG.CG_UTL.Caratula_Del_Asiento  (VARIABLES.codempresa,
                                                    i.codigo_agencia,
                                                    'BCJ',
                                                    902,
                                                    54,
                                                    NULL,
                                                    0,  -- # doc
                                                    'Asiento Resumido por ATM - Reversos Clientes no BSC',
                                                    VARIABLES.FEC_ANT,
                                                    VARIABLES.FEC_ANT,
                                                    V_NUM_ASIENTO,
                                                    i.codigo_usuario,
                                                    V_MENSAJE_ERROR);
                                    
                   if v_mensaje_error is not null then
                          UTILITARIOS.MENSAJE ('000126', variables.codidioma, 'CJ');
                          message (v_mensaje_error); --message(' ');
                          Rollback;
                          BITACORA_CIERRES_ERROR(VARIABLES.FEC_HOY);
                          --exit_form(no_commit);           
                   end if;
               
                     variables.mensaje := 'Generando asientos para el cajero '||i.codigo_cajero||'. No. '||V_NUM_ASIENTO;
                     synchronize;    
                     
                     begin
                         CG.CG_UTL.Lineas_Del_Asiento(VARIABLES.codempresa,
                                                    i.codigo_agencia,
                                                    'BCJ',
                                                    902,
                                                    54,
                                                    NULL,
                                                    0, --.NUMERO_DOCUMENTO,
                                                    'Asiento Resumido por ATM - Reversos Clientes no BSC',
                                                    VARIABLES.FEC_ANT,
                                                    VARIABLES.FEC_ANT,
                                                    VARIABLES.FEC_ANT,
                                                    v_num_asiento,
                                                    V_CUENTA_CONTABLE,
                                                    i.codigo_agencia,
                                                    vMontoReversos,
                                                    'N',
                                                    'D',
                                                    'N',
                                                    vTipoCambio1,
                                                    vTipoCambio2,
                                                    i.codigo_usuario,
                                                    V_MENSAJE_ERROR);
                         --
                         if V_MENSAJE_ERROR is NOT NULL 
                         then
                              UTILITARIOS.MENSAJE ('000126', variables.codidioma, 'CJ');
                              message (v_mensaje_error);-- message(' ');
                              Rollback;
                              BITACORA_CIERRES_ERROR(VARIABLES.FEC_HOY);
                              --exit_form(no_commit);                 
                         end if;
                 
                         CG.CG_UTL.Lineas_Del_Asiento(VARIABLES.codempresa,
                                                    i.codigo_agencia,
                                                    'BCJ',
                                                    902,
                                                    54,
                                                    NULL,
                                                    0, --.NUMERO_DOCUMENTO,
                                                    'Asiento Resumido por ATM - Reversos Clientes no BSC',
                                                    VARIABLES.FEC_ANT,
                                                    VARIABLES.FEC_ANT,
                                                    VARIABLES.FEC_ANT,
                                                    v_num_asiento,
                                                    vCxCATH,
                                                    vUnidad,
                                                    vMontoReversos,
                                                    'N',
                                                    'C',
                                                    'N',
                                                    vTipoCambio1,
                                                    vTipoCambio2,
                                                    i.codigo_usuario,
                                                    V_MENSAJE_ERROR);
                         --
                         if V_MENSAJE_ERROR is NOT NULL 
                         then
                                  UTILITARIOS.MENSAJE ('000126', variables.codidioma, 'CJ');
                                  message (v_mensaje_error);-- message(' ');
                                  Rollback;
                                  BITACORA_CIERRES_ERROR(VARIABLES.FEC_HOY);
                                  --exit_form(no_commit);                 
                         end if;
                    
                         CG.CG_UTL.Cuadre_Asiento (VARIABLES.codempresa,
                                                 VARIABLES.FEC_ANT,
                                                 v_num_asiento,
                                                 V_MONTO_DIFERENCIA,
                                                 V_MENSAJE_ERROR);
                                         
                           if V_MENSAJE_ERROR is not null then
                                message(v_mensaje_error||' No. '||to_char(v_num_asiento));   
                                --message(' ');
                                Rollback;
                                BITACORA_CIERRES_ERROR(VARIABLES.FEC_HOY);
                                --exit_form(no_commit);
                           end if;
                           
                     end;
                     
                     -- Cambiar el estado de la transaccion a Contabilizado (C)
                     UPDATE   BCJ_MOVIMIENTO_DIARIO_DETA 
                        SET estado = 'C'
                        WHERE codigo_empresa = variables.codempresa
                          AND codigo_agencia = i.codigo_agencia  
                          AND codigo_cajero = i.codigo_cajero
                            AND numero_documento IN (SELECT numero_documento 
                                                       FROM BCJ_MOVIMIENTO_DIARIO_ENCA
                                                        WHERE codigo_empresa = variables.codempresa
                                                          AND codigo_agencia = i.codigo_agencia
                                                          AND codigo_cajero = i.codigo_cajero
                                                          AND fecha_movimiento = variables.fec_ANT
                                                          AND codigo_transaccion = 54)                       
                          AND codigo_transaccion = 54        -- Reversos en ATM 
                          AND estado = 'A';
                          
                        /*MTEJADAA IPF-4717 04/07/2024 VINCULO DE TRANSACCIONES DE CAJA*/
                        UPDATE BCJ_MOVIMIENTO_DIARIO_ENCA
                           SET NUMERO_ASIENTO_CONTABLE = v_num_asiento,
                               codigo_estado_movimiento = 'C'
                         WHERE     codigo_empresa = variables.codempresa
                               AND codigo_agencia = i.codigo_agencia
                               AND codigo_cajero = i.codigo_cajero
                               AND fecha_movimiento = variables.fec_ANT
                               AND codigo_transaccion = 54
                               AND codigo_estado_movimiento = 'A';
                end if;
                
                -- Buscamos la cuenta contable referente a las tarjetas de cr√©dito del BSC en cajeros BSC
                -- RCEBALLOS 07-07-2011
              Begin
                 select CUENTA_CONTABLE_TARJETA
                   into V_CUENTA_CONTABLE_ITC
                   from BCJ_CAJA_SALDOS_PARAMETROS
                  where CODIGO_EMPRESA    = VARIABLES.CODEMPRESA
                    and CODIGO_AGENCIA    = i.codigo_agencia
                    and CODIGO_MONEDA     = 1
                    and CODIGO_CAJERO     = i.CODIGO_CAJERO;
              Exception 
                     When no_data_found Then
                          Message('La cuenta contable referente a las tarjetas de cr√©dito del BSC en cajeros BSC, del cajero '||i.codigo_usuario||' no existe, Favor verificar...');
                          BITACORA_CIERRES_ERROR(VARIABLES.FEC_HOY); 
                          --Raise form_trigger_failure;
                     When Others Then
                          Message('Error buscando la cuenta contable referente a las tarjetas de cr√©dito del BSC en cajeros BSC, del cajero '||i.codigo_usuario||':'||sqlerrm); 
                          BITACORA_CIERRES_ERROR(VARIABLES.FEC_HOY);
                          --Raise form_trigger_failure;
              End;
                
                -- Contabilizaci√≥n de transacciones de Retiros ATM de Clientes Tarjetas de Credito BSC
                -- RCEBALLOS 06-07-2011
                --    RETIROS EN ATM, TC BSC  --
                Begin            
                  Select nvl(sum(a.MONTO_EFECTIVO),0) --espons 07/02/2023 se cambia la columna de donde se toma el monto del movimiento
                  --Select nvl(sum(monto_documento_detalle),0)
                      into vMontoRetirosBSC
                  From   BCJ_MOVIMIENTO_DIARIO_ENCA a, BCJ_MOVIMIENTO_DIARIO_DETA b
                  Where a.codigo_empresa = variables.codempresa
                  and a.fecha_movimiento <= variables.fec_ant 
                  and a.codigo_transaccion = 51         -- Retiros BSC
                  and a.codigo_subtransaccion = 2     -- Retiros TC BSC
                  and a.codigo_cajero = i.codigo_cajero
                  and a.codigo_estado_movimiento = 'A'
                  AND b.estado = 'A'     
                  AND a.codigo_empresa = b.codigo_empresa
                  AND a.codigo_agencia = b.codigo_agencia
                  AND a.codigo_transaccion = b.codigo_transaccion
                  AND a.numero_documento = b.numero_documento                                   
                  AND a.MONTO_EFECTIVO = b.monto_documento_detalle -- espons 08/02/2023 para evitir movimientos erroneos y solo traiga los que se encuntran en el encabezado
                  GROUP BY a.codigo_cajero;
                exception
                    when others then
                        vMontoRetirosBSC := 0;
                end;
                
                if vMontoRetirosBSC > 0 then
                    vContador := vContador + 1;
                    -- Contabilizar retiros
                    CG.CG_UTL.Caratula_Del_Asiento  (VARIABLES.codempresa,
                                                    i.codigo_agencia,
                                                    'BCJ',
                                                    902,
                                                    51,
                                                    2,
                                                    0,
                                                    'Asiento Resumido por ATM - Retiros Clientes Tarjetas de Credito BSC',
                                                    VARIABLES.FEC_ANT,
                                                    VARIABLES.FEC_ANT,
                                                    V_NUM_ASIENTO,
                                                    i.codigo_usuario,
                                                    V_MENSAJE_ERROR);
                              
                     if v_mensaje_error is not null then
                          UTILITARIOS.MENSAJE ('000126', variables.codidioma, 'CJ');
                          message (v_mensaje_error); --message(' ');
                          Rollback;
                          BITACORA_CIERRES_ERROR(VARIABLES.FEC_HOY);
                          --exit_form(no_commit);           
                     end if;
                         
                     variables.mensaje := 'Generando asientos para el cajero '||i.codigo_cajero||'. No. '||V_NUM_ASIENTO;
                     synchronize;
                 
                     begin
                     
                         CG.CG_UTL.Lineas_Del_Asiento(VARIABLES.codempresa,
                                                    i.codigo_agencia,
                                                    'BCJ',
                                                    902,
                                                    51,
                                                    2,
                                                    0, --.NUMERO_DOCUMENTO,
                                                    'Asiento Resumido por ATM - Retiros Clientes Tarjetas de Credito BSC',
                                                    VARIABLES.FEC_ANT,
                                                    VARIABLES.FEC_ANT,
                                                    VARIABLES.FEC_ANT,
                                                    v_num_asiento,
                                                    V_CUENTA_CONTABLE,
                                                    i.codigo_agencia,
                                                    vMontoRetirosBSC,
                                                    'N',
                                                    'C',
                                                    'N',
                                                    vTipoCambio1,
                                                    vTipoCambio2,
                                                    i.codigo_usuario,
                                                    V_MENSAJE_ERROR);
                         --
                         if V_MENSAJE_ERROR is NOT NULL 
                         then
                              UTILITARIOS.MENSAJE ('000126', variables.codidioma, 'CJ');
                              message (v_mensaje_error); --message(' ');
                              Rollback;
                              BITACORA_CIERRES_ERROR(VARIABLES.FEC_HOY);
                              --exit_form(no_commit);                 
                         end if;
           
                         CG.CG_UTL.Lineas_Del_Asiento(VARIABLES.codempresa,
                                                    i.codigo_agencia,
                                                    'BCJ',
                                                    902,
                                                    51,
                                                    2,
                                                    0, --.NUMERO_DOCUMENTO,
                                                    'Asiento Resumido por ATM - Retiros Clientes Tarjetas de Credito BSC',
                                                    VARIABLES.FEC_ANT,
                                                    VARIABLES.FEC_ANT,
                                                    VARIABLES.FEC_ANT,
                                                    v_num_asiento,
                                                    V_CUENTA_CONTABLE_ITC,
                                                    vUnidad,
                                                    vMontoRetirosBSC,
                                                    'N',
                                                    'D',
                                                    'N',
                                                    vTipoCambio1,
                                                    vTipoCambio2,
                                                    i.codigo_usuario,
                                                    V_MENSAJE_ERROR);
                         --
                         if V_MENSAJE_ERROR is NOT NULL 
                         then
                                UTILITARIOS.MENSAJE ('000126', variables.codidioma, 'CJ');
                                message (v_mensaje_error); message(' ');
                                Rollback;
                                exit_form(no_commit);                 
                         end if;
        
                          CG.CG_UTL.Cuadre_Asiento (VARIABLES.codempresa,
                                                      VARIABLES.FEC_ANT,
                                                      v_num_asiento,
                                                      V_MONTO_DIFERENCIA,
                                                      V_MENSAJE_ERROR);
                                           
                         if V_MENSAJE_ERROR is not null then
                              message(v_mensaje_error||' No. '||to_char(v_num_asiento));   
                              --message(' ');
                              Rollback;
                              BITACORA_CIERRES_ERROR(VARIABLES.FEC_HOY);
                              --exit_form(no_commit);
                         end if;
                         
                     end;
                     
                     -- Cambiar el estado de la transaccion a Contabilizado (C)
                     UPDATE   BCJ_MOVIMIENTO_DIARIO_DETA 
                        SET estado = 'C'
                        WHERE codigo_empresa = variables.codempresa
                          AND codigo_agencia = i.codigo_agencia  
                          AND codigo_cajero = i.codigo_cajero
                            AND numero_documento IN (SELECT numero_documento 
                                                       FROM BCJ_MOVIMIENTO_DIARIO_ENCA
                                                        WHERE codigo_empresa = variables.codempresa
                                                          AND codigo_agencia = i.codigo_agencia
                                                          AND codigo_cajero = i.codigo_cajero
                                                          AND fecha_movimiento = variables.fec_ANT
                                                          AND codigo_transaccion = 51
                                                          AND codigo_subtransaccion = 2)     -- Retiros Clientes Tarjetas de Credito BSC              
                          AND codigo_transaccion = 51        -- Retiros en ATM 
                          AND estado = 'A';
                          
                        /*MTEJADAA IPF-4717 04/07/2024 VINCULO DE TRANSACCIONES DE CAJA*/
                        UPDATE BCJ_MOVIMIENTO_DIARIO_ENCA
                           SET NUMERO_ASIENTO_CONTABLE = v_num_asiento,
                               codigo_estado_movimiento = 'C'
                         WHERE     codigo_empresa = variables.codempresa
                               AND codigo_agencia = i.codigo_agencia
                               AND codigo_cajero = i.codigo_cajero
                               AND fecha_movimiento = variables.fec_ANT
                               AND codigo_transaccion = 51
                               AND codigo_subtransaccion = 2
                               AND codigo_estado_movimiento = 'A';
                     
                end if;
                
                v_num_asiento := null;
                
                --    REVERSOS EN ATM  --
                
                Begin            
                      Select nvl(sum(a.MONTO_EFECTIVO),0) --espons 07/02/2023 se cambia la columna de donde se toma el monto del movimiento
                      --Select nvl(sum(monto_documento_detalle),0)
                      into vMontoReversosBSC
                      From   BCJ_MOVIMIENTO_DIARIO_ENCA a, BCJ_MOVIMIENTO_DIARIO_DETA b
                      Where a.codigo_empresa = variables.codempresa
                      and a.fecha_movimiento <= variables.fec_ant 
                      and a.codigo_transaccion = 53         -- Reversos BSC
                      and a.codigo_subtransaccion = 2         -- Reversos Retiros Clientes Tarjetas de Credito BSC
                      and a.codigo_cajero = i.codigo_cajero
                      and a.codigo_estado_movimiento = 'A'
                      AND b.estado = 'A'      
                      AND a.codigo_empresa = b.codigo_empresa
                      AND a.codigo_agencia = b.codigo_agencia
                      AND a.codigo_transaccion = b.codigo_transaccion
                      AND a.numero_documento = b.numero_documento                                   
                      AND a.MONTO_EFECTIVO = b.monto_documento_detalle -- espons 08/02/2023 para evitir movimientos erroneos y solo traiga los que se encuntran en el encabezado
                      GROUP BY a.codigo_cajero;
                exception
                    when others then
                        vMontoReversosBSC := 0;
                end;            
                
                if vMontoReversosBSC > 0 then
                    vContador := vContador + 1; 
                    -- Contabilizar reversos
                    CG.CG_UTL.Caratula_Del_Asiento  (VARIABLES.codempresa,
                                                    i.codigo_agencia,
                                                    'BCJ',
                                                    902,
                                                    53,
                                                    2,
                                                    0,  -- # doc
                                                    'Asiento Resumido por ATM - Reversos Clientes Tarjetas de Credito BSC',
                                                    VARIABLES.FEC_ANT,
                                                    VARIABLES.FEC_ANT,
                                                    V_NUM_ASIENTO,
                                                    i.codigo_usuario,
                                                    V_MENSAJE_ERROR);
                                    
                     if v_mensaje_error is not null then
                            UTILITARIOS.MENSAJE ('000126', variables.codidioma, 'CJ');
                            message (v_mensaje_error); --message(' ');
                            Rollback;
                            BITACORA_CIERRES_ERROR(VARIABLES.FEC_HOY);
                            --exit_form(no_commit);           
                     end if;
               
                     variables.mensaje := 'Generando asientos para el cajero '||i.codigo_cajero||'. No. '||V_NUM_ASIENTO;
                     synchronize;    
                     
                     begin
                         CG.CG_UTL.Lineas_Del_Asiento(VARIABLES.codempresa,
                                                    i.codigo_agencia,
                                                    'BCJ',
                                                    902,
                                                    53,
                                                    2,
                                                    0, --.NUMERO_DOCUMENTO,
                                                    'Asiento Resumido por ATM - Reversos Clientes Tarjetas de Credito BSC',
                                                    VARIABLES.FEC_ANT,
                                                    VARIABLES.FEC_ANT,
                                                    VARIABLES.FEC_ANT,
                                                    v_num_asiento,
                                                    V_CUENTA_CONTABLE,
                                                    i.codigo_agencia,
                                                    vMontoReversosBSC,
                                                    'N',
                                                    'D',
                                                    'N',
                                                    vTipoCambio1,
                                                    vTipoCambio2,
                                                    i.codigo_usuario,
                                                    V_MENSAJE_ERROR);
                        --
                         if V_MENSAJE_ERROR is NOT NULL 
                         then
                              UTILITARIOS.MENSAJE ('000126', variables.codidioma, 'CJ');
                              message (v_mensaje_error); --message(' ');
                              Rollback;
                              BITACORA_CIERRES_ERROR(VARIABLES.FEC_HOY);
                              --exit_form(no_commit);                 
                         end if;
                 
                         CG.CG_UTL.Lineas_Del_Asiento(VARIABLES.codempresa,
                                                    i.codigo_agencia,
                                                    'BCJ',
                                                    902,
                                                    53,
                                                    2,
                                                    0, --.NUMERO_DOCUMENTO,
                                                    'Asiento Resumido por ATM - Reversos Clientes Tarjetas de Credito BSC',
                                                    VARIABLES.FEC_ANT,
                                                    VARIABLES.FEC_ANT,
                                                    VARIABLES.FEC_ANT,
                                                    v_num_asiento,
                                                    V_CUENTA_CONTABLE_ITC,
                                                    vUnidad,
                                                    vMontoReversosBSC,
                                                    'N',
                                                    'C',
                                                    'N',
                                                    vTipoCambio1,
                                                    vTipoCambio2,
                                                    i.codigo_usuario,
                                                    V_MENSAJE_ERROR);
                         --
                         if V_MENSAJE_ERROR is NOT NULL 
                         then
                              UTILITARIOS.MENSAJE ('000126', variables.codidioma, 'CJ');
                              message (v_mensaje_error); message(' ');
                              Rollback;
                              exit_form(no_commit);                 
                         end if;
                    
                         CG.CG_UTL.Cuadre_Asiento (VARIABLES.codempresa,
                                                 VARIABLES.FEC_ANT,
                                                 v_num_asiento,
                                                 V_MONTO_DIFERENCIA,
                                                 V_MENSAJE_ERROR);
                                         
                           if V_MENSAJE_ERROR is not null then
                                message(v_mensaje_error||' No. '||to_char(v_num_asiento));   
                                --message(' ');
                                Rollback;
                                BITACORA_CIERRES_ERROR(VARIABLES.FEC_HOY);
                                --exit_form(no_commit);
                           end if;
                     end;
                     
                     -- Cambiar el estado de la transaccion a Contabilizado (C)
                     UPDATE   BCJ_MOVIMIENTO_DIARIO_DETA 
                        SET estado = 'C'
                        WHERE codigo_empresa = variables.codempresa
                          AND codigo_agencia = i.codigo_agencia  
                          AND codigo_cajero = i.codigo_cajero
                            AND numero_documento IN (SELECT numero_documento 
                                                       FROM BCJ_MOVIMIENTO_DIARIO_ENCA
                                                        WHERE codigo_empresa = variables.codempresa
                                                          AND codigo_agencia = i.codigo_agencia
                                                          AND codigo_cajero = i.codigo_cajero
                                                          AND fecha_movimiento = variables.fec_ANT
                                                          AND codigo_transaccion = 53
                                                          AND codigo_transaccion = 2) -- Reverso Retiros Clientes Tarjetas de Credito BSC      
                          AND codigo_transaccion = 53        -- Reversos en ATM 
                          AND estado = 'A';
                          
                        /*MTEJADAA IPF-4717 04/07/2024 VINCULO DE TRANSACCIONES DE CAJA*/
                        UPDATE BCJ_MOVIMIENTO_DIARIO_ENCA
                           SET NUMERO_ASIENTO_CONTABLE = v_num_asiento,
                               codigo_estado_movimiento = 'C'
                         WHERE     codigo_empresa = variables.codempresa
                               AND codigo_agencia = i.codigo_agencia
                               AND codigo_cajero = i.codigo_cajero
                               AND fecha_movimiento = variables.fec_ANT
                               AND codigo_transaccion = 53
                               AND codigo_subtransaccion = 2
                               AND codigo_estado_movimiento = 'A';
                          
                end if;
        
                -- Proceso que genera la Contabilizacion de Comision SWITCH EXTREME
                GEN_CON_COM_SWI_EXT(VARIABLES.codempresa, i.codigo_agencia, 'BCJ', 902, VARIABLES.FEC_ANT, i.codigo_usuario, V_MENSAJE_ERROR);
                if V_MENSAJE_ERROR is NOT NULL then
                     message (v_mensaje_error);
                     Rollback;
                     BITACORA_CIERRES_ERROR(VARIABLES.FEC_HOY);
                     --exit_form(no_commit);                 
                end if;
                
        end loop;

        -- Actualiza los movimientos no involucrados en el proceso, pero dentro del rango de fecha pautado.
        begin
           update cj.bcj_movimiento_switch mov 
              set mov.estado = 'A'
            where (TRUNC(mov.fecha_ath)   >  TRUNC(fecha_parametro) -- Intervalo de fechas entre la fecha ultima en que se ejecuto
              and TRUNC(mov.fecha_ath)    <= TRUNC(VARIABLES.FEC_ANT));        -- el proceso y la fecha actual
              -- Se cambio la fecha actual por la fecha de calendario, RCEBALLOS 17022011
        exception when OTHERS then
            V_MENSAJE_ERROR := 'Contabilizacion-Comision-Switch-Extreme: Error actualizando los movimientos no involucrados en el proceso: '|| SQLERRM || ')';
        end;
        -- Actualiza la fecha del parametro del proceso de Comision SWITCH
        begin
           update parametros_x_empresa pxe
              set pxe.valor = TRUNC(VARIABLES.FEC_ANT) -- Se cambio la fecha actual por la fecha de calendario, RCEBALLOS 17022011
            where cod_empresa = VARIABLES.codempresa 
              and cod_sistema = 'CJ' 
              and abrev_parametro = 'FECHA_CONTA_COMI_SWI';
        exception when OTHERS then
            V_MENSAJE_ERROR := 'Contabilizacion-Comision-Switch-Extreme: Error actualizando la fecha del parametro del proceso de comisi√≥n switch: '|| SQLERRM || ')';
        end;
        
        if V_MENSAJE_ERROR is NOT NULL 
             then
               message (v_mensaje_error);
               Rollback;
               BITACORA_CIERRES_ERROR(VARIABLES.FEC_HOY);
               --exit_form(no_commit);                 
        end if;
        --
      
        if vContador > 0 then
            variables.mensaje := 'Proceso finalizado con √©xito.';
            synchronize;
        else
            variables.mensaje := 'No hubo transacciones que procesar.';
            synchronize;
        end if;
        
    exception
       when OTHERS then
          UTILITARIOS.MENSAJE ('000152', variables.codidioma, 'CJ');
          message(sqlerrm); --message(' ');
          BITACORA_CIERRES_ERROR(VARIABLES.FEC_HOY);
          Rollback;
          --exit_form(no_commit);        
    END;
   
   /* -------------------------------------------------------------------- */
   /* DESCRIPCION: CIERRE DIARIO DE CAJA ATM DE CJ                         */
   /* -------------------------------------------------------------------- */
   PROCEDURE CIERRE_DIARIO_CJ IS
   
      V_confirmacion      NUMBER;
      M_Error             VARCHAR2(100);
      vTipoCierre         varchar2(1);
      vFecha              date;
      nAlerta             Number(18,2);
      vCod_cliente        VARCHAR2 (15);
      v_cod_verizon       cj.bcj_recaudadores.codigo_recaudador%TYPE; 
      v_servicio          varchar(50);
      vmonto_credito      NUMBER(18,2);
      vCodMoneda          tf_transferencia.cod_moneda%TYPE; 
      vnum_cta_origen     Bcj_Contrato_Servicio.Numero_Cuenta%TYPE; 
      vcod_producto       cuenta_efectivo.cod_producto%TYPE;
      vNum_Cta_nac        cuenta_efectivo.num_cuenta_nacional%TYPE;
      VMONTO_COMISION     NUMBER(18,2);
      v_itbis             varchar2(10);
      v_monto_impuesto    number(18,2);
      vProceso_error      varchar2(100);
      
      vProcName           VARCHAR2(80)  := 'CIERRE_DIARIO_CJ';
      l_rindex_g          PLS_INTEGER := DBMS_APPLICATION_INFO.set_session_longops_nohint;
      l_slno_g            PLS_INTEGER;
      pTarget             PLS_INTEGER;
      
    BEGIN
    
        Job.Ejecuta := 'JOB_CIERRE_DIARIO_CJ';
        IniVarGlobalesLocales('CJ0132');
        BInicio (vProcName);
      
        --UTILITARIOS1.Alerta('000056',:variables.CodIdioma,'CJ',V_confirmacion,null,'CONFIRMACION');
      
        --IF V_confirmacion = ALERT_BUTTON1  THEN -- Invocar las funciones de cierre ('YES')
        --BITACORA_CIERRES
        BITACORA_CIERRES_INICIO (variables.FEC_HOY);
        
        DBMS_APPLICATION_INFO.set_session_longops (
                         rindex        => l_rindex_g,
                         slno          => l_slno_g,
                         op_name       => Job.Ejecuta,
                         target        => pTarget,
                         context       => 0,
                         sofar         => 1,
                         totalwork     => 6,
                         target_desc   => 'Procesando  ...',
                         units         => 'rows');
                         
        --    
        UTILITARIOS.mensaje('000057', VARIABLES.codidioma, 'CJ');
        synchronize;
        
        vProceso_error := 'Actualiza_comprobante_ingreso_incompleto';--Cristomino Pereyra Simetrica 16/05/2024

        Actualiza_comprobante_ingreso_incompleto; --Cristomino Pereyra Simetrica 16/05/2024

        vProceso_error := 'Rechaza Traslados';
         
        Rechaza_sol_pend_traslados;
        
        vProceso_error := 'Valida Transacciones Pendientes';
        
        DBMS_APPLICATION_INFO.set_session_longops (
                         rindex        => l_rindex_g,
                         slno          => l_slno_g,
                         op_name       => Job.Ejecuta,
                         target        => pTarget,
                         context       => 0,
                         sofar         => 2,
                         totalwork     => 6,
                         target_desc   => 'Procesando  ...',
                         units         => 'rows');
                         
        Transacciones;
        
        --<<RFELIZ>>--Salimos del proceso si hay transacciones pendientes
        If Not vExit Then
        
            vProceso_error := 'Actualiza Saldos ATMs';
            
            DBMS_APPLICATION_INFO.set_session_longops (
                             rindex        => l_rindex_g,
                             slno          => l_slno_g,
                             op_name       => Job.Ejecuta,
                             target        => pTarget,
                             context       => 0,
                             sofar         => 3,
                             totalwork     => 6,
                             target_desc   => 'Procesando  ...',
                             units         => 'rows');
                             
            Actualiza_Saldos_atms;    
        
            VARIABLES.FEC_ANT := VARIABLES.FECHA_CAL;     -- Copiar la fecha actual de calendario antes de cambiarlo.
            
            vProceso_error := 'Valida Ultimo dia Habil';
            
            begin
               select ultimo_habil_mes
                into vFecha
                from calendario
                where codigo_empresa = to_number(variables.CodEmpresa)
                and   codigo_aplicacion = 'BCJ';

            exception
               when others then
                      BITACORA_CIERRES_ERROR(VARIABLES.FECHA_CAL);
                      vFecha := variables.Fecha_cal + 1;
            end;
            
            if trunc(variables.Fecha_cal) >= trunc(vFecha)
            then
              vTipoCierre := 'M';
            else
              vTipoCierre := 'D';
            end if;
            
            -- identificar los posibles errores
            vProceso_error := 'Cambia Calendario';
            
            DBMS_APPLICATION_INFO.set_session_longops (
                             rindex        => l_rindex_g,
                             slno          => l_slno_g,
                             op_name       => Job.Ejecuta,
                             target        => pTarget,
                             context       => 0,
                             sofar         => 4,
                             totalwork     => 6,
                             target_desc   => 'Procesando  ...',
                             units         => 'rows');
                             
            Cambia_calendario_agencias (variables.CodEmpresa,
                                        variables.CodSistema,
                                        variables.CodAgencia,
                                        variables.Fecha_cal,
                                        vTipoCierre,
                                        variables.Usuario,
                                        M_Error);
                                   
            if M_Error is not null then
              Mensaje(M_Error);
              BITACORA_CIERRES_ERROR(VARIABLES.FECHA_CAL);
              --Raise Form_trigger_Failure;
            end if;
           
            -- identificar los posibles errores
            vProceso_error := 'Contabiliza Transacciones';
            
            Contabiliza_Transacciones;   -- API 14/05/2005   Contabilizar las transacciones de los ATMs
            
            DBMS_APPLICATION_INFO.set_session_longops (
                             rindex        => l_rindex_g,
                             slno          => l_slno_g,
                             op_name       => Job.Ejecuta,
                             target        => pTarget,
                             context       => 0,
                             sofar         => 5,
                             totalwork     => 6,
                             target_desc   => 'Procesando  ...',
                             units         => 'rows');
            
            -- identificar los posibles errores
            vProceso_error := 'Pasa Movimientos Historicos';
            
            Transacciones_Atms;                    -- API 23/05/2005   Pasar transacciones de ATM al historico
            
            --ACollado-29/03/2022-- IPB-425--Se llama procedimiento para pasar a mensual los movimientos de Cash Recycling
            Transacciones_recy;
            
            --ACollado-26/07/2023-- GDI-2463--Se llama procedimiento para pasar a mensual los movimientos de Agilizadora de Efectivo
            Transacciones_agil;                
                        
            --:system.message_level := 15;
            Commit;
            --:system.message_level := 0; 
                
            DBMS_APPLICATION_INFO.set_session_longops (
                             rindex        => l_rindex_g,
                             slno          => l_slno_g,
                             op_name       => Job.Ejecuta,
                             target        => pTarget,
                             context       => 0,
                             sofar         => 6,
                             totalwork     => 6,
                             target_desc   => 'Procesando  ...',
                             units         => 'rows');
                             
              if FORM_SUCCESS then
                  BITACORA_CIERRES_FIN(VARIABLES.FECHA_CAL);
                  UTILITARIOS.mensaje('000001', VARIABLES.codidioma, 'CJ'); -- Terminado con √©xito
                  synchronize;
                  --exit_form(no_commit);
                  
                  --kadames-excello 24/04/2023
                  --Para enviar correo cuando hay traslado pendiente de recibir
                  --Inicio
                  NotifCorreoTraslPend (pempresa=>variables.CodEmpresa,
                                        pfecha => variables.FEC_HOY);
                  --Fin                  
              Else
                   UTILITARIOS.mensaje(pNumMensaje    => '000019', 
                                       PCodIdioma     => VARIABLES.codidioma, 
                                       pCodSistema    => 'CJ',
                                       respuesta      => null,
                                       texto_variable => vProceso_error
                                       ); 
                   
                   synchronize;
                   rollback;
                   --exit_form(no_commit);
              end if;
        
              --END IF;
              /*
              IF V_confirmacion = ALERT_BUTTON2  THEN -- El usuario no va a ejecutar el cierre ('NO')
                  exit_form(no_commit);
              END IF;
             */
         
         End If;
         
         --BITACORA_CIERRES
         BITACORA_CIERRES_FIN(variables.fec_hoy);
         BFinal (vProcName);
     
    EXCEPTION
         WHEN OTHERS THEN 
         MESSAGE('ERROR: '||SQLCODE||'-'||SQLERRM);
         BITACORA_CIERRES_ERROR(VARIABLES.FEC_HOY);  
         UTILITARIOS.mensaje(pNumMensaje    => '000019', 
                             PCodIdioma     => VARIABLES.codidioma, 
                             pCodSistema    => 'CJ',
                             respuesta      => null,
                             texto_variable => vProceso_error
                             ); 
               
               synchronize;
               rollback;
               --exit_form(no_commit);     
    -- 
    END CIERRE_DIARIO_CJ;


    -- ---------------------------------------------------------------------------------------------------------------------------- --
    -- PROCESOS RELACIONADOS AL CIERRE     MISCELANEOS - CLIENTES                                                         --
    -- REALIZADO POR: ANA PATRICIA INOA                                                                                                      --
    -- ---------------------------------------------------------------------------------------------------------------------------- --

    -- REPORTE DE ASIENTOS GENERADOS DEL CIERRE
    PROCEDURE REPORTE_ASIENTOS_CIERRE  IS        
            
        vBlob blob;
        vApp pa.interfaces_externas_b2000.nombre_interface%type;
        vRuta pa.interfaces_externas_b2000.ruta_archivo%type;
        vUsuario pa.interfaces_externas_b2000.usuario%type;
        vPass pa.interfaces_externas_b2000.clave%type;
        vDb pa.interfaces_externas_b2000.base_datos%type;    
        vEmpresa varchar2(80); 
        vProcName varchar2(80) :=  'REPORTE_ASIENTOS_CIERRE';     
        vNomAgencia varchar2(80);
        vDirectorioRep varchar2(50):='DIR_GENERALES_CIERRE'; 
        vNomReporte varchar2(15):='PARREPCI';

    BEGIN

        Job.Ejecuta := 'JOB_REPORTE_ASIENTOS_CIERRE';
        IniVarGlobalesLocales('PAREPCIE');
        BInicio (vProcName);
        BITACORA_CIERRES_INICIO (variables.FEC_HOY);
            
        begin
            select tit_reportes
                into vEmpresa
            from empresa;
        exception
            when others then 
                vEmpresa := 'Banco Santa Cruz';
        end;
        vNomAgencia := PA.OBT_DESCRIPCION_AGENCIA(Variables.CodEmpresa,Variables.CodAgencia);      
          
        PA.PKG_REPORTS.AgregaParametro('PG_TIT_EMPRESA',vEmpresa, TRUE); 
        PA.PKG_REPORTS.AgregaParametro('PG_TIT_OPENBANK','Sistema Integrado Banca 2000', TRUE);        
        PA.PKG_REPORTS.AgregaParametro('PG_TIT_AGENCIA',vNomAgencia, true);                   
        PA.PKG_REPORTS.AgregaParametro('DESTYPE', 'Preview', TRUE);      
        PA.PKG_REPORTS.AgregaParametro('PG_E_IMPRESO', 'Impreso', TRUE); 
        PA.PKG_REPORTS.AgregaParametro('PG_ET_POR', 'Por', TRUE); 
        PA.PKG_REPORTS.AgregaParametro('PG_NOM_REPORTE', vNomReporte, TRUE);  
        PA.PKG_REPORTS.AgregaParametro('PG_TIT_REPORTE', 'Resumen de Asientos Generados', TRUE);    
        PA.PKG_REPORTS.AgregaParametro('PG_TIT_SISTEMA', 'Pol√≠ticas Bancarias y Administraci√≥n de Clientes', TRUE);    
          
        PA.PKG_REPORTS.AgregaParametro('P_FEC_REPORTE', to_char(variables.fecha,'dd-MON-yyyy'), TRUE);    
        PA.PKG_REPORTS.AgregaParametro('P_FEC_ANT_REPORTE', to_char(variables.Anterior_Dia_Habil,'dd-MON-yyyy'), TRUE);    
        PA.PKG_REPORTS.AgregaParametro('P_APLICACION', NULL, TRUE); 
        PA.PKG_REPORTS.AgregaParametro('P_OPERADOR', VARIABLES.USUARIO, TRUE); 
        PA.PKG_REPORTS.AgregaParametro('P_ESTADO', null, TRUE);           
        PA.PKG_REPORTS.AgregaParametro('P_CODEMPRESA', variables.CodEmpresa, TRUE);     
        PA.PKG_REPORTS.AgregaParametro('PG_COD_IDIOMA', variables.CodIdioma, TRUE);  
        PA.PKG_REPORTS.AgregaParametro('PARAMFORM', 'NO', TRUE);                            
           
        begin
            select nombre_interface, ruta_archivo, usuario, clave, base_datos
                into vApp, vRuta, vUsuario, vPass, vDb
            from pa.interfaces_externas_b2000
            where cod_empresa = variables.codempresa
                and cod_sistema = 'BPA'
                and nombre_programa = 'RUN_REPORT';
        exception
            when others then
                raise;
        end;
       
        begin
            vBlob := PA.PKG_REPORTS.GeneraReportePDF (vUsuario||'/'||pa.seguridad.desencripta(vPass)||'@'||vDb, vApp, vApp, vRuta, vNomReporte || '.rep');                       
            PA.PKG_REPORTS.EscribeArchivo(vBlob, vDirectorioRep, vNomReporte||to_char(sysdate,'DDMMYYYHHMISS')||'.PDF');                           
        end;

        BITACORA_CIERRES_FIN(variables.fec_hoy);
        BFinal (vProcName);
         
    EXCEPTION
        WHEN OTHERS THEN
            Message ('No se pudo generar el Reporte '||vNomReporte||' >> '||sqlerrm);
            Bitacora_Cierres_Error (variables.fecha);
    END REPORTE_ASIENTOS_CIERRE;
    
    PROCEDURE Asiento_Reclasificacion_Pr_Sec(Pcod_empresa       in varchar2,
                                             Pcod_agencia       in varchar2,
                                             Ptipo_credito      in varchar2,
                                             Pestado            in varchar2,
                                             Pnumasiento        in varchar2,
                                             Pnocredito         in varchar2,
                                             PAplic             in Varchar2,
                                             PSubAplic          in Varchar2,
                                             PTipoTrans         in varchar2,
                                             PSubTransCambio    in varchar2,                                                    
                                             PNumTransa         in varchar2,
                                             Pdescripcion       in varchar2,
                                             Pfecha             in date,
                                             Pcliente           in varchar2,
                                             pAgencia           in varchar2,
                                             PsectorActual      in varchar2,
                                             PsectorNuevo       in varchar2,
                                             PSaldoCredito      in number,
                                             PIntereses         in number,
                                             PTc1               in out number,
                                             PTc2               in out Number,
                                             PMensajeError      in out varchar2
                                             ) IS
         --EFECTUA : Inicializacion de Variables Locales Adicionales                                     
            Vcuentacontable        Varchar2(25);
            VcuentacontableN       Varchar2(25);
            Vcuentacontableint     Varchar2(25);
            VcuentacontableintN    Varchar2(25);
            BCG_INTERFACE          Exception;
            vErr                   Varchar2(6);
            vMens                  Varchar2(1000);
            vSistema               Varchar2(2);
            Vsequim                varchar2(10);
            vMensaj                varchar2(100);    
            vCentral               Varchar2(1);
            -- API 09022021: Modificaciones para verificar atraso de creditos en J o E  | Cambios Manual de Contabilidad
            vAtraso    varchar2(1);
            vConcepto varchar2(30);

    Begin    

            vSequim    := '0';
            vMensaj    := 'Error generando reclasificacion de Prestamos para el cliente '||Pcliente;

        /* API 09022021: Cambios en el Manual de Contabilidad - Contabilizacion E y J por tramo de mora */
        -- API 02112020: Verificar atraso si es estado restructurado o cobro judicial | Cambios Manual de Contabilidad
        vConcepto := '';
        if pEstado in ('E','J') then
           vAtraso := PR.Verifica_Atraso_BPR (Pcod_empresa, Pnocredito);
           if vAtraso = 'M' then
               vConcepto := '_MORA';
           elsif vAtraso = 'V' then
               vConcepto := '_VENCIDO';
           end if;
        end if;


        pr.PR_PROCS.Cuenta_Contable_Principal_BPR(Pcod_empresa,
                                                  Ptipo_credito, 
                                                  Pestado,
                                                  Pnocredito, 
                                                  VcuentacontableN, 
                                                  PMensajeError);
            Vsequim    := '1';
                                      
        If PMensajeError is not NULL then
                    vErr      :=    '000688';
                    vMens     :=    ' Buscando Cuenta Contable Principal BPR, Credito: '||Pnocredito||' Tipo de Credito: '||Ptipo_credito||' Cuenta contable: '||VcuentacontableN||' Error: '||PMensajeError;
                    vSistema  :=    Variables.codsistema;--'PA'
              raise BCG_INTERFACE;
        End if;
        
        -- Cuenta contable sector viejo
        begin
               select CUENTA_CONTABLE
                 into vCuentaContable
               from PR_CUENTAS_X_CONCEPTO a
              where CODIGO_EMPRESA    = Pcod_empresa
                and TIPO_CREDITO      = Ptipo_credito
                and CODIGO_ESTADO     = Pestado
                and CONCEPTO          = 'PRINCIPAL'||vConcepto -- API 09022021: Se agrega si es mora o vencido | Cambios en el Manual de Contabilidad
                and COD_SEC_CONTABLE  = PSECTORACTUAL;
        exception
           when no_data_found then
               PMensajeError := '001814'; --No encontro Cta para el concepto NConcepto
             return;
          when too_many_rows then
            PMensajeError := '000015'; -- Concepto duplicada
             return;
          when others then
            PMensajeError := '000016'; -- Se presentaron problemas con la cuenta
          return;
        end ; 
               
        If PMensajeError is not NULL then
                    vErr       :=    '000688';
                    vMens      :=    ' Buscando Cuenta Contable Principal BPR, Credito: '||Pnocredito||' Tipo de Credito: '||Ptipo_credito||' Cuenta contable: '||Vcuentacontable||' Error: '||PMensajeError;
                    vSistema   :=    Variables.codsistema;--'PA'
              raise BCG_INTERFACE;
        End if;
        
            Vsequim    := '2';
            
            control.mensaje := ' Asiento: '||Pnumasiento||' Cuenta Contable '||Vcuentacontable;
            
            --Si no es centralizada haz el asiento
            Es_Centralizada ( Vcuentacontable,
                              vCentral);--S o N
                                                
            If vCentral = 'N' Then                            
            
              --Si no es centralizada haz el asiento
                Es_Centralizada ( VcuentacontableN,
                                  vCentral);--S o N
                                                    
                If vCentral = 'N' Then
                                                        
                    CG.CG_UTL.Lineas_del_Asiento( Pcod_empresa,
                                       Pcod_agencia,         --Agencia del titular que se le dara el debido
                                       PAplic,
                                       PSubAplic,
                                       PTipoTrans,
                                       PSubTransCambio, -- No hay Subtransacc.--
                                       PNumTransa,
                                       PDESCRIPCION,
                                       Pfecha,                  -- F/Movimiento   --
                                       Pfecha,                  -- F/Valor        --
                                       Pfecha,                  -- F/del_dia  --
                                       Pnumasiento,
                                       Vcuentacontable,
                                       PAgencia,                -- tiene Auxiliar  --
                                       PSaldoCredito,    
                                       'S',                -- Si Acumula         --
                                       'C',                         -- Credito, Tipo movimiento  --
                                       'N',                -- No modifica linea  --
                                       PTc1,              -- Tipo de cambio orig--
                                       PTC2,              -- Tipo de cambio base--
                                       Variables.Usuario, 
                                       PMensajeError);
                    Vsequim    := '3';
        
                                                           
                    If PMensajeError is not null then                
                            vErr        :=    '000688';
                            vMens       :=    ' Despues Lineas del Asiento Debito '||PMensajeError||'-'||Pcliente||'CRno. '||Pnocredito;
                            vSistema    :=    Variables.codsistema;--'PA'
                      raise BCG_INTERFACE;
                    End if;
                
                    Vsequim    := '4';
                
                    control.mensaje := ' Asiento Debito: '||Pnumasiento||' Saldo: '||PSaldoCredito||' Auxiliar: '||PAgencia||' Cuenta Contable '||VcuentacontableN||' Error '||PMensajeError||'- Cliente: '||Pcliente||'CRno. '||Pnocredito;                        
                
                    CG.CG_UTL.Lineas_del_Asiento( variables.Codempresa,
                                                   variables.CodAgencia, --Agencia del Solicitante que se le dara el Credito.
                                                   PAplic,
                                                   PSubAplic,
                                                   PTipoTrans,
                                                   PSubTransCambio,       -- No hay Subtransacc.--
                                                   PNumTransa,
                                                   PDESCRIPCION,
                                                   PFecha,                              -- F/Movimiento   --
                                                   PFecha,                              -- F/Valor        --
                                                   PFecha,                              -- F/del_dia  --
                                                   Pnumasiento,
                                                   VcuentacontableN,
                                                   PAgencia,                         -- Tiene Auxiliar  --
                                                   Psaldocredito,
                                                   'S',                            -- Si Acumula         --
                                                   'D',                                     -- Debito, Tipo movimiento  --
                                                   'N',                            -- No modifica linea  --
                                                   PTc1,                          -- Tipo de cambio orig--
                                                   PTc2,                          -- Tipo de cambio base--
                                                   Variables.Usuario, 
                                                   PMensajeError);
                    Vsequim    := '5';
        
                                   
                    if PMensajeError is not null then
                            vErr       :=    '000688';
                            vMens      :=    ' Despues verificar Error Lineas del Asiento Credito '||PMensajeError||'-'||Pcliente||'CRno. '||Pnocredito;
                            vSistema   :=    Variables.codsistema;--'PA'
                      raise BCG_INTERFACE;
                    End if;
                    
                    Vsequim    := '6';
        
                    control.mensaje := ' Asiento Credito: '||Pnumasiento||' Saldo: '||Psaldocredito||' Auxiliar: '||PAgencia||' Cuenta Contable '||VcuentacontableN||' Error '||PMensajeError||'- Cliente: '||Pcliente||'CRno. '||Pnocredito;
                                
                end if;
                
            End If;--Si no es centralizada haz el asiento
        
            -- Intereses del cr√©dito
        -- Cuenta contable sector viejo
        begin
               select CUENTA_CONTABLE
                 into vCuentaContableInt
               from PR_CUENTAS_X_CONCEPTO a
              where CODIGO_EMPRESA    = Pcod_empresa
                and TIPO_CREDITO      = Ptipo_credito
                and CODIGO_ESTADO     = Pestado
                and CONCEPTO          = 'INTERESES'||vConcepto -- API 09022021: Se agrega si es mora o vencido | Cambios en el Manual de Contabilidad
                and COD_SEC_CONTABLE  = PSECTORACTUAL;
        exception
           when no_data_found then
               PMensajeError := '001814'; --No encontro Cta para el concepto NConcepto
             return;
          when too_many_rows then
            PMensajeError := '000015'; -- Concepto duplicada
             return;
          when others then
            PMensajeError := '000016'; -- Se presentaron problemas con la cuenta
          return;
        end ;     
        
        If PMensajeError is not NULL then
                    vErr       :=    '000688';
                    vMens      :=    ' Buscando Cuenta Contable Principal BPR, Credito: '||Pnocredito|| ' Tipo de Credito: '||Ptipo_credito||' Cuenta contable: '||Vcuentacontable||' Error: '||PMensajeError;
                    vSistema   :=    Variables.codsistema;--'PA'
              raise BCG_INTERFACE;
        End if;
        -- Cuenta contable sector nuevo
        begin
               select CUENTA_CONTABLE
                 into vCuentaContableIntN
               from PR_CUENTAS_X_CONCEPTO a
              where CODIGO_EMPRESA    = Pcod_empresa
                and TIPO_CREDITO      = Ptipo_credito
                and CODIGO_ESTADO     = Pestado
                and CONCEPTO          = 'INTERESES'||vConcepto -- API 09022021: Se agrega si es mora o vencido | Cambios en el Manual de Contabilidad
                and COD_SEC_CONTABLE  = PSECTORNUEVO;
        exception
           when no_data_found then
               PMensajeError := '001814'; --No encontro Cta para el concepto NConcepto
             return;
          when too_many_rows then
            PMensajeError := '000015'; -- Concepto duplicada
             return;
          when others then
            PMensajeError := '000016'; -- Se presentaron problemas con la cuenta
          return;
        end ;     
           
        If PMensajeError is not NULL then
                    vErr       := '000688';
                    vMens      := ' Buscando Cuenta Contable Principal BPR, Credito: '||Pnocredito||' Tipo de Credito: '||Ptipo_credito||' Cuenta contable: '||Vcuentacontable||' Error: '||PMensajeError;
                    vSistema   := Variables.codsistema;--'PA'
              raise BCG_INTERFACE;
        End if;
        
            Vsequim    := '2';
            
            control.mensaje := ' Asiento: '||Pnumasiento||' Cuenta Contable '||VcuentacontableInt;
            
            --Si no es centralizada haz el asiento
            Es_Centralizada ( Vcuentacontableint,
                                                vCentral);--S o N
                                                
            If vCentral = 'N' Then                            
            
              --Si no es centralizada haz el asiento
                Es_Centralizada ( VcuentacontableintN,
                                                    vCentral);--S o N
                                                    
                If vCentral = 'N' Then
                                                        
                    CG.CG_UTL.Lineas_del_Asiento( Pcod_empresa,
                                       Pcod_agencia,         --Agencia del titular que se le dara el debido
                                       PAplic,
                                       PSubAplic,
                                       PTipoTrans,
                                       PSubTransCambio, -- No hay Subtransacc.--
                                       PNumTransa,
                                       PDESCRIPCION,
                                       Pfecha,                  -- F/Movimiento   --
                                       Pfecha,                  -- F/Valor        --
                                       Pfecha,                  -- F/del_dia  --
                                       Pnumasiento,
                                       Vcuentacontableint,
                                       PAgencia,                -- tiene Auxiliar  --
                                       PIntereses,    
                                       'S',                -- Si Acumula         --
                                       'C',                         -- Credito, Tipo movimiento  --
                                       'N',                -- No modifica linea  --
                                       PTc1,              -- Tipo de cambio orig--
                                       PTC2,              -- Tipo de cambio base--
                                       Variables.Usuario, 
                                       PMensajeError);
                    Vsequim    := '3';
        
                                                           
                If PMensajeError is not null then                
                        vErr       :=    '000688';
                        vMens      :=    ' Despues Lineas del Asiento Debito '||PMensajeError||'-'||Pcliente||'CRno. '||Pnocredito;
                        vSistema   :=    Variables.codsistema;--'PA'
                  raise BCG_INTERFACE;
                End if;
                
                    Vsequim    := '4';
                
                    control.mensaje := ' Asiento Debito: '||Pnumasiento||' Saldo: '||PSaldoCredito||' Auxiliar: '||PAgencia||' Cuenta Contable '||VcuentacontableN||' Error '||PMensajeError||'- Cliente: '||Pcliente||'CRno. '||Pnocredito;                        
                
                    CG.CG_UTL.Lineas_del_Asiento(variables.Codempresa,
                                                   variables.CodAgencia, --Agencia del Solicitante que se le dara el Credito.
                                                   PAplic,
                                                   PSubAplic,
                                                   PTipoTrans,
                                                   PSubTransCambio,       -- No hay Subtransacc.--
                                                   PNumTransa,
                                                   PDESCRIPCION,
                                                   PFecha,                              -- F/Movimiento   --
                                                   PFecha,                              -- F/Valor        --
                                                   PFecha,                              -- F/del_dia  --
                                                   Pnumasiento,
                                                   VcuentacontableintN,
                                                   PAgencia,                         -- Tiene Auxiliar  --
                                                   PIntereses,
                                                   'S',                            -- Si Acumula         --
                                                   'D',                                     -- Debito, Tipo movimiento  --
                                                   'N',                            -- No modifica linea  --
                                                   PTc1,                          -- Tipo de cambio orig--
                                                   PTc2,                          -- Tipo de cambio base--
                                                   Variables.Usuario, 
                                                   PMensajeError);
                    Vsequim    := '5';
        
                                   
                if PMensajeError is not null then
                        vErr        :=    '000688';
                        vMens       :=    ' Despues verificar Error Lineas del Asiento Credito '||PMensajeError||'-'||Pcliente||'CRno. '||Pnocredito;
                        vSistema    :=    Variables.codsistema;--'PA'
                  raise BCG_INTERFACE;
                End if;
                    
                    Vsequim    := '6';
        
                    control.mensaje := ' Asiento Credito: '||Pnumasiento||' Intereses: '||PIntereses||' Auxiliar: '||PAgencia||' Cuenta Contable '||VcuentacontableN||' Error '||PMensajeError||'- Cliente: '||Pcliente||'CRno. '||Pnocredito;
                                                    
                end if;
            End If;--Si no es centralizada haz el asiento    
            
    Exception
        When BCG_INTERFACE Then
            --Utilitarios.Mensaje(vErr, :codidioma, vSistema,Acknowledge,vMens);
            --        RollBack;
            --Set_Application_Property(Cursor_style, 'DEFAULT');   
            --enf: 15.10.2014: para que retorne al anterior procedimiento.
            --Raise form_trigger_failure;
            --PMensajeError := vMensaj ||' Vsequim:'||Vsequim||' '||vNumError|| ' '||SQLERRM;
            message(Pcliente||' '||SQLCODE||' '||vMens||' Asiento_Reclasificacion_Pr');
            BITACORA_CIERRES_ERROR (variables.fecha); 
            return;
        When Others Then
            --enf: 15.10.2014: para que retorne al anterior procedimiento.
            --Message(SQLERRM||SQLCODE); Message(' ');
            /*Set_Application_Property(Cursor_style, 'DEFAULT');        
             Message(Vsequim ||'-'|| vMensaj); Message(' ');
          exit_form(no_commit, no_validate);                        */
            message(Pcliente||' '||SQLCODE||' '||vMens||' Asiento_Reclasificacion_Pr');
            BITACORA_CIERRES_ERROR (variables.fecha);
            return;    
    End Asiento_Reclasificacion_Pr_Sec;
    
    FUNCTION valida_cartera_dest(pCtaCtbleOrig in varchar2,
                                 pCtaCtbleDest in varchar2) RETURN boolean IS
    -- EFECTUA: valida si la vMonedaFuente <> vMonedaDest para las cuentas contable de la cartera

      vMonedaFuente                number(2);
      vMonedaDest                 number(2);
      Vsequim                            varchar2(10);
      vMensaj                            varchar2(100);               
      
    BEGIN
        
        Vsequim := '0';
        vMensaj := 'Error validando cartera destino';
        
        Begin
            select moneda_cuenta
            into vMonedaFuente
            from cg_catalogo_x_empresa
           where cuenta_contable = pCtaCtbleOrig
             and codigo_empresa = variables.codEmpresa;
        Exception
            When Others then
            --000131--No se encontro codigo de moneda para la cuenta contable @
            Utilitarios.mensaje('000131', VARIABLES.CODIDIOMA,'CG',ACKNOWLEDGE,pCtaCtbleOrig);
            MESSAGE('No se encontro codigo de moneda para la cuenta contable @: '||pCtaCtbleDest);
            BITACORA_CIERRES_ERROR (variables.fecha);
            --exit_form(no_commit, no_validate);
            
        End;   
        
        Vsequim := '1';
        vMensaj := 'Error buscando moneda de la cuenta';
        
        Begin
          select moneda_cuenta
            into vMonedaDest
            from cg_catalogo_x_empresa
           where cuenta_contable = pCtaCtbleDest
             and  codigo_empresa = variables.codEmpresa;
        Exception
            When Others then
            --000131--No se encontro codigo de moneda para la cuenta contable @        
            Utilitarios.mensaje('000131',VARIABLES.CODIDIOMA,'CG',ACKNOWLEDGE,pCtaCtbleDest);
            MESSAGE('No se encontro codigo de moneda para la cuenta contable @: '||pCtaCtbleDest);
            BITACORA_CIERRES_ERROR (variables.fecha);
            --exit_form(no_commit, no_validate);
            
        End;  
        
      if vMonedaFuente <> vMonedaDest then
        return false;
      else
        return true;
      end if;
      
    Exception
        When Others Then
             --Set_Application_Property(Cursor_style, 'DEFAULT');        
             Message(Vsequim ||'-'|| vMensaj); Message(' ');
             BITACORA_CIERRES_ERROR (variables.fecha);
             --exit_form(no_commit, no_validate);            

    END valida_cartera_dest;
    
    PROCEDURE cd_obt_cartera_sector (p_empresa   IN VARCHAR2 ,
                                         p_cuenta      IN OUT VARCHAR2 ,
                                         p_cartera   IN VARCHAR2 ,
                                         p_plazo        IN NUMBER,
                                         p_clasificacion IN varchar2,   -- indicador de Normal (V), Garantia, Interbancario
                                         p_vencido     IN varchar2,       -- indicador de Vencido (S), Vigente (N), Vista (V)
                                         p_moneda       IN varchar2,       -- moneda para la cuenta contable
                                         p_sector    IN VARCHAR2,
                                         p_forma_pago_int IN VARCHAR2,       
                                         p_error     IN OUT varchar2, 
                                         p_sqlcode   IN OUT number,
                                         -- este parametro indica P si la cuenta a buscar es la de principal
                                         -- I si es la de Intereses Activos.
                                         pTipoCuenta IN varchar2 default 'P' 
                                        )  IS
 
      /*****************************************************************
      EFECTUA     : Obtiene la cartera para el sector enviado
      REQUIERE : empresa, moneda, sector, plazo incio y plazo final
      HISTORIA :
      *****************************************************************/
      v_sector_contable varchar2(6);
    BEGIN
      p_cuenta  := NULL ;
      v_sector_contable := p_sector;

      IF v_sector_contable is not null then
      
          BEGIN    
            SELECT decode(pTipoCuenta,'P',cd.cuenta_contable,cd.cuenta_contable_interes)
              INTO p_cuenta
              FROM cd_cartera cd, cg_catalogo_x_empresa cg
              WHERE cd.codigo_empresa  = p_empresa
                AND cd.cod_cartera     = p_cartera
                AND p_plazo between cd.plazo_inicio AND cd.plazo_fin
                AND cd.clasificacion   = p_clasificacion
                AND cd.vencido         = p_vencido
                AND cd.cod_sec_contable = v_sector_contable  
                AND cd.forma_pago_int   = p_forma_pago_int   
                AND cd.codigo_empresa  = cg.codigo_empresa
                AND cd.cuenta_contable = cg.cuenta_contable
                AND cg.moneda_cuenta   = p_moneda;
                
          EXCEPTION
               WHEN NO_DATA_FOUND THEN
              -- No encontro niguna cartera que cumpla con el plazo y la clasificacion indicada
              p_error := '000181' ;    
              p_sqlcode := SQLCODE ;
               WHEN TOO_MANY_ROWS THEN
              -- Encontro mas de una cartera para el plazo indicado y la clasificacion
              p_error := '000182' ;    
              p_sqlcode := SQLCODE ;
               WHEN OTHERS THEN
              -- Error al buscar la cartera indicada
              p_error := '000183' ;    
              p_sqlcode := SQLCODE ;
          END;  
             
            if p_cuenta is null then
                if pTipoCuenta = 'I' then
                    -- Error al obtener cuenta para intereses
                  p_error := '000138' ;    
                  p_sqlcode := SQLCODE ;
                end if;            
            end if;        
      ELSE
          -- Cliente no tiene sector contable asignado
          p_error := '000665' ;    
          p_sqlcode := SQLCODE ;     
      END IF;           
    END cd_obt_cartera_sector;
    
    PROCEDURE CD_CAMBIO_CARTERA(pCodEmpresa          in varchar2,
                                pRetencion           in varchar2,
                                pCodCartera          in varchar2,
                                pTip_Certificado     in varchar2,
                                psector              in varchar2,
                                pIndicador           out varchar2,
                                pctacontable         out varchar2,
                                pCtaContable_int     out varchar2,
                                p_forma_pago_int     IN VARCHAR2) IS
                         
    --EFECTUA : Busca la cuenta contable del certificado en retencion para el sector contable del cliente
    --HISTORIA: API - Creaci√≥n 05/10/2012

      vsector                       personas.cod_sec_contable%type;  
      Vsequim                            varchar2(10);
        vMensaj                            varchar2(100); 
          
    BEGIN
        Vsequim := '0';    
        vMensaj    := 'Error Buscando Cambio Cartera para reclasificacion de CD, sector '||psector;
            Begin
                select cambia_cartera
                into pIndicador
                from cd_retencion
                where codigo_empresa = pCodEmpresa
                 and  cod_retencion = pRetencion;
            Exception
                When Others Then
                --Error al obtener los datos de la retencion--000643
                    Utilitarios.mensaje('000643', variables.codidioma, 'CD');    
                    Message('Retencion :'||pRetencion); Message(' ');
                  --enf: 15.10.2014: para que retorne al anterior procedimiento.
                  --exit_form(no_commit, no_validate);                
                  raise form_trigger_failure;
            End;        
      --
        Vsequim := '1';    

      if pIndicador = 'S' then

          vsector := pSector;
           --
            Vsequim := '2';    
       
       if vsector is not null then

            begin
                   select cuenta_contable,
                                   CUENTA_CONTABLE_INTERES
                   into pCtaContable,
                               pCtaContable_int
                from cd_cuentas_retencion
                where codigo_empresa         = pCodEmpresa
                  and cod_retencion         = pRetencion
                  and cod_cartera           = pCodCartera 
                  and cod_sec_contable    = vsector
                  and forma_pago_int        = p_forma_pago_int;
            exception
                when others then
                    message('No encontro Cuenta Contable en CD_CUENTAS_RETENCION.'); 
                    --:global.error := '000643';
                    raise form_trigger_failure;
            end;    
            
              if pCtaContable_int is null then
                    message('No encontro Cuenta Contable para los Intereses en CD_CUENTAS_RETENCION.'); 
                    --:global.error := '000643';
                    utilitarios.mensaje('000665', variables.codidioma, 'CD');        
                    raise form_trigger_failure;
              end if;
              
              if pCtaContable is null then
                    message('No encontro Cuenta Contable para el Principal en CD_CUENTAS_RETENCION.'); 
                   --:global.error := '000643';
                   utilitarios.mensaje('000665', variables.codidioma, 'CD');        
                   raise form_trigger_failure;
              end if;      

       else
               --Cliente no tiene Sector Contable asignado, Verifique
               utilitarios.mensaje('000665', variables.codidioma, 'CD');
               MESSAGE('Cliente no tiene Sector Contable asignado, Verifique');
               --:global.error := '000665';
               raise form_trigger_failure;
       end if;
       --
         Vsequim := '3';    
       
      end if;  
    Exception
        --enf: 15.10.2014: para que retorne al anterior procedimiento.
        when form_trigger_failure then
            BITACORA_CIERRES_ERROR (variables.fecha); 
            return;
        When Others Then
             Message(Vsequim ||'-'|| vMensaj); 
             BITACORA_CIERRES_ERROR (variables.fecha);
             --exit_form(no_commit, no_validate);                        
            
    END CD_CAMBIO_CARTERA;
    
    PROCEDURE Asiento_Reclasificacion_Cd_Sec (Pcod_empresa in varchar2,
                                              Pcod_agencia in varchar2,
                                              PCod_Cartera in varchar2,
                                              PTip_Certificado in varchar2,
                                              Pcod_retencion in varchar2,
                                              Pestado in varchar2, --Estado del Certificado
                                              Pnumasiento in varchar2, --Num asiento caratula
                                              Pcuentacontable in varchar2, --Cuenta contable Orig
                                              Pnocredito in varchar2,
                                              PAplic in Varchar2,
                                              PSubAplic in Varchar2,
                                              PTipoTrans in varchar2,
                                              PSubTransCambio in varchar2,                                                    
                                              PNumTransa in varchar2,
                                              Pdescripcion in varchar2,
                                              Pfecha in date,
                                              Pcliente    in varchar2,
                                              pAgencia in varchar2,
                                              PsectorActual in varchar2,
                                              PsectorNuevo in varchar2,
                                              PMontoCD in number,
                                              pMon_int_x_pagar IN NUMBER,
                                              pPla_Dias                        IN NUMBER,
                                              pClasificacion            IN VARCHAR2,
                                              pCod_Moneda                    IN VARCHAR2,                                                                    
                                              PTc1 in out number,
                                              PTc2 in out Number,
                                              PMensajeError in out varchar2
                                              ) IS
        --EFECTUA : Reclasificaci√≥n de Certificados                                   
        --HISTORIA: 
                                                                                
        BCG_INTERFACE Exception;
        vctacontable        varchar2(25);
        vIndRet             varchar2(1);
        --
        Vsequim                            varchar2(10);
        vMensaj                            varchar2(100);
        vCentral                        varchar2(1);
        vCapitalizable      varchar2(1):= null;
        vCodCartera_Int   cd_certificado.cod_cartera%type:= null;  
        vCtaContable_IntA     cd_certificado.cuenta_contable%type:= null;
        vCtaContable_IntN     cd_certificado.cuenta_contable%type:= null;  
        vCtaContable_IntR     cd_certificado.cuenta_contable%type:= null; 
        vCtaContableN            cd_certificado.cuenta_contable%type:= null;
        vCtaContableR            cd_certificado.cuenta_contable%type:= null;    
        vNumError            varchar2(6):= null; 
        vSqlCode             number:= null;   

      
    BEGIN 

        Vsequim := '1';
        vMensaj := 'Error ejecutando reclasificacion de CD para el cliente '||Pcliente;

        if pTip_Certificado in ('CV','CF','VCV','VCF') then
             vCapitalizable := 'C';
        else
             vCapitalizable := 'N';
        end if;        
        
        Vsequim := '1.1';
        vMensaj := 'Error buscando cartera de intereses del CD para el cliente '||Pcliente;
                        
                            
        vCodCartera_Int := PCod_Cartera;--le asigno la cartera del cd
                             
        cd_obt_cartera_sector( Pcod_empresa, 
                               vCtaContable_IntA, 
                               vCodCartera_Int,
                               pPla_Dias,
                               pClasificacion, 
                               'N', -- indicador de Vencido (S), Vigente (N), Vista (V)
                               pCod_Moneda, 
                               pSectorActual,
                               vCapitalizable,
                               vNumError, 
                               vSqlcode,
                               'I' -- cta de intereses activos.
                               ); 
                                                 
        if vNumError is not null then
            utilitarios.mensaje(vNumError, variables.codidioma, 'CD');
            raise form_trigger_failure ;
        end if;    
                 
        cd_obt_cartera_sector( Pcod_empresa, 
                               vCtaContable_IntN, 
                               vCodCartera_Int,
                               pPla_Dias,
                               pClasificacion, 
                               'N', -- indicador de Vencido (S), Vigente (N), Vista (V)
                               pCod_Moneda, 
                               pSectorNuevo,
                               vCapitalizable,
                               vNumError, 
                               vSqlcode,
                               'I' -- cta de intereses activos.
                               ); 
                                                 
        if vNumError is not null then
            utilitarios.mensaje(vNumError, variables.codidioma, 'CD');
            raise form_trigger_failure ;
        end if;        
                         
        Vsequim := '1.2';
        --                 
        if vCodCartera_int is null then 
         if vNumerror = '000183' then 
            utilitarios.mensaje_error (vNumError, variables.codidioma, 'CD', vSqlcode);
            raise form_trigger_failure ;
         else
            utilitarios.mensaje(vNumerror, variables.codidioma, 'CD');
            raise form_trigger_failure ;
         end if;   
        end if ;    
                         
        Vsequim := '1.3';
        --
        If     Pestado = 'A' Then
            
            --Si no es centralizada haz el asiento
            Es_Centralizada ( Pcuentacontable,
                              vCentral);--S o N
                                                                                                                                    
            If vCentral = 'N' Then        
                                                
                    if pMon_int_x_pagar > 0 then
        
                        CG.CG_UTL.Lineas_del_Asiento(Pcod_empresa, 
                                                   Pcod_agencia,
                                                   PAplic, 
                                                   PSubAplic, 
                                                   PTipoTrans, 
                                                   PSubTransCambio,
                                                   PNumTransa,                            
                                                   Pdescripcion, 
                                                   Pfecha, 
                                                   Pfecha, 
                                                   Pfecha, 
                                                   Pnumasiento, 
                                                   vCtaContable_IntA, 
                                                   PAgencia,
                                                   pMon_int_x_pagar, 
                                                   'S', 
                                                   'D', 
                                                   'N', 
                                                   pTC1, 
                                                   pTC2,
                                                   variables.usuario, 
                                                   PMensajeError);
                                                   
                            Vsequim := '2';          
                            vMensaj := 'Error en asiento debito del CD pMon_int_x_pagar para el cliente '||Pcliente;
        
                          if PMensajeError is not null then
                            UTILITARIOS.mensaje_error(PMensajeError, variables.CodIdioma, 'CD', SQLCODE/*DBMS_ERROR_CODE*/);
                            raise form_trigger_failure;
                          end if;                        
                          --
                          pTC1 := null;            
                          pTC2 := null;            
                                                                                
                          CG.CG_UTL.Lineas_del_Asiento(Pcod_empresa,
                                                       Pcod_agencia,
                                                       PAplic, 
                                                       PSubAplic, 
                                                       PTipoTrans, 
                                                       PSubTransCambio,
                                                       PNumTransa, 
                                                       Pdescripcion, 
                                                       Pfecha, 
                                                       Pfecha, 
                                                       Pfecha, 
                                                       Pnumasiento, 
                                                       vCtaContable_IntN, 
                                                       PAgencia,
                                                       pMon_int_x_pagar, 
                                                       'S', 
                                                       'C', 
                                                       'N', 
                                                       pTC1, 
                                                       pTC2,
                                                       variables.usuario, 
                                                       PMensajeError);
                            
                            Vsequim := '2.1';    
                            vMensaj := 'Error en asiento credito del CD pMon_int_x_pagar para el cliente '||Pcliente;
                                                           
                          if PMensajeError is not null then
                            UTILITARIOS.mensaje_error(PMensajeError, variables.CodIdioma, 'CD', SQLCODE/*DBMS_ERROR_CODE*/);
                            raise form_trigger_failure;
                          end if;        
                          
                    End If;--pMon_int_x_pagar > 0 
                
                    cd_obt_cartera_sector( Pcod_empresa, 
                                           vCtaContableN, 
                                           PCod_Cartera,
                                           pPla_Dias,
                                           pClasificacion, 
                                           'N', -- indicador de Vencido (S), Vigente (N), Vista (V)
                                           pCod_Moneda, 
                                           pSectorNuevo,
                                           vCapitalizable,
                                           vNumError, 
                                           vSqlcode,
                                           'P' -- cta de intereses activos.
                                           ); 
                                                     
                    if vNumError is not null then
                        utilitarios.mensaje(vNumError, variables.codidioma, 'CD');
                        raise form_trigger_failure ;
                    end if;    
            
                    CG.CG_UTL.Lineas_del_Asiento(Pcod_empresa, 
                                                   Pcod_agencia,
                                                   PAplic, 
                                                   PSubAplic, 
                                                   PTipoTrans, 
                                                   PSubTransCambio,
                                                   PNumTransa,                            
                                                   Pdescripcion, 
                                                   Pfecha, 
                                                   Pfecha, 
                                                   Pfecha, 
                                                   Pnumasiento, 
                                                   Pcuentacontable, 
                                                   PAgencia,
                                                   PMontoCD, 
                                                   'S', 
                                                   'D', 
                                                   'N', 
                                                   pTC1, 
                                                   pTC2,
                                                   variables.usuario, 
                                                   PMensajeError);
                                                   
                        Vsequim := '3';          
                        vMensaj := 'Error en asiento debito del CD activo para el cliente '||Pcliente;
                                       
                      if PMensajeError is not null then
                        UTILITARIOS.mensaje_error(PMensajeError, variables.CodIdioma, 'CD', SQLCODE/*DBMS_ERROR_CODE*/);
                        raise form_trigger_failure;
                      end if;                        
                      --
                      pTC1 := null;            
                      pTC2 := null;            
                                                            
                      CG.CG_UTL.Lineas_del_Asiento(Pcod_empresa,
                                                   Pcod_agencia,
                                                   PAplic, 
                                                   PSubAplic, 
                                                   PTipoTrans, 
                                                   PSubTransCambio,
                                                   PNumTransa, 
                                                   Pdescripcion, 
                                                   Pfecha, 
                                                   Pfecha, 
                                                   Pfecha, 
                                                   Pnumasiento, 
                                                   vCtaContableN, 
                                                   PAgencia,
                                                   PMontoCD, 
                                                   'S', 
                                                   'C', 
                                                   'N', 
                                                   pTC1, 
                                                   pTC2,
                                                   variables.usuario, 
                                                   PMensajeError);
                                                   
                        Vsequim := '3.1';    
                        vMensaj := 'Error en asiento credito del CD activo para el cliente '||Pcliente;
                                       
                      if PMensajeError is not null then
                        UTILITARIOS.mensaje_error(PMensajeError, variables.CodIdioma, 'CD', SQLCODE/*DBMS_ERROR_CODE*/);
                        raise form_trigger_failure;
                      end if;
                      
            End If;--Pestado = 'A' Si no es centralizada haz el asiento
          
        ElsIf Pestado = 'R' Then

                CD_CAMBIO_CARTERA (Pcod_empresa,
                                   Pcod_retencion,
                                   PCod_Cartera,
                                   PTip_Certificado,
                                   PSectorActual,
                                   vIndRet,
                                   vctacontableR,
                                   vctacontable_intR,
                                   vCapitalizable); --: Forma Pago Int
                Vsequim := '4';
                vMensaj := 'Error buscando cambio cartera del CD Retenido para el cliente '||Pcliente;

              if not valida_cartera_dest(Pcuentacontable, vctacontableR) then
                utilitarios.mensaje('000409', variables.codIdioma, 'CD');
                raise form_trigger_failure;
              end if;
              if not valida_cartera_dest(vCtaContable_IntA, vctacontable_intR) then
                utilitarios.mensaje('000409', variables.codIdioma, 'CD');
                raise form_trigger_failure;
              end if;        

              CD_CAMBIO_CARTERA (Pcod_empresa,
                                 Pcod_retencion,
                                 PCod_Cartera,
                                 PTip_Certificado,
                                 PSectorNuevo,
                                 vIndRet,
                                 vctacontableN,
                                 vctacontable_intN,
                                 vCapitalizable); --: Forma Pago Int
                Vsequim := '4';
                vMensaj := 'Error buscando cambio cartera del CD Retenido para el cliente '||Pcliente;

              if not valida_cartera_dest(Pcuentacontable, vctacontableN) then
                utilitarios.mensaje('000409', variables.codIdioma, 'CD');
                raise form_trigger_failure;
              end if;
              
              if not valida_cartera_dest(vCtaContable_IntA, vctacontable_intN) then
                utilitarios.mensaje('000409', variables.codIdioma, 'CD');
                raise form_trigger_failure;
              end if;        
            
                --Si no es centralizada haz el asiento
              Es_Centralizada ( vctacontableR,
                                                    vCentral);--S o N
                                                    
              If vCentral = 'N' Then    

                    Es_Centralizada ( vctacontableN,vCentral);--S o N
                                                    
                  if vCentral = 'N' Then    
                      
                        if pMon_int_x_pagar > 0 then
        
                                CG.CG_UTL.Lineas_del_Asiento(Pcod_empresa, 
                                                             Pcod_agencia,
                                                             PAplic, 
                                                             PSubAplic, 
                                                             PTipoTrans, 
                                                             PSubTransCambio,
                                                             PNumTransa, 
                                                             Pdescripcion, 
                                                             Pfecha, 
                                                             Pfecha, 
                                                             Pfecha, 
                                                             Pnumasiento, 
                                                             vctacontable_intR, 
                                                             PAgencia,
                                                             pMon_int_x_pagar, 
                                                             'S', 
                                                             'D', 
                                                             'N', 
                                                             pTC1, 
                                                             pTC2,
                                                             variables.usuario, 
                                                             PMensajeError);
                                Vsequim := '5';
                                vMensaj := 'Error en asiento debito del CD retenido pMon_int_x_pagar para el cliente '||Pcliente;
                                                         
                              if PMensajeError is not null then
                                UTILITARIOS.mensaje_error(PMensajeError, variables.CodIdioma, 'CD', SQLCODE/*DBMS_ERROR_CODE*/);
                                raise form_trigger_failure;
                              end if;
                              --
                              pTC1 := null;
                              pTC2 := null;
                          
                        
                              CG.CG_UTL.Lineas_del_Asiento(Pcod_empresa,
                                                           Pcod_agencia,
                                                           PAplic, 
                                                           PSubAplic, 
                                                           PTipoTrans, 
                                                           PSubTransCambio,
                                                           PNumTransa, 
                                                           Pdescripcion, 
                                                           Pfecha, 
                                                           Pfecha, 
                                                           Pfecha, 
                                                           Pnumasiento, 
                                                           vctacontable_intN, 
                                                           PAgencia,
                                                           pMon_int_x_pagar, 
                                                           'S', 
                                                           'C', 
                                                           'N', 
                                                           pTC1, 
                                                           pTC2,
                                                           variables.usuario, 
                                                           PMensajeError);
                                                   
                                Vsequim := '5.1';
                                vMensaj := 'Error en asiento credito del CD retenido pMon_int_x_pagar para el cliente '||Pcliente;
                        
                              if PMensajeError is not null then
                                UTILITARIOS.mensaje_error(PMensajeError, variables.CodIdioma, 'CD', SQLCODE/*DBMS_ERROR_CODE*/);
                                raise form_trigger_failure;
                              end if;
        
                        End If;--pMon_int_x_pagar > 0 
                         
                        CG.CG_UTL.Lineas_del_Asiento(Pcod_empresa, 
                                                     Pcod_agencia,
                                                     PAplic, 
                                                     PSubAplic, 
                                                     PTipoTrans, 
                                                     PSubTransCambio,
                                                     PNumTransa, 
                                                     Pdescripcion, 
                                                     Pfecha, 
                                                     Pfecha, 
                                                     Pfecha, 
                                                     Pnumasiento, 
                                                     vctacontableR, 
                                                     PAgencia,
                                                     PMontoCD, 
                                                     'S', 
                                                     'D', 
                                                     'N', 
                                                     pTC1, 
                                                     pTC2,
                                                     variables.usuario, 
                                                     PMensajeError);
                        Vsequim := '6';
                        vMensaj := 'Error en asiento debito del CD retenido para el cliente '||Pcliente;
                                                 
                      if PMensajeError is not null then
                        UTILITARIOS.mensaje_error(PMensajeError, variables.CodIdioma, 'CD', SQLCODE/*DBMS_ERROR_CODE*/);
                        raise form_trigger_failure;
                      end if;
                      --
                      pTC1 := null;
                      pTC2 := null;
                  
                
                      CG.CG_UTL.Lineas_del_Asiento(Pcod_empresa,
                                                   Pcod_agencia,
                                                   PAplic, 
                                                   PSubAplic, 
                                                   PTipoTrans, 
                                                   PSubTransCambio,
                                                   PNumTransa, 
                                                   Pdescripcion, 
                                                   Pfecha, 
                                                   Pfecha, 
                                                   Pfecha, 
                                                   Pnumasiento, 
                                                   vctacontableN, 
                                                   PAgencia,
                                                   PMontoCD, 
                                                   'S', 
                                                   'C', 
                                                   'N', 
                                                   pTC1, 
                                                   pTC2,
                                                   variables.usuario, 
                                                   PMensajeError);
                                           
                        Vsequim := '6.1';
                        vMensaj := 'Error en asiento credito del CD retenido para el cliente '||Pcliente;
                
                      if PMensajeError is not null then
                        UTILITARIOS.mensaje_error(PMensajeError, variables.CodIdioma, 'CD', SQLCODE/*DBMS_ERROR_CODE*/);
                        raise form_trigger_failure;
                      end if;
                      
                     end if; -- Central 
              End If;--Pestado = 'R' Si no es centralizada haz el asiento
      
        End If;          
         -- DNUR:27062013 se cambia la cuenta Contable en CD_Certificado por la nueva cuenta contable--
        if vCtaContableN is not null then
           update cd_certificado
              set cuenta_contable=vCtaContableN
            where cod_empresa=Pcod_empresa
              and num_certificado = Pnocredito;
            salvar_escondido;
        end if;
       
    Exception
        when form_trigger_failure then 
            PMensajeError := vMensaj ||' Vsequim:'||Vsequim||' '||vNumError|| ' '||SQLERRM;
            message('Error: '||PMensajeError);
            BITACORA_CIERRES_ERROR (variables.fecha);
            return;
        When Others Then
             PMensajeError := vMensaj ||' Vsequim:'||Vsequim||' '||vNumError|| ' '||SQLERRM;
             message('Error: '||PMensajeError);
             BITACORA_CIERRES_ERROR (variables.fecha);
            return;
    END Asiento_Reclasificacion_Cd_Sec;
    
    PROCEDURE Busca_Cuenta_Contable (Empresa       in number,
                                     Aplicacion    in varchar2,
                                     SubAplicacion in number,
                                     NConcepto     in varchar2,
                                     Sector        in varchar2,
                                     CtaCtable     in out varchar2,
                                     MensajeErr    in out varchar2) is
                                     
    -- Efect√∫a: Busca la cuenta contable para el sector enviado
    -- Historia: API 03/10/2012 -- Creaci√≥n

    BEGIN
         select CUENTA_CONTABLE
         into   CtaCtable
         from   CG_CUENTAS_X_CONCEPTO_SECTOR
         where  CODIGO_EMPRESA        = Empresa
         and    CODIGO_APLICACION     = Aplicacion
         and    CODIGO_SUB_APLICACION = SubAplicacion
         and    COD_SEC_CONTABLE      = Sector
         and    CONCEPTO              = NConcepto;         
      exception
       when no_data_found then
         --No encontro Cta para el concepto NConcepto
         --obt_mensaje_error('000067', 'CG', MensajeErr, NConcepto||', Sector '||Sector);
         MensajeErr := 'Tabla CG_CUENTAS_X_CONCEPTO_SECTOR No se encontro Cuenta Contable para el Concepto: '||NConcepto||', Sector '||Sector; -- NREGALADO Req.# 670380 10/06/2021  
         message(MensajeErr);
         BITACORA_CIERRES_ERROR (variables.fecha);         
         --return;
       when others then
         --Error del sistema
         --obt_mensaje_error('000099', 'CG', MensajeErr, 'Cuenta_Contable_Sector '||sqlcode);
         MensajeErr := 'Error del Sistema';
         message(MensajeErr);
         --return;
         BITACORA_CIERRES_ERROR (variables.fecha);
    END Busca_Cuenta_Contable;       
    
    PROCEDURE Asiento_Reclasificacion_CC_Sec (Pcod_empresa in varchar2,
                                              Pcod_agencia in varchar2,
                                              Pcod_producto in varchar2,
                                              Pestado in varchar2,
                                              pNumAsiento in varchar2,
                                              Pnocuenta in varchar2,
                                              PAplic in Varchar2,
                                              PSubAplic in Varchar2,
                                              PTipoTrans in varchar2,
                                              PSubTransCambio in varchar2,
                                              PNumTransa in varchar2,
                                              Pdescripcion in varchar2,
                                              Pfecha in date,
                                              Pcliente    in varchar2,
                                              pAgencia in varchar2,
                                              PsectorActual in varchar2,
                                              PsectorNuevo in varchar2,
                                              PSaldoCC in number,
                                              PInteresesCC in number,
                                              PSOBREG_MENOS_48H in number,
                                              PSOBREG_MAS_48H in number,
                                              PTc1 in out number,
                                              PTc2 in out Number,
                                              PMensajeError in out varchar2
                                              ) IS
                                                                        
    --EFECTUA : Inicializacion de Variables Locales Adicionales                                     
    --HISTORIA: API 03/10/2012 Creaci√≥n    
    --

        vMensajeError            varchar2(200); -- NREGALADO Req.# 670380 10/06/2021
        vCtaPrincipalInactivoA   varchar2(25);
        vCtaPrincipalA           varchar2(25);
        vCtaPrincipalInactivoN   varchar2(25);
        vCtaPrincipalN           varchar2(25);
        vCtaInteresesA           varchar2(25);
        vCtaInteresesN           varchar2(25);    
        vCtaAdelMenos48A         varchar2(25);
        vCtaAdelMas48A           varchar2(25);
        vCtaAdelMenos48N         varchar2(25);
        vCtaAdelMas48N           varchar2(25);
        Vsequim                  varchar2(10);
        vMensaj                  varchar2(1000);    
        vCentralA                varchar2(1);
        vCentralN                varchar2(1);
        --DNUR
        vCtaCreditoEmb varchar2(30);
        vCtaDebitoEmb  varchar2(30);
        --
    BEGIN
        Vsequim    := '0';
        vMensaj    := 'Error entrando a reclasificacion CC para el cliente '||Pcliente;
      -- Para que busque la cuenta contable por sector actual
      Busca_Cuenta_Contable(variables.CodEmpresa,
                            'BCC',
                            Pcod_producto,
                            'PRINCIPAL_INACTIVO',
                            PSectorActual,
                            vCtaPrincipalInactivoA,
                            vMensajeError);
                            
        Vsequim    := '0.1';
          
      --
      if  ( vMensajeError is not null ) then              
          pMensajeError := vMensajeError;
          return;
      end if;
        Vsequim    := '0.2';
              
      -- Para que busque la cuenta contable por sector
      Busca_Cuenta_Contable (variables.CodEmpresa,
                             'BCC',
                             Pcod_producto,
                             'PRINCIPAL',
                             PSectorActual,
                             vCtaPrincipalA,
                             vMensajeError);
      --
        Vsequim    := '0.3';
              
      if  ( vMensajeError is not null ) then
          pMensajeError := vMensajeError;
        return;
      end if;
      
        Vsequim    := '0.4';
      
      -- Para que busque la cuenta contable por sector nuevo
      Busca_Cuenta_Contable(variables.CodEmpresa,
                            'BCC',
                            Pcod_producto,
                            'PRINCIPAL_INACTIVO',
                            PSectorNuevo,
                            vCtaPrincipalInactivoN,
                            vMensajeError);
        
        Vsequim    := '0.11';
          
      --
      if  ( vMensajeError is not null ) then              
          pMensajeError := vMensajeError;
          return;
      end if;
        Vsequim    := '0.21';
              
      -- Para que busque la cuenta contable por sector
      Busca_Cuenta_Contable (variables.CodEmpresa,
                             'BCC',
                             Pcod_producto,
                             'PRINCIPAL',
                             PSectorNuevo,
                             vCtaPrincipalN,
                             vMensajeError);
      --
        Vsequim    := '0.31';
              
      if  ( vMensajeError is not null ) then
          pMensajeError := vMensajeError;
        return;
      end if;
      
        Vsequim    := '0.41';

      -- Para que busque la cuenta contable de intereses por sector
      Busca_Cuenta_Contable (variables.CodEmpresa,
                                'BCC',
                                Pcod_producto,
                                'INT_X_PAGAR_X_SECTOR',
                                PSectorActual,
                                vCtaInteresesA,
                                vMensajeError);
      --
        Vsequim    := '0.42';
              
      if  ( vMensajeError is not null ) then
          pMensajeError := vMensajeError;
        return;
      end if;
      
      -- Para que busque la cuenta contable  de intereses por sector
      Busca_Cuenta_Contable (variables.CodEmpresa,
                                'BCC',
                                Pcod_producto,
                                'INT_X_PAGAR_X_SECTOR',
                                PSectorNuevo,
                                vCtaInteresesN,
                                vMensajeError);
      --
        Vsequim    := '0.43';
              
      if  ( vMensajeError is not null ) then
          pMensajeError := vMensajeError;
        return;
      end if;       
      
      -- Para que las Tasas de Cambio las busque
      PTc1 := null;
      PTc2 := null;
              
        If Pestado not in ('0','2','6') Then --Asiento a Cuentas Activas
            
            --Si no es centralizada haz el asiento
            Es_Centralizada ( vCtaPrincipalA,
                                                vCentralA);--S o N
            Es_Centralizada ( vCtaPrincipalN,
                                                vCentralN);--S o N                                    
                                                
            If vCentralA = 'N' and vCentralN = 'N' Then                   
                
                Vsequim    := '1';
                vMensaj    := 'Error Asiento a Cuentas Activas reclasificacion CC para el cliente '||Pcliente;            
                  
                  CG.CG_UTL.Lineas_del_Asiento (Pcod_empresa,
                                              Pcod_Agencia,
                                              PAplic,
                                              PSubAplic,
                                              PTipoTrans,
                                              PSubTransCambio,
                                              PNumTransa,
                                              Pdescripcion,
                                              Pfecha,
                                              Pfecha,
                                              Pfecha,
                                              Pnumasiento,
                                              vCtaPrincipalA,
                                              PAgencia,
                                              PSaldoCC,
                                              'S',
                                              'D',
                                              'N',
                                              PTc1,
                                              PTc2,
                                              variables.Usuario,
                                              vMensajeError
                                              );
                Vsequim    := '1.1';
                              
            if ( vMensajeError is not null ) then              
                pMensajeError := vMensajeError;
                return;
            end if;
              --
                Vsequim    := '1.2';
          
                    CG.CG_UTL.Lineas_del_Asiento (Pcod_empresa,
                                                Pcod_Agencia,
                                                PAplic,
                                                PSubAplic,
                                                PTipoTrans,
                                                PSubTransCambio,
                                                PNumTransa,
                                                Pdescripcion,
                                                Pfecha,
                                                Pfecha,
                                                Pfecha,
                                                Pnumasiento,
                                                vCtaPrincipalN,
                                                PAgencia,
                                                PSaldoCC,
                                                'S',
                                                'C',
                                                'N',
                                                PTc1,
                                                PTc2,
                                                variables.Usuario,
                                                vMensajeError
                                                );
                Vsequim    := '1.3';
                
              if ( vMensajeError is not null ) then
                  pMensajeError := vMensajeError;
                    return;
              end if;       
                     
                Vsequim    := '1.4';
        
                -- Intereses por pagar
                Es_Centralizada ( vCtaInteresesA,
                                                    vCentralA);--S o N
                Es_Centralizada ( vCtaInteresesN,
                                                    vCentralN);--S o N                                    
                                                    
                If vCentralA = 'N' and vCentralN = 'N' and PInteresesCC > 0 Then                   
                    
                    Vsequim    := '1.5';
                    vMensaj    := 'Error Asiento Intereses a Cuentas Activas reclasificacion CC para el cliente '||Pcliente;            
                      CG.CG_UTL.Lineas_del_Asiento (Pcod_empresa,
                                          Pcod_Agencia,
                                          PAplic,
                                          PSubAplic,
                                          PTipoTrans,
                                          PSubTransCambio,
                                          PNumTransa,
                                          Pdescripcion,
                                          Pfecha,
                                          Pfecha,
                                          Pfecha,
                                          Pnumasiento,
                                          vCtaInteresesA,
                                          PAgencia,
                                          PInteresesCC,
                                          'S',
                                          'D',
                                          'N',
                                          PTc1,
                                          PTc2,
                                          variables.Usuario,
                                          vMensajeError
                                          );
                    Vsequim    := '1.6';
                              
                    if ( vMensajeError is not null ) then              
                        pMensajeError := vMensajeError;
                        return;
                    end if;
                    --
                    Vsequim    := '1.7';
          
                    CG.CG_UTL.Lineas_del_Asiento (Pcod_empresa,
                                                    Pcod_Agencia,
                                                    PAplic,
                                                    PSubAplic,
                                                    PTipoTrans,
                                                    PSubTransCambio,
                                                    PNumTransa,
                                                    Pdescripcion,
                                                    Pfecha,
                                                    Pfecha,
                                                    Pfecha,
                                                    Pnumasiento,
                                                    vCtaInteresesN,
                                                    PAgencia,
                                                    PInteresesCC,
                                                    'S',
                                                    'C',
                                                    'N',
                                                    PTc1,
                                                    PTc2,
                                                    variables.Usuario,
                                                    vMensajeError
                                                    );
                    Vsequim    := '1.8';
                    
                      if ( vMensajeError is not null ) then
                          pMensajeError := vMensajeError;
                            return;
                      end if;              
                        Vsequim    := '1.9';
                end if;
            
                If Pestado not in ('0', '2') Then  --Asiento a Cuentas SobreGiros
                    
                    Vsequim    := '2';
                    vMensaj    := 'Error Asiento a Cuentas SobreGiros reclasificacion CC para el cliente '||Pcliente;                                

                    -- Para que las Tasas de Cambio las busque
                    PTc1 := null;
                    PTc2 := null;
                    
                    -- Contabiliza Adelantos Menos 48 Horas
                  --
                  If PSOBREG_MENOS_48H > 0 then
                      --
                        Vsequim    := '2.1';
                        vMensaj    := 'Error Asiento a Cuentas SobreGiros ADELANTO_HASTA_48_HORAS reclasificacion CC para el cliente '||Pcliente;                                
                                    
                      Busca_Cuenta_Contable(Pcod_empresa,
                                             'BCC',
                                             Pcod_producto,
                                             'ADELANTO_HASTA_48_HORAS',
                                             PSectorActual,
                                             vCtaAdelMenos48A,
                                             vMensajeError);
                  
                      if  ( vMensajeError is not null ) then
                          pMensajeError := vMensajeError;
                          return;
                      end if;
                  
                        Vsequim    := '2.2';
                        
                        Busca_Cuenta_Contable(Pcod_empresa,
                                         'BCC',
                                         Pcod_producto,
                                         'ADELANTO_HASTA_48_HORAS',
                                         PSectorNuevo,
                                         vCtaAdelMenos48N,
                                         vMensajeError);
                  
                      if  ( vMensajeError is not null ) then
                          pMensajeError := vMensajeError;
                          return;
                      end if;
                  
                        Vsequim    := '2.21';
                        
                        --Si no es centralizada haz el asiento
                        Es_Centralizada ( vCtaAdelMenos48A,
                                          vCentralA);--S o N
                        
                        Es_Centralizada ( vCtaAdelMenos48N,
                                          vCentralN);--S o N                                                        
                                
                      If vCentralA = 'N' and vCentralN = 'N' Then                                                                                        
                                                                                                            
                          CG.CG_UTL.Lineas_del_Asiento (
                                                     to_number(pCod_Empresa),
                                                     to_number(pCod_Agencia),
                                                     pAplic                   ,
                                                     pSubAplic        ,
                                                     pTipoTrans             ,
                                                     pSubTransCambio        ,
                                                     pNumTransa                         ,
                                                     pdescripcion           ,
                                                     pfecha            ,
                                                     pfecha            ,
                                                     pfecha            ,
                                                     pNumAsiento            ,
                                                     vCtaAdelMenos48A          ,
                                                     PAgencia                        ,
                                                     PSOBREG_MENOS_48H            ,
                                                     'S'                                        ,
                                                     'D'                            ,
                                                              'N'                                       ,
                                                     PTc1                                ,
                                                     PTc2                   ,
                                                     variables.Usuario     ,
                                                     vMensajeError
                                                                  );
                                                                  
                          
                          if ( vMensajeError is not null )  then
                              pMensajeError := vMensajeError;
                              return;
                              
                          end if;
                          --
                      
                             Vsequim    := '2.3';
                      
                        CG.CG_UTL.Lineas_del_Asiento (
                                             to_number(pCod_Empresa),
                                             to_number(pCod_Agencia),
                                             pAplic                   ,
                                             pSubAplic                    ,
                                             pTipoTrans             ,
                                             pSubTransCambio        ,
                                             pNumTransa                         ,
                                             pdescripcion           ,
                                             pfecha                                    ,
                                             pfecha                                    ,
                                             pfecha                                    ,
                                             pNumAsiento            ,
                                             vCtaPrincipalA            ,
                                             Pagencia                        ,
                                             PSOBREG_MENOS_48H            ,
                                             'S'                                        ,
                                             'C'                            ,
                                                      'N'                                       ,
                                             PTc1                                ,
                                             PTc2                   ,
                                             variables.Usuario     ,
                                             vMensajeError
                                                              );
                             Vsequim    := '2.4';
                          if ( vMensajeError is not null ) then
                              pMensajeError := vMensajeError;
                              return;
                          end if;
                      
                      End If; --Fin si no es centralizada Pestado not in ('0','2','6')-- PSOBREG_MENOS_48H > 0
                                    
                  end if;--PSOBREG_MENOS_48H > 0
                                     
                    Vsequim    := '2.5';
                  -- Contabiliza Adelantos Mas 48 Horas
                  --
                  if PSOBREG_MAS_48H > 0  then
            
                        vMensaj    := 'Error Asiento a Cuentas SobreGiros ADELANTO_MAYOR_48_HORAS reclasificacion CC para el cliente '||Pcliente;                                
                                          
                      Busca_Cuenta_Contable(pCod_Empresa,
                                             'BCC',
                                             PCod_Producto,
                                             'ADELANTO_MAYOR_48_HORAS',
                                             PSectorActual,
                                             vCtaAdelMas48A,
                                             vMensajeError);
                  --
                        Vsequim    := '2.6';
                  
                      if  ( vMensajeError is not null ) then                                  
                          pMensajeError := vMensajeError;
                          return;
                      end if;
                        
                        Busca_Cuenta_Contable(pCod_Empresa,
                                         'BCC',
                                         PCod_Producto,
                                         'ADELANTO_MAYOR_48_HORAS',
                                         PSectorNuevo,
                                         vCtaAdelMas48N,
                                         vMensajeError);
                        --
                        Vsequim    := '2.61';
                  
                      if  ( vMensajeError is not null ) then                                  
                          pMensajeError := vMensajeError;
                          return;
                      end if;
                  
                        Vsequim    := '2.7';
                        --
                                                
                        --Si no es centralizada haz el asiento
                        Es_Centralizada ( vCtaAdelMas48A,
                                          vCentralA);--S o N
                        
                        Es_Centralizada ( vCtaAdelMas48N,
                                          vCentralN);--S o N                                    
                                                            
                    If vCentralA = 'N' and vCentralN = 'N'  Then                                                                                                
                                                                              
                              CG.CG_UTL.Lineas_del_Asiento (
                                                 to_number(pCod_Empresa)    ,
                                                 to_number(PCod_Agencia) ,
                                                 pAplic                 ,
                                                 pSubAplic                    ,
                                                 pTipoTrans             ,
                                                 pSubTransCambio        ,
                                                 pNumTransa                         ,
                                                 pdescripcion           ,
                                                 pfecha            ,
                                                 pfecha            ,
                                                 pfecha            ,
                                                 pNumAsiento         ,
                                                 vCtaAdelMas48A            ,
                                                 Pagencia                           ,
                                                 PSOBREG_MAS_48H              ,
                                                 'S'                                        ,
                                                 'D'                            ,
                                                          'N'                                       ,
                                                 PTc1                ,
                                                 PTc2           ,
                                                 variables.Usuario     ,
                                                 vMensajeError
                                                              );
                                Vsequim    := '2.8';
                                
                          if ( vMensajeError is not null ) then
                              pMensajeError := vMensajeError;
                              return;
                          end if;
                          --
                                Vsequim    := '2.9';
                          
                          CG.CG_UTL.Lineas_del_Asiento (
                                                 to_number(pCod_Empresa)    ,
                                                 to_number(PCod_Agencia) ,
                                                 pAplic                   ,
                                                 pSubAplic        ,
                                                 pTipoTrans             ,
                                                 pSubTransCambio        ,
                                                 pNumTransa                         ,
                                                 pdescripcion           ,
                                                 pfecha            ,
                                                 pfecha            ,
                                                 pfecha            ,
                                                 pNumAsiento         ,
                                                 vCtaAdelMas48N         ,
                                                 Pagencia                              ,
                                                 PSOBREG_MAS_48H                ,
                                                 'S'                                        ,
                                                 'C'                            ,
                                                          'N'                                       ,
                                                 PTc1                ,
                                                 PTc2           ,
                                                 variables.Usuario     ,
                                                 vMensajeError
                                                                  );
                                                                  
                            Vsequim    := '2.10';
                                                    
                      if ( vMensajeError is not null )  then
                          pMensajeError := vMensajeError;
                          return;
                      end if;
                                                  
                            Vsequim    := '2.11';
                                        
                    End If;--Fin si no es centralizada Pestado not in ('0','2','6')-- PSOBREG_MAS_48H > 0
                                        
                  End if;--PSOBREG_MAS_48H > 0
                                  
                End If; --Pestado not in ('0', '2') 
        
            End If;    --Fin si no es centralizada Pestado not in ('0','2','6')       

        ElsIf Pestado = '6' Then --ASiento a Cuentas Inactivas

            Vsequim    := '3';
            vMensaj    := 'Error ASiento a Cuentas Inactivas reclasificacion CC para el cliente '||Pcliente;                                

            --Si no es centralizada haz el asiento
             Es_Centralizada ( vCtaPrincipalInactivoA,
                               vCentralA);--S o N
            
             Es_Centralizada ( vCtaPrincipalInactivoN,
                               vCentralN);--S o N                                    
                                                
           If vCentralA = 'N' and vCentralN = 'N' Then
              -- Para que las Tasas de Cambio las busque
              PTc1 := null;
              PTc2 := null;          
               
              CG.CG_UTL.Lineas_del_Asiento ( Pcod_empresa,
                                           Pcod_Agencia,
                                           PAplic,
                                           PSubAplic,
                                           PTipoTrans,
                                           PSubTransCambio,
                                           PNumTransa,
                                           Pdescripcion,
                                           Pfecha,
                                           Pfecha,
                                           Pfecha,
                                           Pnumasiento,
                                           vCtaPrincipalInactivoA,
                                           Pagencia,
                                           PSaldoCC,
                                           'S',
                                           'D',
                                           'N',
                                           PTc1,
                                           PTc2,
                                           variables.Usuario,
                                           vMensajeError
                                           );
                Vsequim    := '3.1';
                                                                  
              if ( vMensajeError is not null ) then              
                  pMensajeError := vMensajeError;
                    return;
              end if;
          
                Vsequim    := '3.2';
                          
                CG.CG_UTL.Lineas_del_Asiento (Pcod_empresa,
                                                Pcod_Agencia,
                                                PAplic,
                                                PSubAplic,
                                                PTipoTrans,
                                                PSubTransCambio,
                                                PNumTransa,
                                                Pdescripcion,
                                                Pfecha,
                                                Pfecha,
                                                Pfecha,
                                                Pnumasiento,
                                                vCtaPrincipalInactivoN,
                                                Pagencia,
                                                PSaldoCC,
                                                'S',
                                                'C',
                                                'N',
                                                PTc1,
                                                PTc2,
                                                variables.Usuario,
                                                vMensajeError
                                                );
                Vsequim    := '3.3';
                                                        
              if ( vMensajeError is not null ) then
                  pMensajeError := vMensajeError;
                    return;
              end if; 
           
           End If; --Fin si no es centralizada Pestado = '6'
        
        End If;
        
       Vsequim    := '3.4';
       --- **** CLASIFICA EMBARGO DNUR:05112021***** ---
       for i in (select c.sal_contabilizado,c.tip_transacc,c.subtip_transacc   
                  from embargo e, embargo_x_cuenta c
                 where     e.cod_empresa = c.cod_empresa
                   and e.num_embargo = c.num_embargo
                   and ((estado     = 'A' and trunc (fec_inicio) <= pfecha))
                   and cod_sistema  = 'CC'
                   and nvl(c.sal_contabilizado,0) >0
                   and c.num_cuenta =  Pnocuenta
                 --ACollado--03/07/2024--IPF-4626--Agregamos Fallecidas
                  UNION
                 select c.sal_contabilizado,c.tip_transacc,c.subtip_transacc   
                  from fallecido e, fallecido_x_cuenta c
                 where     e.cod_empresa = c.cod_empresa
                   and e.num_fallecido = c.num_fallecido
                   and ((estado     = 'A' and trunc (fec_inicio) <= pfecha))
                   and cod_sistema  = 'CC'
                   and nvl(c.sal_contabilizado,0) >0
                   and c.num_cuenta =  Pnocuenta   )
       loop
         begin
             
             begin
                 select b.concepto
                   into vCtaDebitoEmb
                   from cg_codific_resumen a,cg_codific_detalle b 
                  where a.codigo_empresa = b.codigo_empresa
                    and a.id_codificacion = b.id_codificacion
                    and a.codigo_aplicacion = 'BCC'
                    and a.codigo_sub_aplicacion = Pcod_producto
                    and a.codigo_tipo_transaccion = i.tip_transacc
                    and a.codigo_subtransaccion = i.subtip_transacc
                    and a.COD_SEC_CONTABLE = PsectorActual
                    and tipo_movimiento = 'C';
             exception
                when no_data_found then
                    select b.concepto
                      into vCtaDebitoEmb
                      from cg_codific_resumen a,cg_codific_detalle b 
                     where a.codigo_empresa = b.codigo_empresa
                       and a.id_codificacion = b.id_codificacion
                       and a.codigo_aplicacion = 'BCC'
                       and a.codigo_sub_aplicacion = Pcod_producto
                       and a.codigo_tipo_transaccion = i.tip_transacc
                       and a.codigo_subtransaccion is null
                       and a.COD_SEC_CONTABLE = PsectorActual
                       and tipo_movimiento = 'C';
             end;
             --
             begin
                select b.concepto
                  into vCtaCreditoEmb
                  from cg.cg_codific_resumen a,cg.cg_codific_detalle b 
                 where a.codigo_empresa = b.codigo_empresa
                   and a.id_codificacion = b.id_codificacion
                   and a.codigo_aplicacion = 'BCC'
                   and a.codigo_sub_aplicacion = Pcod_producto
                   and a.codigo_tipo_transaccion = i.tip_transacc
                   and a.codigo_subtransaccion = i.subtip_transacc
                   and a.COD_SEC_CONTABLE = PsectorNuevo
                   and tipo_movimiento = 'C';
             --
             exception
                when no_data_found then
                    select b.concepto
                      into vCtaCreditoEmb
                      from cg.cg_codific_resumen a,cg.cg_codific_detalle b 
                     where a.codigo_empresa = b.codigo_empresa
                       and a.id_codificacion = b.id_codificacion
                       and a.codigo_aplicacion = 'BCC'
                       and a.codigo_sub_aplicacion = Pcod_producto
                       and a.codigo_tipo_transaccion = i.tip_transacc
                       and a.codigo_subtransaccion  is null
                       and a.COD_SEC_CONTABLE = PsectorNuevo
                       and tipo_movimiento = 'C';
             end;
             --
             Vsequim    := '3.41';
             --- **** CREAR LINEA ASIENTO ***** ---
             if vCtaDebitoEmb is not null then
                PTc1 := null;
                PTc2 := null;
                --
                CG.CG_UTL.Lineas_del_Asiento ( Pcod_empresa,
                                           Pcod_Agencia,
                                           PAplic,
                                           PSubAplic,
                                           PTipoTrans,
                                           PSubTransCambio,
                                           PNumTransa,
                                           Pdescripcion,
                                           Pfecha,
                                           Pfecha,
                                           Pfecha,
                                           Pnumasiento,
                                           vCtaDebitoEmb,
                                           Pagencia,
                                           i.sal_contabilizado,
                                           'S',
                                           'D',
                                           'N',
                                           PTc1,
                                           PTc2,
                                           variables.Usuario,
                                           vMensajeError
                                           );
                Vsequim    := '3.42';
                
                if ( vMensajeError is null ) then              
                    Vsequim    := '3.43';
                          
                    CG.CG_UTL.Lineas_del_Asiento (Pcod_empresa,
                                                    Pcod_Agencia,
                                                    PAplic,
                                                    PSubAplic,
                                                    PTipoTrans,
                                                    PSubTransCambio,
                                                    PNumTransa,
                                                    Pdescripcion,
                                                    Pfecha,
                                                    Pfecha,
                                                    Pfecha,
                                                    Pnumasiento,
                                                    vCtaCreditoEmb,
                                                    Pagencia,
                                                    i.sal_contabilizado,
                                                    'S',
                                                    'C',
                                                    'N',
                                                    PTc1,
                                                    PTc2,
                                                    variables.Usuario,
                                                    vMensajeError
                                                    );
                end if;
                Vsequim    := '3.43';
             end if;
             --
             dbms_output.put_line('Pnumasiento: '||Pnumasiento);
         exception
           when no_data_found then
                vCtaDebitoEmb :=null;
         end;      
          --
         
       end loop;
       --- **** FIN CLASIFICA EMBARGO DNUR:05112021***** ---
       Vsequim    := '3.5';
         
    Exception
        When Others Then
            --enf: 15.10.2014: para que retorne al anterior procedimiento.
            /*Set_Application_Property(Cursor_style, 'DEFAULT');
            Message(Vsequim ||' - '|| vMensaj); Message(' ');
        exit_form(no_commit, no_validate);    */                                     
            
          --return;
          
          MESSAGE('ERROR: '||SQLERRM);
          BITACORA_CIERRES_ERROR (variables.fecha);
    END Asiento_Reclasificacion_CC_Sec;
    
  PROCEDURE Proceso_Fact_Leas(
                    pCodCliente in VARCHAR2, --Codigo del cliente
                    pSectorAnterior in VARCHAR2, --Sector anterior del cliente   
                    pSectorNuevo in VARCHAR2, --Nuevo sector a asignar
                    TrnCode in VARCHAR2,  --1150 Para factoring y 1151 para leasing
                    pExito out Boolean
                )
          IS
         vValorEnvio xmltype;
         
        BEGIN
        PA.PKG_MDS.AgregaParamClob('ChannelName', 'B2000');--Canal de donde se envio. este caso B2000
        PA.PKG_MDS.AgregaParamClob('pClaveCliente', pCodCliente);
        PA.PKG_MDS.AgregaParamClob('pSectorAnterior', pSectorAnterior); --Sector anterior que tenia el lciente
        PA.PKG_MDS.AgregaParamClob('pSectorNuevo', pSectorNuevo); --Nuevo sector del cliente
        PA.PKG_MDS.AgregaParamClob('pUsuario', user);--Usuario que hace el request
                        
            
         vValorEnvio := PA.PKG_MDS.EMS_CONSUMO
                (   
                    pEmpresa => '1',
                    pURL => PARAM.PARAMETRO_X_EMPRESA('1','URL_MDT2','PA'),
                    pCanal => 'B2000',
                    pTerminalID => USER,
                    pTerminalIP =>  SYS_CONTEXT('USERENV','IP_ADDRESS'),
                    pTerminalSec => SYS_CONTEXT('USERENV', 'SESSIONID'),
                    pTransaccion => TrnCode,
                    pSubTrn => '03',
                    pMoneda => 'DOP'
                );  
          
          IF INSTR(vValorEnvio.getClobVal(), 'Acci√≥n realizada') > 0 THEN       
            pExito := true;
            return;
          END IF;
          
          pExito := false;
    END;
    
PROCEDURE ProcesoITC (
                          pFechaSistema     IN DATE, -- := to_char(calendar.fecha_actual_calendario('TC',vCodEmpresa,10499), 'YYYYMMDD');  
                          pFechaProceso     IN DATE, -- := replace(to_char(sysdate, 'HH12:MI:SS'),':');
                          pCodCliente       IN VARCHAR2, -- := Codigo de Cliente  
                          pCodSector        IN VARCHAR2, -- := '4221352000928630';--0247
                          pAgencia          IN VARCHAR2, -- := 'DM';
                          pCodigoRespuesta OUT VARCHAR2                          
                          ) is

pIdMensaje          VARCHAR2(4000);
pIdSolicitud        VARCHAR2 (1000);

vMsg                VARCHAR2(4000);
vKey                VARCHAR2(1000);
vReturn             VARCHAR2(1000);
pMsgRespuesta       VARCHAR2(1000);
vBloqueoException   EXCEPTION;
BEGIN
pIdMensaje := 'MSGSECTOR';

SELECT pa.ID_SOLICITUD_SEC_SEQ.nextval into pIdSolicitud FROM dual;

vMsg := rpad(pIdMensaje,10,' ')||--Mensaje
        rpad(pIdSolicitud,24,' ')||--id de solicitud es una secuencia
        to_char( pFechaSistema , 'YYYYMMDD')||--fecha del sysdate
        to_char( sysdate , 'HHMISS')||--hora del sysdate
        to_char( pFechaProceso , 'YYYYMMDD')||--FECHA DEL PROCESO 
        rpad(Variables.Usuario,10,' ')||--envia el usuario
        lpad(pCodCliente,14,'0')||--codigo del cliente
        rpad(pCodSector,6,' ')||--codigo del sector nuevo
        pAgencia||--agencia
        rpad('Actualizaci√≥n sector contable clientes ',80,' '); --mensaje de respuesta
        
        DBMS_OUTPUT.PUT_LINE('vMsg: ' || vMsg );
        MQSERIES.PUTMSG(vMsg, vKey, vReturn);                
        DBMS_OUTPUT.PUT_LINE('PUT: ' || vReturn || ' >> ' || vKey);
        
        vMsg := '';  
        vReturn := '0';      
        MQSERIES.GETMSG(vKey, vMsg, vReturn);              
        DBMS_OUTPUT.PUT_LINE('GET: ' || vReturn || ' >> ' || vMsg);
        
        if instr(vMsg, 'MQException') > 0 then
            pCodigoRespuesta := '1';
            pMsgRespuesta:= 'Error en ITC';
        else        
            pCodigoRespuesta:= TC.TC_PROCS_ONLINE.EXTRAE_DATO( vMsg, 0,',','|');   
            select substr(pCodigoRespuesta,0,instr(pCodigoRespuesta, ',')-1) into pCodigoRespuesta from dual;                                                  
            pMsgRespuesta:= TC.TC_PROCS_ONLINE.EXTRAE_DATO( vMsg, 2,'|','|');
                    
            --Se cambia el Valor de Codigo Respuesta para que infocorp entienda que estos resultados no son satisfactorio.
            if instr(pMsgRespuesta, 'TARJETA NO EXISTE EN MAESTRO') > 0  or instr(pMsgRespuesta, 'REGISTRO ESTA BLOQUEADO') > 0 then
                pCodigoRespuesta := '1';
            end if;
        end if;
EXCEPTION
      when vBloqueoException then          
         null;
             
      When others then             
         pCodigoRespuesta := sqlcode;                         
         pMsgRespuesta := 'Error, Codigo: '|| pCodigoRespuesta || ' Msg: '|| DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
END;
    PROCEDURE P_APLICA_DIARIO_SEC(vFecha in Date,
                                  vProxFecha in Date,
                                  v_Mensaje in out Varchar2) IS

    --EFECTUA : Ejecuta el proceso de Reclasificacion de inmediato                                     

    Cursor CO is
        Select *
        from solicitud_cambio_sector
        Where trunc(Fecha_Solicitud)    <= vFecha
        Order by cod_agencia, cod_cliente, fecha_solicitud;
        
    Cursor prestamo (vcliente varchar2) is
        Select prc.CODIGO_EMPRESA,prc.CODIGO_AGENCIA, prc.CODIGO_CLIENTE, 
        prc.NO_CREDITO,prc.CODIGO_MONEDA,
        prc.ESTADO,prc.TIPO_CREDITO,pri.FECHA_LIQUIDACION,
        Nvl(pri.SALDO_CREDITO,0) SALDO_CREDITO, prt.CODIGO_SUB_APLICACION,
        (Nvl(int_acumulados_antes,0)+Nvl(int_acumulados_liq,0)+Nvl(int_suspenso_antes,0)+Nvl(int_suspenso_liq,0)-Nvl(int_pagados_antes,0)) Intereses
        from   pr_creditos prc, pr_intereses_generados pri, pr_tipo_credito prt
        Where  prc.CODIGO_EMPRESA         = pri.CODIGO_EMPRESA
        And      prc.NO_CREDITO                 = pri.NO_CREDITO
        And    prc.CODIGO_EMPRESA         = prt.CODIGO_EMPRESA
        And      prc.TIPO_CREDITO                = prt.TIPO_CREDITO
        And         prc.CODIGO_EMPRESA         = VARIABLES.CODEMPRESA
        And         prc.CODIGO_CLIENTE         = vcliente
        And         pri.FECHA_LIQUIDACION  = vFecha
        And         prc.ESTADO                        In ('D','E','J')
        And         Nvl(pri.SALDO_CREDITO,0) > 0
        group by prc.CODIGO_EMPRESA,prc.CODIGO_AGENCIA,prc.CODIGO_CLIENTE,
        prt.CODIGO_SUB_APLICACION,prc.CODIGO_MONEDA, prc.NO_CREDITO,
        prc.ESTADO,prc.TIPO_CREDITO,pri.FECHA_LIQUIDACION,
        Nvl(pri.SALDO_CREDITO,0),
        (Nvl(int_acumulados_antes,0)+Nvl(int_acumulados_liq,0)+Nvl(int_suspenso_antes,0)+Nvl(int_suspenso_liq,0)-Nvl(int_pagados_antes,0));


    Cursor Certificado (vcliente varchar2 ) is
        Select cdc.cod_empresa, cdc.cod_agencia, cdc.num_certificado, cdc.COD_CARTERA, cdc.estado, 
        cdc.cuenta_contable, cdc.cliente, cdc.cod_producto, cdc.Tip_Certificado, 
        cdi.fecha_calculo,    Nvl(cdi.MONTO_CD,0) monto_cd, cdi.COD_RETENCION,
        NVL(cdc.MON_INT_X_PAGAR,0) MON_INT_X_PAGAR, cdc.pla_dias, cdc.Clasificacion, cdc.cod_moneda--dfatule 10092007    
        from cd_certificado cdc, CD_INTERES cdi
        Where cdc.COD_EMPRESA         = cdi.COD_EMPRESA
        And      cdc.num_certificado = cdi.Num_certificado
        And      cdc.COD_EMPRESA         = VARIABLES.CODEMPRESA
        And      cdc.cliente                 = vCliente
        And      CDI.FECHA_CALCULO         = vFecha
        And      cdc.estado                     in ('A','R')--;
        --ENF: 15.10.2014: se agrego para no tener que ejecutar el proceso mensual que hace lo mismo.
        And   vFecha                            != last_day(vFecha)
        union all
        Select cdc.cod_empresa, cdc.cod_agencia, cdc.num_certificado, cdc.COD_CARTERA, cdc.estado, 
        cdc.cuenta_contable, cdc.cliente, cdc.cod_producto, cdc.Tip_Certificado, 
        cdi.fecha_calculo, Nvl(cds.SALDO_AL_CIERRE,0) monto_cd, cdi.COD_RETENCION,
        NVL(cdc.MON_INT_X_PAGAR,0) MON_INT_X_PAGAR, cdc.pla_dias, cdc.Clasificacion, cdc.cod_moneda
        from cd_certificado cdc, CD_INTERES cdi, CD_SALDOS_AL_CIERRE CDS
        Where cdc.COD_EMPRESA         = cdi.COD_EMPRESA
        And      cdc.num_certificado = cdi.num_certificado
        AND      cdc.COD_EMPRESA         = cds.COD_EMPRESA
        And      cdc.num_certificado = cds.num_certificado
        And      cdi.fecha_calculo     = cds.FECHA_CIERRE    
        And      cdc.COD_EMPRESA         = VARIABLES.CODEMPRESA
        And      cdc.cliente                 = vcliente
        And      cds.FECHA_CIERRE         = VARIABLES.ULT_DIA_MES
        And      cdc.estado                     in ('A','R')
        And   vProxFecha                    = VARIABLES.ULT_DIA_MES;
        
    Cursor Cefectivo (vcliente varchar2) is
        Select CE.COD_EMPRESA, CE.NUM_CUENTA, CE.COD_AGENCIA, CE.COD_PRODUCTO, CE.COD_CLIENTE, 
        CE.IND_ESTADO, SD.FECHA, Nvl(SD.SALDO_CONTABILIZADO,0) SALDO_CONTABILIZADO,
        Nvl(SOBREG_MENOS_48H,0) SOBREG_MENOS_48H,
        (Nvl(SOBREG_MAS48H_HASTA30D,0) + Nvl(SOBREG_MAS48H_MAYOR30D,0)) SOBREG_MAS48H,
        NVL(CE.INT_POR_PAGAR,0) INT_POR_PAGAR,
        NVL(sd.SAL_EMBARGADO, 0) SAL_EMBARGADO  -- API 12112021: Reclasificacion Embargos
        from CUENTA_EFECTIVO ce, SALDOS_X_DIA sd
        Where ce.COD_EMPRESA = sd.COD_EMPRESA
        And      ce.NUM_CUENTA  = sd.NUM_CUENTA
        And      ce.COD_EMPRESA = VARIABLES.CODEMPRESA
        And   CE.COD_CLIENTE = vcliente
        And      ce.NUM_CUENTA  >    0
        And      SD.FECHA               = vFecha
        Order by CE.COD_EMPRESA, CE.NUM_CUENTA;
        
      vNumAsiento                     number(15);
      vTC1                                     number(10):=null;
      vTC2                                     number(10):=null;
      vMtoDiferencia                 number(18,2);
      vErrFatal                         boolean := FALSE;
      vAplic                                 varchar2(5) := 'BCG';
      vSubAplic                         number(5) := '900';
      vTipoTrans                         varchar2(5) :='1';
      vSubTransCambio             varchar2(5) := 1;
      vNumTransa                        varchar2(15):=0;
      vNUMERO_ASIENTO       Number(10);
      vNUMERO_ASIENTOI      Number(10):=null;
      vDOCUMENTO            Varchar2(30);  
      vDESCRIPCION          Varchar2(250):='Asiento Reclasificacion Saldos de Productos de Clientes por Cambio de Sector Contable';
      vMENSAJE_ERROR        Varchar2(255);
      BCG_INTERFACE         exception;
      v_Tc1                 number(18,8);
      v_Tc2                 number(18,8);
      vMontoDife                        Number(18,8);
      vMensajeErr                         varchar2(255);
      vCant                                 Number;
      vContador                         number;
      vcantidadtoTal                 number(10);
      vcantidadprocesada         number(10);
      v_E_Saldos                        SALDOS_X_DIA.SALDO_CONTABILIZADO%Type:=0;
      v_E_CCSaldos                    SALDOS_X_DIA.SALDO_CONTABILIZADO%Type:=0;
      v_E_CDSaldos                    CD_INTERES.monto_cd%Type:=0;
      v_E_PRSaldos                    pr_intereses_generados.SALDO_CREDITO%Type:=0;
      --
      Info_Exception              Exception;
      Bpa_Exception               Exception;
      Bcc_Interface               Exception;
      Bcd_Interface               Exception;
      Bpr_Interface               Exception;
      vErr                                    Varchar2(6);
      vMens                                Varchar2(1000);
      vSistema                            Varchar2(2);
      Vsequim                                varchar2(10);
      vMensaj                                varchar2(100);               
      vLAsientos                        number;
      --EMF 15/10/2014    :    se modifico para agregar el envio de correo para los errores. variables.
      vSubject  varchar2(4000);
      vtexto    varchar2(4000);
      vEmail    varchar2(100) := Param.Parametro_X_Empresa('1','CORREO_MSG_ERRORES','PA');    
      vIpCorreo varchar2(50)     := Param.Parametro_X_Empresa('1','SERVIDOR_SMTP','PA');
      vSender   varchar2(100) := Param.Parametro_X_Empresa('1','CORREO_SENDER','PA'); 
      --Fin.
      --Declaracion de la respuesta de factoring y leasing
      pExito    BOOLEAN;
      pCodigoRespuesta    varchar2(100);
      --SE ADQUIERE LOS INDICADORES DE LOS SERVICIOS
      vIndFact   varchar2(100) := Param.Parametro_X_Empresa('1','FACTORING_IND_SEC','PA'); 
      vIndLeas   varchar2(100) := Param.Parametro_X_Empresa('1','LEASING_IND_SEC','PA'); 
      vIndITC    varchar2(100) := Param.Parametro_X_Empresa('1','ITC_IND_SEC','PA'); 
      
    BEGIN
        
        Vsequim  := '0';
        vMensaj  := 'Error en Ejecucion del proceso Aplicar Reclasificacion'||vFecha;
        vContador:= 0;
        Vsequim  := '1';
        Begin
            Select count(*)
            Into vContador
            from solicitud_cambio_sector
            Where FECHA_SOLICITUD <= vFecha;
        Exception
          when others then
             vContador := 0;
        End;
        
        -- INICIA GAUGE ORACLE
        vcantidadtoTal := vContador;
        vcantidadprocesada := 0;
                            
        Vsequim := '2';
        --ENF: 15.10.2014: se agrego para no tener que ejecutar el proceso mensual que hace lo mismo.
        if vProxFecha = VARIABLES.ULT_DIA_MES then
            vSubTransCambio := null;
        end if;
        
        if ( vContador = 0 ) then
            control.mensaje   := 'No existen cambios de sector contable por procesar.';
            vSistema          := 'CC';
            vErr              := '003041';
            vMens             := 'No existen cambios de sector contable por procesar.';--Null;
            Raise Info_Exception;
        end if;      

        control.mensaje := 'Buscando productos para Reclasificar ';             
            
        For C in CO Loop    --Todos los clientes que se van a reclasificar
        
            Begin --actualizo el sector del cliente 
                
                Update Personas
                   Set Cod_Sec_Contable = C.Cod_Sec_Contable_Nuevo,
                       Fecha_Modificacion =  sysdate
                 Where cod_persona = c.cod_cliente;
                
                Vsequim := '6';    
                vMensaj := 'Actualizando cliente '||c.cod_cliente; 
                --SI LOS INDICADORES ESTAN ENCEDIDO ENTONCES SE LLAMA LOS SERVICIOS
                IF vIndFact = 'S' THEN                  
                    --Proceso para Factoring
                    Proceso_Fact_Leas(C.COD_CLIENTE, C.COD_SEC_CONTABLE_ACTUAL, C.Cod_Sec_Contable_Nuevo, '1150', pExito);
                    
                    IF pExito = TRUE THEN
                        dbms_output.put_line('Respuesta exitosa para Factoring');
                    ELSE
                        dbms_output.put_line('Respuesta erronea para Factoring');
                    END IF;
                END IF;
                
                IF vIndLeas = 'S' THEN
                    --Proceso para Leasing
                    Proceso_Fact_Leas(C.COD_CLIENTE, C.COD_SEC_CONTABLE_ACTUAL, C.Cod_Sec_Contable_Nuevo, '1151', pExito);
                    
                    IF pExito = TRUE THEN
                        dbms_output.put_line('Respuesta exitosa para Leasing');
                    ELSE
                        dbms_output.put_line('Respuesta erronea para Leasing');
                    END IF;
                END IF;
                
                IF vIndITC = 'S' THEN
                    --Proceso para ITC
                    ProcesoITC (vFecha, vProxFecha, C.COD_CLIENTE,C.Cod_Sec_Contable_Nuevo,C.cod_agencia,pCodigoRespuesta);

                    IF pCodigoRespuesta = '0' THEN
                        dbms_output.put_line('Respuesta exitosa para ITC');
                    ELSE
                        dbms_output.put_line('Respuesta erronea para ITC');
                    END IF;
                END IF;
            Exception                 
                When Others then 
                    If sqlcode = '-2291' Then
                        Message(' Dato relacionado con el cliente no existe en la tabla personas');Message('');
                    End If;
                    Vsequim := '6.2';    
                    vMensaj := 'Error actualizando cliente '||c.cod_cliente;
                    --
                    vSistema                 := Variables.codsistema;--'PA'
                    vErr                     := '000688';
                    vMens                    := 'actualizando Cliente '||c.cod_cliente;
                    
                    --EMF 15/10/2014    :    se modifico para agregar el envio de correo para los errores. variables dos mensajes y comentado la exception, mas registro y envio de correo para errores.
                    message(c.cod_cliente||SQLCODE||vMensajeErr||' actualizando Cliente'); Message('');
                    Utilitarios.Mensaje(vErr, variables.codidioma, vSistema,Acknowledge,vMens);
                    --Raise Bpa_Exception;
                    
                    pa.genera_msg_error(pcodmsg        =>vErr,
                                        pmsgerror      =>'Error actualizando Cliente',
                                        pproceso       =>vSistema||' actualizando Cliente',
                                        pusuario       =>user,
                                        pmsgerrorora   => 'SQLERRM: '||SQLERRM ||chr(13)||'Fecha de Corrida: '||vFecha||chr(13)||'Fecha de Solcitiud:'||c.fecha_solicitud||chr(13)||'Ultimo Proceso Corrido: actualizando Cliente'||chr(13)
                                                                                ||'C√≥digo Del Producto: '||chr(13)||'C√≥digo Agencia: '||chr(13)||'C√≥digo cliente: '||c.cod_cliente||chr(13)||'C√≥digo Sector Contable actual: '||c.COD_SEC_CONTABLE_ACTUAL||chr(13)
                                                                                                            ||'C√≥digo Sector Contable Nuevo: '||c.COD_SEC_CONTABLE_NUEVO,
                                        pNotifica      =>'N'
                                        ); 
                    vSubject  := 'Error realizando Cambio de Sector Contable';
                                                    
                vTexto  := '<style type="text/css">table {border-collapse: collapse;} td, th {border: 1px solid black;padding: 3px;}</style>';
                vTexto     := vTexto|| '<h3>Error actualizando Cliente</h3>';
                vTexto     := vTexto|| '<br><table>';
                vTexto     := vTexto|| '<tr><td width=200><b>SQLERRM:</b></td><td>';
                vTexto     := vTexto|| SQLERRM;
                vTexto     := vTexto|| '<tr><td width=200><b>Fecha de Corrida:</b></td><td>';
                vTexto     := vTexto|| vFecha;
                vTexto     := vTexto|| '<tr><td><b>Fecha de Solcitiud:</b></td><td>';
                vTexto     := vTexto|| c.fecha_solicitud;
                vTexto     := vTexto|| '</td></tr><tr><td ><b>Ultimo Proceso Corrido:</b></td><td> actualizando Cliente';
                vTexto     := vTexto|| '</td></tr><tr><td><b>C√≥digo Del Producto:</b></td><td>';
                vTexto     := vTexto|| null;
                vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo Agencia:</b></td><td>';
                vTexto     := vTexto|| null;
                vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo cliente:</b></td><td>';
                vTexto     := vTexto|| c.cod_cliente;                                       
                vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo Sector Contable actual:</b></td><td>';
                vTexto     := vTexto|| c.COD_SEC_CONTABLE_ACTUAL;                                       
                vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo Sector Contable Nuevo:</b></td><td>';
                vTexto     := vTexto|| c.COD_SEC_CONTABLE_NUEVO;                                       
                vTexto     := vTexto|| '</td></tr></table>';
                
                pa.send_mail_html(vIPCorreo, vSender, vEmail, vSubject, vTexto);
            
            End;            
                
            control.mensaje := 'Reclasificando Asientos de Productos para el cliente '||c.cod_cliente;
            
            Vsequim := '7';
            vMensaj := 'Error despues de actualizar cliente ';

             --Busco los productos del cliente
            For d in prestamo(c.cod_cliente) loop --busco prestamos de cada subaplicacion
                    
                control.mensaje := 'Reclasificando Asientos de Prestamos para el cliente '||c.cod_cliente;
                                
                vAplic := 'BPR';
                vTipoTrans := 78;
                
                Begin
                         
                    Vsequim := '8';
                    vMensaj := 'Error de la caratula del asiento pr';                     
                    
                    CG.CG_UTL.Caratula_Del_Asiento(Variables.CODEMPRESA,
                                                     Variables.CodAgencia, --Agencia de Conexion del usuario
                                                     vAplic,
                                                     d.codigo_sub_aplicacion,
                                                     vTipoTrans,
                                                     vSubTransCambio,
                                                     vNumTransa,
                                                     VDESCRIPCION,
                                                     vFecha,
                                                     vFecha,
                                                     VNUMERO_ASIENTO,
                                                     Variables.Usuario,
                                                     VMENSAJE_ERROR);
                            
                                        
                    Vsequim := '8.1';
                    
                    if VMENSAJE_ERROR is not null then
                      --ENF 15/10/2014    :    se modifico para agregar el envio de correo para los errores. variables dos mensajes y comentado la exception, mas registro y envio de correo para errores.
                      --message('Caratula Asiento Pr '||VMENSAJE_ERROR||'-'||VNUMERO_ASIENTO); Message('');                  
                        vSistema                    :=     Variables.codsistema;--'PA'
                        vErr                             := '000688';
                        vMens                         := 'Caratula Asiento '||VMENSAJE_ERROR||'-'||VNUMERO_ASIENTO;
                        message(c.cod_cliente||SQLCODE||vMensajeErr||' Caratula_Del_Asiento_CC'); Message('');
                        Utilitarios.Mensaje(vErr, variables.codidioma, vSistema,Acknowledge,vMens);
                      
                        pa.genera_msg_error(pcodmsg        =>vErr,
                                    pmsgerror      =>'Error Caratula Asiento Pr',
                                    pproceso       =>vSistema||'-Caratula Asiento',
                                    pusuario       =>user,
                                    pmsgerrorora   => 'SQLERRM: '||SQLERRM ||chr(13)||'Fecha de Corrida: '||vFecha||chr(13)||'Fecha de Solcitiud:'||c.fecha_solicitud
                                                                        ||chr(13)||'Ultimo Proceso Corrido: Caratula_Del_Asiento_PR'||chr(13)
                                                            ||'C√≥digo Del Producto: '||d.no_credito||chr(13)||'C√≥digo Agencia: '||d.CODIGO_AGENCIA
                                                            ||chr(13)||'C√≥digo cliente: '||c.cod_cliente||chr(13)
                                                            ||'C√≥digo Sector Contable actual: '||c.COD_SEC_CONTABLE_ACTUAL||chr(13)
                                                                        ||'C√≥digo Sector Contable Nuevo: '||c.COD_SEC_CONTABLE_NUEVO,
                                    pNotifica      =>'N'
                                    ); 
                                    
                        vSubject  := 'Error realizando Cambio de Sector Contable';
                                                        
                        vTexto  := '<style type="text/css">table {border-collapse: collapse;} td, th {border: 1px solid black;padding: 3px;}</style>';
                        vTexto     := vTexto|| '<h3>Error Caratula Asiento Pr</h3>';
                        vTexto     := vTexto|| '<br><table>';
                        vTexto     := vTexto|| '<tr><td width=200><b>SQLERRM:</b></td><td>';
                        vTexto     := vTexto|| SQLERRM;
                        vTexto     := vTexto|| '<tr><td width=200><b>Fecha de Corrida:</b></td><td>';
                        vTexto     := vTexto|| vFecha;
                        vTexto     := vTexto|| '<tr><td><b>Fecha de Solcitiud:</b></td><td>';
                        vTexto     := vTexto|| c.fecha_solicitud;
                        vTexto     := vTexto|| '</td></tr><tr><td ><b>Ultimo Proceso Corrido:</b></td><td> Caratula_Del_Asiento_PR';
                        vTexto     := vTexto|| '</td></tr><tr><td><b>C√≥digo Del Producto:</b></td><td>';
                        vTexto     := vTexto|| d.no_credito;
                        vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo Agencia:</b></td><td>';
                        vTexto     := vTexto|| d.CODIGO_AGENCIA;
                        vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo cliente:</b></td><td>';
                        vTexto     := vTexto|| c.cod_cliente;                                       
                        vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo Sector Contable actual:</b></td><td>';
                        vTexto     := vTexto|| c.COD_SEC_CONTABLE_ACTUAL;                                       
                        vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo Sector Contable Nuevo:</b></td><td>';
                        vTexto     := vTexto|| c.COD_SEC_CONTABLE_NUEVO;                                       
                        vTexto     := vTexto|| '</td></tr></table>';
                        
                        pa.send_mail_html(vIPCorreo, vSender, vEmail, vSubject, vTexto);
                        
                    End if;            
                
                end;
                
                
                --ENF 15/10/2014    :    se modifico para agregar el envio de correo para los errores. 
                --                       Variables dos mensajes y comentado la exception, mas registro y envio de correo para errores.
                if VMENSAJE_ERROR is null then
                    vMensaj := 'Error de Asiento de Reclacificacion pr';
                    Asiento_Reclasificacion_Pr_Sec(Variables.CODEMPRESA,
                                                   Variables.CodAgencia,
                                                   d.TIPO_CREDITO,
                                                   d.estado,
                                                   VNUMERO_ASIENTO,
                                                   d.no_credito,
                                                   vAplic,
                                                   vSubAplic,
                                                   vTipoTrans,
                                                   vSubTransCambio,
                                                   vNumTransa,
                                                   vdescripcion,
                                                   vFecha,
                                                   c.cod_cliente,
                                                   d.CODIGO_AGENCIA,  -- Agencia del producto
                                                   c.COD_SEC_CONTABLE_ACTUAL,
                                                   c.COD_SEC_CONTABLE_NUEVO,
                                                   d.SALDO_CREDITO,
                                                   d.INTERESES,
                                                   v_tc1,
                                                   v_tc2,
                                                   VMensajeErr
                                                   );
                                                                                                                                                                                                        
                    If VMensajeErr is not null Then
                            
                            
                          vSistema         :=  Variables.codsistema;--'PA'
                          vErr             := '000688';
                          vMens            := 'Asiento de Reclacificacion pr '||VMensajeErr||'-'||VNUMERO_ASIENTO;
                         
                    
                           message(c.cod_cliente||SQLCODE||vMensajeErr||' Asiento_Reclasificacion_Pr_Sec'); Message('');
                           Utilitarios.Mensaje(vErr, variables.codidioma, vSistema,Acknowledge,vMens);
                           pa.genera_msg_error(pcodmsg        =>vErr,
                                               pmsgerror      =>'Error Asiento de Reclacificacion pr',
                                               pproceso       =>vSistema||' Asiento de Reclacificacion pr',
                                               pusuario       =>user,
                                               pmsgerrorora   => 'SQLERRM: '||SQLERRM ||chr(13)||'Fecha de Corrida: '||vFecha||chr(13)||'Fecha de Solcitiud:'||c.fecha_solicitud
                                                                                                        ||chr(13)||'Ultimo Proceso Corrido: Asiento_Reclasificacion_Pr_Sec'||chr(13)
                                                                                            ||'C√≥digo Del Producto: '||d.no_credito||chr(13)||'C√≥digo Agencia: '||d.CODIGO_AGENCIA
                                                                                            ||chr(13)||'C√≥digo cliente: '||c.cod_cliente||chr(13)
                                                                                            ||'C√≥digo Sector Contable actual: '||c.COD_SEC_CONTABLE_ACTUAL||chr(13)
                                                                                                        ||'C√≥digo Sector Contable Nuevo: '||c.COD_SEC_CONTABLE_NUEVO,
                                               pNotifica      => 'N'); 
                            
                           vSubject  := 'Error realizando Cambio de Sector Contable';
                                                            
                            vTexto     := '<style type="text/css">table {border-collapse: collapse;} td, th {border: 1px solid black;padding: 3px;}</style>';
                            vTexto     := vTexto|| '<h3>Error Asiento de Reclacificacion pr</h3>';
                            vTexto     := vTexto|| '<br><table>';
                            vTexto     := vTexto|| '<tr><td width=200><b>SQLERRM:</b></td><td>';
                            vTexto     := vTexto|| SQLERRM;
                            vTexto     := vTexto|| '<tr><td width=200><b>Fecha de Corrida:</b></td><td>';
                            vTexto     := vTexto|| vFecha;
                            vTexto     := vTexto|| '<tr><td><b>Fecha de Solcitiud:</b></td><td>';
                            vTexto     := vTexto|| c.fecha_solicitud;
                            vTexto     := vTexto|| '</td></tr><tr><td ><b>Ultimo Proceso Corrido:</b></td><td> Asiento_Reclasificacion_Pr_Sec';
                            vTexto     := vTexto|| '</td></tr><tr><td><b>C√≥digo Del Producto:</b></td><td>';
                            vTexto     := vTexto|| d.no_credito;
                            vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo Agencia:</b></td><td>';
                            vTexto     := vTexto|| d.CODIGO_AGENCIA;
                            vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo cliente:</b></td><td>';
                            vTexto     := vTexto|| c.cod_cliente;                                       
                            vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo Sector Contable actual:</b></td><td>';
                            vTexto     := vTexto|| c.COD_SEC_CONTABLE_ACTUAL;                                       
                            vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo Sector Contable Nuevo:</b></td><td>';
                            vTexto     := vTexto|| c.COD_SEC_CONTABLE_NUEVO;                                       
                            vTexto     := vTexto|| '</td></tr></table>';
                            
                            pa.send_mail_html(vIPCorreo, vSender, vEmail, vSubject, vTexto);
                    End If;                                                                                                                                    
                    --Fin.
                END IF;
                
                if VMensajeErr is null then
                    
                    vMensaj := 'Error en Cuadre Asiento pr';
                    
                    CG.CG_UTL.Cuadre_Asiento(variables.Codempresa,
                                   vFecha,
                                   VNUMERO_ASIENTO,
                                   VMontoDife,
                                   VMensajeErr);
                             
                      if ( vMensajeErr is not null ) then
                               
                                vSistema    := Variables.codsistema;--'PA'
                                vErr        := '000688';
                                vMens       := ' Mensaje Error en Cuadre Asiento Pr: '||VNUMERO_ASIENTO||' Monto Difiere: '||VMontoDife||' Error '||VMensajeErr;
                             
                            
                                message(c.cod_cliente||SQLCODE||vMensajeErr||' Cuadre_Asiento_Pr'); Message('');
                                Utilitarios.Mensaje(vErr, variables.codidioma, vSistema,Acknowledge,vMens);
                                pa.genera_msg_error(pcodmsg        =>vErr,
                                              pmsgerror      =>'Error Cuadre Asiento Pr',
                                            pproceso       =>vSistema||' Cuadre Asiento Pr',
                                              pusuario       =>user,
                                                                        pmsgerrorora   => 'SQLERRM: '||SQLERRM ||chr(13)||'Fecha de Corrida: '||vFecha||chr(13)||'Fecha de Solcitiud:'||c.fecha_solicitud
                                                                                                            ||chr(13)||'Ultimo Proceso Corrido: Cuadre_Asiento_Pr'||chr(13)
                                                                                                  ||'C√≥digo Del Producto: '||d.no_credito||chr(13)||'C√≥digo Agencia: '||d.CODIGO_AGENCIA
                                                                                                  ||chr(13)||'C√≥digo cliente: '||c.cod_cliente||chr(13)
                                                                                                  ||'C√≥digo Sector Contable actual: '||c.COD_SEC_CONTABLE_ACTUAL||chr(13)
                                                                                                            ||'C√≥digo Sector Contable Nuevo: '||c.COD_SEC_CONTABLE_NUEVO,
                                              pNotifica      =>'S'
                                              ); 
                            vSubject   := 'Error realizando Cambio de Sector Contable';
                                                                    
                            vTexto     := '<style type="text/css">table {border-collapse: collapse;} td, th {border: 1px solid black;padding: 3px;}</style>';
                            vTexto     := vTexto|| '<h3>Error Cuadre Asiento pr</h3>';
                            vTexto     := vTexto|| '<br><table>';
                            vTexto     := vTexto|| '<tr><td width=200><b>SQLERRM:</b></td><td>';
                            vTexto     := vTexto|| SQLERRM;
                            vTexto     := vTexto|| '<tr><td width=200><b>Fecha de Corrida:</b></td><td>';
                            vTexto     := vTexto|| vFecha;
                            vTexto     := vTexto|| '<tr><td><b>Fecha de Solcitiud:</b></td><td>';
                            vTexto     := vTexto|| c.fecha_solicitud;
                            vTexto     := vTexto|| '</td></tr><tr><td ><b>Ultimo Proceso Corrido:</b></td><td> Cuadre_Asiento_Pr';
                            vTexto     := vTexto|| '</td></tr><tr><td><b>C√≥digo Del Producto:</b></td><td>';
                            vTexto     := vTexto|| d.no_credito;
                            vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo Agencia:</b></td><td>';
                            vTexto     := vTexto|| d.CODIGO_AGENCIA;
                            vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo cliente:</b></td><td>';
                            vTexto     := vTexto|| c.cod_cliente;                                       
                            vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo Sector Contable actual:</b></td><td>';
                            vTexto     := vTexto|| c.COD_SEC_CONTABLE_ACTUAL;                                       
                            vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo Sector Contable Nuevo:</b></td><td>';
                            vTexto     := vTexto|| c.COD_SEC_CONTABLE_NUEVO;                                       
                            vTexto     := vTexto|| '</td></tr></table>';
                            
                            pa.send_mail_html(vIPCorreo, vSender, vEmail, vSubject, vTexto);
                                    --Fin.
                      Else
                            control.mensaje := 'No. Asiento PR: '||VNUMERO_ASIENTO;                    
                                  
                            if vNumero_AsientoI is null then -- Guardar el primero n√∫mero de asiento
                                  vNumero_AsientoI := VNUMERO_ASIENTO;
                            end if;--guardar numero de asiento.
                            
                      End if;--mensaje de error de la variable de error procedente del cuadre de asiento.
                      
                End If;
                
            End Loop;  -- pr
            
            Vsequim := '9';
            vMensaj := 'Error despues del asiento de reclasificacion para PR ';
           
            if VMENSAJE_ERROR is null or VMensajeErr is null then  
              --Busco los productos del cliente en CDs
                For e in Certificado(c.cod_cliente) Loop --busco Certificados    
                  
                    control.mensaje := 'Reclasificando Asientos de Certificados para el cliente '||c.cod_cliente;               
                    
                    vAplic := 'BCD';
                    vTipoTrans := 25;
                    
                    if e.monto_cd > 0 then
                        
                        Begin
                                 
                            Vsequim := '9.1';
                            vMensaj := 'Error de la caratula del asiento cd ';                     
                            CG.CG_UTL.Caratula_Del_Asiento(Variables.CODEMPRESA,
                                                 Variables.CodAgencia, --Agencia de Conexion del usuario
                                                 vAplic,
                                                 e.cod_producto,
                                                 vTipoTrans,
                                                 vSubTransCambio,
                                                 vNumTransa,
                                                 VDESCRIPCION,
                                                 vFecha,
                                                 vFecha,
                                                 VNUMERO_ASIENTO,
                                                 Variables.Usuario,
                                                 VMENSAJE_ERROR);
                                    
                            Vsequim := '9.2';
                            
                            if VMENSAJE_ERROR is not null then
                                
                                vSistema       := Variables.codsistema;--'PA'
                                vErr           := '000688';
                                vMens          := 'Caratula Asiento CD '||VMENSAJE_ERROR||'-'||VNUMERO_ASIENTO;
                                                          
                                message(c.cod_cliente||SQLCODE||vMensajeErr||' Caratula_Del_Asiento_CD');
                                Utilitarios.Mensaje(vErr, variables.codidioma, vSistema,Acknowledge,vMens);
                               
                                pa.genera_msg_error(pcodmsg        =>vErr,
                                                    pmsgerror      =>'Error Caratula del asiento cd',
                                                    pproceso       =>vSistema||' caratula del asiento cd',
                                                    pusuario       =>user,
                                                    pmsgerrorora   => 'SQLERRM: '||SQLERRM ||chr(13)||'Fecha de Corrida: '||vFecha||chr(13)||'Fecha de Solcitiud:'||c.fecha_solicitud
                                                                                            ||chr(13)||'Ultimo Proceso Corrido: Caratula_Del_Asiento_CD'||chr(13)
                                                                                  ||'C√≥digo Del Producto: '||e.num_certificado||chr(13)||'C√≥digo Agencia: '||e.COD_AGENCIA
                                                                                  ||chr(13)||'C√≥digo cliente: '||c.cod_cliente||chr(13)
                                                                                  ||'C√≥digo Sector Contable actual: '||c.COD_SEC_CONTABLE_ACTUAL||chr(13)
                                                                                            ||'C√≥digo Sector Contable Nuevo: '||c.COD_SEC_CONTABLE_NUEVO,
                                                    pNotifica      =>'N'
                                                   ); 
                                
                                vSubject   := 'Error realizando Cambio de Sector Contable';
                                                            
                                vTexto     := '<style type="text/css">table {border-collapse: collapse;} td, th {border: 1px solid black;padding: 3px;}</style>';
                                vTexto     := vTexto|| '<h3>Error Caratula Del Asiento CD</h3>';
                                vTexto     := vTexto|| '<br><table>';
                                vTexto     := vTexto|| '<tr><td width=200><b>SQLERRM:</b></td><td>';
                                vTexto     := vTexto|| SQLERRM;
                                vTexto     := vTexto|| '<tr><td width=200><b>Fecha de Corrida:</b></td><td>';
                                vTexto     := vTexto|| vFecha;
                                vTexto     := vTexto|| '<tr><td><b>Fecha de Solcitiud:</b></td><td>';
                                vTexto     := vTexto|| c.fecha_solicitud;
                                vTexto     := vTexto|| '</td></tr><tr><td ><b>Ultimo Proceso Corrido:</b></td><td> Caratula_Del_Asiento_CD';
                                vTexto     := vTexto|| '</td></tr><tr><td><b>C√≥digo Del Producto:</b></td><td>';
                                vTexto     := vTexto|| e.num_certificado;
                                vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo Agencia:</b></td><td>';
                                vTexto     := vTexto|| e.COD_AGENCIA;
                                vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo cliente:</b></td><td>';
                                vTexto     := vTexto|| c.cod_cliente;                                       
                                vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo Sector Contable actual:</b></td><td>';
                                vTexto     := vTexto|| c.COD_SEC_CONTABLE_ACTUAL;                                       
                                vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo Sector Contable Nuevo:</b></td><td>';
                                vTexto     := vTexto|| c.COD_SEC_CONTABLE_NUEVO;                                       
                                vTexto     := vTexto|| '</td></tr></table>';
                                
                                pa.send_mail_html(vIPCorreo, vSender, vEmail, vSubject, vTexto);
                                
                            End if;            
                            --Fin.
                        end;
                        
                        --ENF 15/10/2014    :    se modifico para agregar el envio de correo para los errores. 
                        if VMENSAJE_ERROR is null then
                        
                              Vsequim := '9.3';
                              vMensaj := 'Error de la Asiento Reclasificacion CD ';
                              Asiento_Reclasificacion_Cd_Sec (Variables.CODEMPRESA,
                                                              Variables.CodAgencia,
                                                              e.COD_CARTERA,
                                                              e.Tip_Certificado,
                                                              e.cod_retencion,
                                                              e.estado,
                                                              VNUMERO_ASIENTO,
                                                              e.cuenta_contable,
                                                              e.num_certificado,
                                                              vAplic,
                                                              vSubAplic,
                                                              vTipoTrans,
                                                              vSubTransCambio,
                                                              vNumTransa,
                                                              vdescripcion,
                                                              vFecha,
                                                              c.cod_cliente,
                                                              e.COD_AGENCIA,  -- Agencia del producto
                                                              c.COD_SEC_CONTABLE_ACTUAL,
                                                              c.COD_SEC_CONTABLE_NUEVO,
                                                              e.monto_cd,
                                                              E.MON_INT_X_PAGAR,
                                                               e.Pla_Dias            ,
                                                               e.Clasificacion    ,
                                                               e.Cod_Moneda        ,                                                                                    
                                                              v_tc1,
                                                              v_tc2,
                                                              VMensajeErr
                                                            );
                                            
                            If VMensajeErr is not null then
                                                                  
                                    vSistema        := Variables.codsistema;--'PA'
                                    vErr            := '000688';
                                    vMens           := 'Asiento Reclasificacion CD '||VMensajeErr||'-'||VNUMERO_ASIENTO;             
                                     
                                    message(c.cod_cliente||SQLCODE||vMensajeErr||' Asiento_Reclasificacion_Cd_Sec'); 
                                    Utilitarios.Mensaje(vErr, variables.codidioma, vSistema,Acknowledge,vMens);
                                    pa.genera_msg_error(pcodmsg        =>vErr,
                                                        pmsgerror      =>'Error Asiento Reclasificacion CD',
                                                        pproceso       =>vSistema||' Asiento Reclasificacion CD',
                                                        pusuario       =>user,
                                                        pmsgerrorora   => 'SQLERRM: '||SQLERRM ||CHR( 13 ) || CHR( 10 )||
                                                                                    'Fecha de Corrida: '||vFecha||CHR( 13 ) || CHR( 10 )||
                                                                                    'Fecha de Solcitiud:'||c.fecha_solicitud||CHR( 13 ) || CHR( 10 )||
                                                                                    'Ultimo Proceso Corrido: Asiento_Reclasificacion_Cd_Sec'||CHR( 13 ) || CHR( 10 )||
                                                                                    'C√≥digo Del Producto: '||e.num_certificado||CHR( 13 ) || CHR( 10 )||
                                                                                    'C√≥digo Agencia: '||e.COD_AGENCIA||CHR( 13 ) || CHR( 10 )||
                                                                                    'C√≥digo cliente: '||c.cod_cliente||CHR( 13 ) || CHR( 10 )||
                                                                                    'C√≥digo Sector Contable actual: '||c.COD_SEC_CONTABLE_ACTUAL||CHR( 13 ) || CHR( 10 )||
                                                                                    'C√≥digo Sector Contable Nuevo: '||c.COD_SEC_CONTABLE_NUEVO||CHR( 13 ) || CHR( 10 ),
                                                        pNotifica      =>'N'
                                                          ); 
                                                          
                                vSubject  := 'Error realizando Cambio de Sector Contable';
                                                            
                                vTexto  := '<style type="text/css">table {border-collapse: collapse;} td, th {border: 1px solid black;padding: 3px;}</style>';
                                vTexto     := vTexto|| '<h3>Error Asiento Reclasificacion CD</h3>';
                                vTexto     := vTexto|| '<br><table>';
                                vTexto     := vTexto|| '<tr><td width=200><b>SQLERRM:</b></td><td>';
                                vTexto     := vTexto|| SQLERRM;
                                vTexto     := vTexto|| '<tr><td width=200><b>Fecha de Corrida:</b></td><td>';
                                vTexto     := vTexto|| vFecha;
                                vTexto     := vTexto|| '<tr><td><b>Fecha de Solcitiud:</b></td><td>';
                                vTexto     := vTexto|| c.fecha_solicitud;
                                vTexto     := vTexto|| '</td></tr><tr><td ><b>Ultimo Proceso Corrido:</b></td><td> Asiento_Reclasificacion_Cd_Sec';
                                vTexto     := vTexto|| '</td></tr><tr><td><b>C√≥digo Del Producto:</b></td><td>';
                                vTexto     := vTexto|| e.num_certificado;
                                vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo Agencia:</b></td><td>';
                                vTexto     := vTexto|| e.COD_AGENCIA;
                                vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo cliente:</b></td><td>';
                                vTexto     := vTexto|| c.cod_cliente;                                       
                                vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo Sector Contable actual:</b></td><td>';
                                vTexto     := vTexto|| c.COD_SEC_CONTABLE_ACTUAL;                                       
                                vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo Sector Contable Nuevo:</b></td><td>';
                                vTexto     := vTexto|| c.COD_SEC_CONTABLE_NUEVO;                                       
                                vTexto     := vTexto|| '</td></tr></table>';
                                
                                pa.send_mail_html(vIPCorreo, vSender, vEmail, vSubject, vTexto);
                                
                            End If;
                            --Fin.
                            
                        End If;
                         
                        if VMensajeErr is null then
                              Vsequim := '9.4';
                              vMensaj := 'Error de la Cuadre Asiento cd ';
                                                   
                              CG.CG_UTL.Cuadre_Asiento(variables.Codempresa,
                                             vFecha,
                                             VNUMERO_ASIENTO,
                                             VMontoDife,
                                             VMensajeErr);
                                             
                            if ( vMensajeErr is not null ) then
                            
                                vSistema     := Variables.codsistema;--'PA'
                                vErr         := '000688';
                                vMens        := ' Mensaje Error en Cuadre Asiento: '||VNUMERO_ASIENTO||' Monto Difiere: '||VMontoDife||' Error '||VMensajeErr;
                               
                                message(c.cod_cliente||SQLCODE||vMensajeErr||' Cuadre_Asiento_CD'); Message('');
                                Utilitarios.Mensaje(vErr, variables.codidioma, vSistema,Acknowledge,vMens);
                            
                                pa.genera_msg_error(pcodmsg        =>vErr,
                                                    pmsgerror      =>'Error Cuadre Asiento CD',
                                                    pproceso       =>vSistema||' Cuadre Asiento CD',
                                                    pusuario       =>user,
                                                    pmsgerrorora   => 'SQLERRM: '||SQLERRM ||chr(13)||'Fecha de Corrida: '||vFecha||chr(13)||'Fecha de Solcitiud:'||c.fecha_solicitud
                                                                                                        ||chr(13)||'Ultimo Proceso Corrido: Cuadre_Asiento_CD'||chr(13)
                                                                                              ||'C√≥digo Del Producto: '||e.num_certificado||chr(13)||'C√≥digo Agencia: '||e.COD_AGENCIA
                                                                                              ||chr(13)||'C√≥digo cliente: '||c.cod_cliente||chr(13)
                                                                                              ||'C√≥digo Sector Contable actual: '||c.COD_SEC_CONTABLE_ACTUAL||chr(13)
                                                                                                        ||'C√≥digo Sector Contable Nuevo: '||c.COD_SEC_CONTABLE_NUEVO,
                                                     pNotifica      =>'N'
                                                     ); 
                              
                                vSubject  := 'Error realizando Cambio de Sector Contable';
                                                            
                                vTexto     := '<style type="text/css">table {border-collapse: collapse;} td, th {border: 1px solid black;padding: 3px;}</style>';
                                vTexto     := vTexto|| '<h3>Error Cuadre Asiento CD</h3>';
                                vTexto     := vTexto|| '<br><table>';
                                vTexto     := vTexto|| '<tr><td width=200><b>SQLERRM:</b></td><td>';
                                vTexto     := vTexto|| SQLERRM;
                                vTexto     := vTexto|| '<tr><td width=200><b>Fecha de Corrida:</b></td><td>';
                                vTexto     := vTexto|| vFecha;
                                vTexto     := vTexto|| '<tr><td><b>Fecha de Solcitiud:</b></td><td>';
                                vTexto     := vTexto|| c.fecha_solicitud;
                                vTexto     := vTexto|| '</td></tr><tr><td ><b>Ultimo Proceso Corrido:</b></td><td> Cuadre_Asiento_CD';
                                vTexto     := vTexto|| '</td></tr><tr><td><b>C√≥digo Del Producto:</b></td><td>';
                                vTexto     := vTexto|| e.num_certificado;
                                vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo Agencia:</b></td><td>';
                                vTexto     := vTexto|| e.COD_AGENCIA;
                                vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo cliente:</b></td><td>';
                                vTexto     := vTexto|| c.cod_cliente;                                       
                                vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo Sector Contable actual:</b></td><td>';
                                vTexto     := vTexto|| c.COD_SEC_CONTABLE_ACTUAL;                                       
                                vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo Sector Contable Nuevo:</b></td><td>';
                                vTexto     := vTexto|| c.COD_SEC_CONTABLE_NUEVO;                                       
                                vTexto     := vTexto|| '</td></tr></table>';
                                
                                pa.send_mail_html(vIPCorreo, vSender, vEmail, vSubject, vTexto);
                                  --fin.
                            Else
                                control.mensaje := 'No. Asiento CD: '||VNUMERO_ASIENTO;                    
                                    
                              if vNumero_AsientoI is null then -- Guardar el primero n√∫mero de asiento
                                    vNumero_AsientoI := VNUMERO_ASIENTO;
                              end if;--if guardar el primero numero asiento
                              
                            End if;--if variable mensaje error es no nulo.
                            
                        End If;--if de mensaje error de cuadre asiento.
                        
                    End if; -- e.monto_cd
                    
                End Loop;     -- codproducto
                
            End If;--Mensaje error el principal del loop de CD.             
             
            Vsequim := '10';
            vMensaj := 'Error despues del asiento de reclasificacion para CD ';
             
            If VMensajeErr is null or VMENSAJE_ERROR is null then
                --Busco los productos del cliente en CC
                For f in Cefectivo(c.cod_cliente) Loop --busco las cuentas de efectivo del cliente
                        
                    control.mensaje := 'Reclasificando Asientos de Cuentas de Efectivo para el cliente '||c.cod_cliente;
                                        
                    vAplic := 'BCC';
                    vTipoTrans := 104;
                    
                    --if abs(f.SALDO_CONTABILIZADO) > 0 then
                    if abs(f.SALDO_CONTABILIZADO) > 0 or f.SAL_EMBARGADO > 0 then  -- API 12112021: Reclasificacion de embargos
                        Begin
                                 
                            Vsequim := '10.1';
                            vMensaj := 'Error de la caratula del asiento CC';                     
                            
                            CG.CG_UTL.Caratula_Del_Asiento(Variables.CODEMPRESA,
                                                 Variables.CodAgencia, --Agencia de Conexion del usuario
                                                 vAplic,
                                                 f.cod_producto,
                                                 vTipoTrans,
                                                 vSubTransCambio,
                                                 vNumTransa,
                                                 VDESCRIPCION,
                                                 vFecha,
                                                 vFecha,
                                                 VNUMERO_ASIENTO,
                                                 Variables.Usuario,
                                                 VMENSAJE_ERROR);
                                    
                            Vsequim := '10.2';
                            
                            if VMENSAJE_ERROR is not null then
                                
                                vSistema        := Variables.codsistema;--'PA'
                                vErr            := '000688';
                                vMens           := 'Caratula Asiento CC'||VMENSAJE_ERROR||'-'||VNUMERO_ASIENTO;
                               
                                message(c.cod_cliente||SQLCODE||vMensajeErr||' Caratula_Del_Asiento_CC'); Message('');
                                Utilitarios.Mensaje(vErr, variables.codidioma, vSistema,Acknowledge,vMens);
                              
                                pa.genera_msg_error(pcodmsg        =>vErr,
                                                    pmsgerror      =>'Error Caratula Asiento CC',
                                                    pproceso       =>vSistema||' Caratula Asiento CC',
                                                    pusuario       =>user,
                                                    pmsgerrorora   => 'SQLERRM: '||SQLERRM ||chr(13)||'Fecha de Corrida: '||vFecha||chr(13)||'Fecha de Solcitiud:'||c.fecha_solicitud
                                                                                                        ||chr(13)||'Ultimo Proceso Corrido: Caratula_Del_Asiento_CC'||chr(13)
                                                                                              ||'C√≥digo Del Producto: '||f.num_cuenta||chr(13)||'C√≥digo Agencia: '||f.COD_AGENCIA
                                                                                              ||chr(13)||'C√≥digo cliente: '||c.cod_cliente||chr(13)
                                                                                              ||'C√≥digo Sector Contable actual: '||c.COD_SEC_CONTABLE_ACTUAL||chr(13)
                                                                                                        ||'C√≥digo Sector Contable Nuevo: '||c.COD_SEC_CONTABLE_NUEVO,
                                                    pNotifica      =>'N'
                                                    ); 
                                
                                vSubject  := 'Error realizando Cambio de Sector Contable';
                                                        
                                vTexto     := '<style type="text/css">table {border-collapse: collapse;} td, th {border: 1px solid black;padding: 3px;}</style>';
                                vTexto     := vTexto|| '<h3>Error Caratula Del Asiento CC</h3>';
                                vTexto     := vTexto|| '<br><table>';
                                vTexto     := vTexto|| '<tr><td width=200><b>SQLERRM:</b></td><td>';
                                vTexto     := vTexto|| SQLERRM;
                                vTexto     := vTexto|| '<tr><td width=200><b>Fecha de Corrida:</b></td><td>';
                                vTexto     := vTexto|| vFecha;
                                vTexto     := vTexto|| '<tr><td><b>Fecha de Solcitiud:</b></td><td>';
                                vTexto     := vTexto|| c.fecha_solicitud;
                                vTexto     := vTexto|| '</td></tr><tr><td ><b>Ultimo Proceso Corrido:</b></td><td> Caratula_Del_Asiento_CC';
                                vTexto     := vTexto|| '</td></tr><tr><td><b>C√≥digo Del Producto:</b></td><td>';
                                vTexto     := vTexto|| f.num_cuenta;
                                vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo Agencia:</b></td><td>';
                                vTexto     := vTexto|| f.COD_AGENCIA;
                                vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo cliente:</b></td><td>';
                                vTexto     := vTexto|| c.cod_cliente;                                       
                                vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo Sector Contable actual:</b></td><td>';
                                vTexto     := vTexto|| c.COD_SEC_CONTABLE_ACTUAL;                                       
                                vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo Sector Contable Nuevo:</b></td><td>';
                                vTexto     := vTexto|| c.COD_SEC_CONTABLE_NUEVO;                                       
                                vTexto     := vTexto|| '</td></tr></table>';
                                        
                                pa.send_mail_html(vIPCorreo, vSender, vEmail, vSubject, vTexto);
                                --Fin.
                            End if;            
                        
                        end;
                        
                        --ENF 15/10/2014    :    se modifico para agregar el envio de correo para los errores. 
                        If VMENSAJE_ERROR is null then
                            Vsequim := '10.2';
                            vMensaj := 'Error de la Asiento Reclasificacion CC ';
                           
                            Asiento_Reclasificacion_CC_Sec (Variables.CODEMPRESA,
                                                            Variables.CodAgencia,
                                                            f.cod_producto,
                                                            f.IND_ESTADO,
                                                            VNUMERO_ASIENTO,
                                                            f.num_cuenta,
                                                            vAplic,
                                                            vSubAplic,
                                                            vTipoTrans,
                                                            vSubTransCambio,
                                                            vNumTransa,
                                                            vdescripcion,
                                                            vFecha,
                                                            c.cod_cliente,
                                                            f.COD_AGENCIA,   -- Agencia del Producto
                                                            c.COD_SEC_CONTABLE_ACTUAL,
                                                            c.COD_SEC_CONTABLE_NUEVO,
                                                            f.SALDO_CONTABILIZADO,
                                                            f.INT_POR_PAGAR,
                                                            F.SOBREG_MENOS_48H,
                                                            F.SOBREG_MAS48H,
                                                            v_tc1,
                                                            v_tc2,
                                                            vMensajeErr
                                                           );
                                                                                ---ENF
                            If vMensajeErr is not null Then
                             
                              vSistema   := Variables.codsistema;--'PA'
                              vErr       := '000688';
                              vMens      := ' Error de la Asiento Reclasificacion CC '||vMensajeErr;
                                
                                message(c.cod_cliente||SQLCODE||vMensajeErr||' Asiento_Reclasificacion_CC_Sec'); Message('');
                                Utilitarios.Mensaje(vErr, variables.codidioma, vSistema,Acknowledge,vMens);
                                pa.genera_msg_error(pcodmsg        =>vErr,
                                                    pmsgerror      =>'Error Asiento Reclasificacion CC',
                                                    pproceso       =>vSistema||' Asiento Reclasificacion CC',
                                                    pusuario       =>user,
                                                    pmsgerrorora   => 'SQLERRM: '||SQLERRM ||chr(13)||'Fecha de Corrida: '||vFecha||chr(13)||'Fecha de Solcitiud:'||c.fecha_solicitud
                                                                                                        ||chr(13)||'Ultimo Proceso Corrido: Asiento_Reclasificacion_CC_Sec'||chr(13)
                                                                                              ||'C√≥digo Del Producto: '||f.num_cuenta||chr(13)||'C√≥digo Agencia: '||f.COD_AGENCIA
                                                                                              ||chr(13)||'C√≥digo cliente: '||c.cod_cliente||chr(13)
                                                                                              ||'C√≥digo Sector Contable actual: '||c.COD_SEC_CONTABLE_ACTUAL||chr(13)
                                                                                                        ||'C√≥digo Sector Contable Nuevo: '||c.COD_SEC_CONTABLE_NUEVO,
                                                    pNotifica      =>'N'
                                                    );
                                                     
                                vSubject  := 'Error realizando Cambio de Sector Contable';
                                                        
                                vTexto  := '<style type="text/css">table {border-collapse: collapse;} td, th {border: 1px solid black;padding: 3px;}</style>';
                                vTexto     := vTexto|| '<h3>Error Asiento Reclasificacion CC</h3>';
                                vTexto     := vTexto|| '<br><table>';
                                vTexto     := vTexto|| '<tr><td width=200><b>SQLERRM:</b></td><td>';
                                vTexto     := vTexto|| SQLERRM;
                                vTexto     := vTexto|| '<tr><td width=200><b>Fecha de Corrida:</b></td><td>';
                                vTexto     := vTexto|| vFecha;
                                vTexto     := vTexto|| '<tr><td><b>Fecha de Solcitiud:</b></td><td>';
                                vTexto     := vTexto|| c.fecha_solicitud;
                                vTexto     := vTexto|| '</td></tr><tr><td ><b>Ultimo Proceso Corrido:</b></td><td> Asiento_Reclasificacion_CC_Sec';
                                vTexto     := vTexto|| '</td></tr><tr><td><b>C√≥digo Del Producto:</b></td><td>';
                                vTexto     := vTexto|| f.num_cuenta;
                                vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo Agencia:</b></td><td>';
                                vTexto     := vTexto|| f.COD_AGENCIA;
                                vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo cliente:</b></td><td>';
                                vTexto     := vTexto|| c.cod_cliente;                                       
                                vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo Sector Contable actual:</b></td><td>';
                                vTexto     := vTexto|| c.COD_SEC_CONTABLE_ACTUAL;                                       
                                vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo Sector Contable Nuevo:</b></td><td>';
                                vTexto     := vTexto|| c.COD_SEC_CONTABLE_NUEVO;                                       
                                vTexto     := vTexto|| '</td></tr></table>';
                                
                                pa.send_mail_html(vIPCorreo, vSender, vEmail, vSubject, vTexto);
                                --Fin.
                            End If;
                            
                        End If;
                         
                        If VMensajeErr is null then
                            
                              vMensaj := 'Error de la Cuadre Asiento CC ';
                              
                              CG.CG_UTL.Cuadre_Asiento(variables.Codempresa,
                                             vFecha,
                                             VNUMERO_ASIENTO,
                                             VMontoDife,
                                             VMensajeErr);
                                             
                          if (vMensajeErr is not null ) then
                          
                                vSistema     := Variables.codsistema;--'PA'
                                vErr         := '000688';
                                vMens        := ' Mensaje Error en Cuadre Asiento: '||VNUMERO_ASIENTO||' Monto Difiere: '||VMontoDife||' Error '||VMensajeErr;
                                
                                message(c.cod_cliente||SQLCODE||vMensajeErr||' Cuadre_Asiento_CC'); Message('');
                                Utilitarios.Mensaje(vErr, variables.codidioma, vSistema,Acknowledge,vMens);
                                                       
                                pa.genera_msg_error(pcodmsg        =>vErr,
                                                    pmsgerror      =>'Error Cuadre Asiento CC',
                                                    pproceso       =>vSistema||' Cuadre Asiento CC',
                                                    pusuario       =>user,
                                                    pmsgerrorora   => 'SQLERRM: '||SQLERRM ||chr(13)||'Fecha de Corrida: '||vFecha||chr(13)||'Fecha de Solcitiud:'||c.fecha_solicitud
                                                                                                        ||chr(13)||'Ultimo Proceso Corrido: Cuadre_Asiento_CC'||chr(13)
                                                                                              ||'C√≥digo Del Producto: '||f.num_cuenta||chr(13)||'C√≥digo Agencia: '||f.COD_AGENCIA
                                                                                              ||chr(13)||'C√≥digo cliente: '||c.cod_cliente||chr(13)
                                                                                              ||'C√≥digo Sector Contable actual: '||c.COD_SEC_CONTABLE_ACTUAL||chr(13)
                                                                                                        ||'C√≥digo Sector Contable Nuevo: '||c.COD_SEC_CONTABLE_NUEVO,
                                                    pNotifica      =>'N'
                                                    ); 
                                  
                                  vSubject  := 'Error realizando Cambio de Sector Contable';
                                                        
                                    vTexto  := '<style type="text/css">table {border-collapse: collapse;} td, th {border: 1px solid black;padding: 3px;}</style>';
                                    vTexto     := vTexto|| '<h3>Error Cuadre_Asiento CC</h3>';
                                    vTexto     := vTexto|| '<br><table>';
                                    vTexto     := vTexto|| '<tr><td width=200><b>SQLERRM:</b></td><td>';
                                    vTexto     := vTexto|| SQLERRM;
                                    vTexto     := vTexto|| '<tr><td width=200><b>Fecha de Corrida:</b></td><td>';
                                    vTexto     := vTexto|| vFecha;
                                    vTexto     := vTexto|| '<tr><td><b>Fecha de Solcitiud:</b></td><td>';
                                    vTexto     := vTexto|| c.fecha_solicitud;
                                    vTexto     := vTexto|| '</td></tr><tr><td ><b>Ultimo Proceso Corrido:</b></td><td> Cuadre_Asiento_CC';
                                    vTexto     := vTexto|| '</td></tr><tr><td><b>C√≥digo Del Producto:</b></td><td>';
                                    vTexto     := vTexto|| f.num_cuenta;
                                    vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo Agencia:</b></td><td>';
                                    vTexto     := vTexto|| f.COD_AGENCIA;
                                    vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo cliente:</b></td><td>';
                                    vTexto     := vTexto|| c.cod_cliente;                                       
                                    vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo Sector Contable actual:</b></td><td>';
                                    vTexto     := vTexto|| c.COD_SEC_CONTABLE_ACTUAL;                                       
                                    vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo Sector Contable Nuevo:</b></td><td>';
                                    vTexto     := vTexto|| c.COD_SEC_CONTABLE_NUEVO;                                       
                                    vTexto     := vTexto|| '</td></tr></table>';
                                    
                                    pa.send_mail_html(vIPCorreo, vSender, vEmail, vSubject, vTexto);
                                  --Fin.
                          Else
                                control.mensaje := 'No. Asiento CC: '||VNUMERO_ASIENTO;                    
                                    
                              if vNumero_AsientoI is null then -- Guardar el primero n√∫mero de asiento
                                    vNumero_AsientoI := VNUMERO_ASIENTO;
                              end if;--if de guardar numero de asiento.
                              
                          End if;--if de variable mensaje del prcoedimiento actual.
                          
                        End If;--variable mensaje de error del procedimiento anterior.
                        
                    End if; -- saldo_contabilizado
                                                                                    
                End Loop; -- cc
                
            End If;--if de mensajes de error.
             
             Vsequim := '11';
             vMensaj := 'Error despues del asiento de reclasificacion para CC ';

            -- INCREMENTA EL CONTADOR
            vcantidadprocesada := vcantidadprocesada + 1;
            -- ACTUALIZA BARRA    
             --SET_ITEM_PROPERTY('ETIQUETAS.ET_GAUGE',WIDTH,(656*(((VCANTIDADPROCESADA*100)/VCANTIDADTOTAL)/100)));
            --:ETIQUETAS.ET_AVANCE := TO_CHAR(ROUND(((VCANTIDADPROCESADA*100)/VCANTIDADTOTAL)))||'%'; 
            --Synchronize;
            Vsequim := '12';
            
            If VMensajeErr is null or VMENSAJE_ERROR is null then
                
                control.mensaje := 'Pasando a hist√≥ricos las solicitud de cambio procesada '||c.cod_cliente;
                Vsequim := '12.1';
                
              Begin
                  insert into pa.solicitud_cambio_sector_hist
                  select *
                      from pa.solicitud_cambio_sector
                  where trunc(fecha_solicitud) <= vFecha
                      and cod_cliente = c.cod_cliente;
              Exception 
                  When Others then 
                        control.mensaje     := 'Error en Cierre Reasignacion de cliente a sector contable, Pasando a Hist√≥rico de Solicitudes '||SQLERRM;
                        vSistema            :=  Variables.codsistema;--'PA'
                        vErr                := '000688';
                        vMens               := 'en Cierre Reasignacion de cliente a sector contable, Pasando a Hist√≥rico de Solicitudes '|| SQLERRM;
                        v_Mensaje           := control.mensaje;        
                         
                        message(c.cod_cliente||SQLCODE||vMensajeErr||' Historico'); Message('');
                        Utilitarios.Mensaje(vErr, variables.codidioma, vSistema,Acknowledge,vMens);
                        
                        pa.genera_msg_error(pcodmsg        =>vErr,
                                            pmsgerror      =>'Error en el Historico',
                                            pproceso       =>vSistema||' Historico',
                                            pusuario       =>user,
                                            pmsgerrorora   => 'SQLERRM: '||SQLERRM ||chr(13)||'Fecha de Corrida: '||vFecha||chr(13)||'Fecha de Solcitiud:'||c.fecha_solicitud
                                                                                                ||chr(13)||'Ultimo Proceso Corrido: Historico'||chr(13)
                                                                                          ||'C√≥digo Del Producto: '||chr(13)||'C√≥digo Agencia: '
                                                                                          ||chr(13)||'C√≥digo cliente: '||c.cod_cliente||chr(13)
                                                                                          ||'C√≥digo Sector Contable actual: '||c.COD_SEC_CONTABLE_ACTUAL||chr(13)
                                                                                                ||'C√≥digo Sector Contable Nuevo: '||c.COD_SEC_CONTABLE_NUEVO,
                                              pNotifica      =>'N'
                                              ); 
                      vSubject  := 'Error realizando Cambio de Sector Contable';
                                                        
                        vTexto     := '<style type="text/css">table {border-collapse: collapse;} td, th {border: 1px solid black;padding: 3px;}</style>';
                        vTexto     := vTexto|| '<h3>Error en el Historico</h3>';
                        vTexto     := vTexto|| '<br><table>';
                        vTexto     := vTexto|| '<tr><td width=200><b>SQLERRM:</b></td><td>';
                        vTexto     := vTexto|| SQLERRM;
                        vTexto     := vTexto|| '<tr><td width=200><b>Fecha de Corrida:</b></td><td>';
                        vTexto     := vTexto|| vFecha;
                        vTexto     := vTexto|| '<tr><td><b>Fecha de Solcitiud:</b></td><td>';
                        vTexto     := vTexto|| c.fecha_solicitud;
                        vTexto     := vTexto|| '</td></tr><tr><td ><b>Ultimo Proceso Corrido:</b></td><td> Historico';
                        vTexto     := vTexto|| '</td></tr><tr><td><b>C√≥digo Del Producto:</b></td><td>';
                        vTexto     := vTexto|| null;
                        vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo Agencia:</b></td><td>';
                        vTexto     := vTexto|| null;
                        vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo cliente:</b></td><td>';
                        vTexto     := vTexto|| c.cod_cliente;                                       
                        vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo Sector Contable actual:</b></td><td>';
                        vTexto     := vTexto|| c.COD_SEC_CONTABLE_ACTUAL;                                       
                        vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo Sector Contable Nuevo:</b></td><td>';
                        vTexto     := vTexto|| c.COD_SEC_CONTABLE_NUEVO;                                       
                        vTexto     := vTexto|| '</td></tr></table>';
                                
                        pa.send_mail_html(vIPCorreo, vSender, vEmail, vSubject, vTexto);
                      --Fin.
              End;
                                              
                Vsequim := '12.2';
              Begin
                  Delete pa.solicitud_cambio_sector
                    where trunc(fecha_solicitud) <= vFecha
                      and cod_cliente = c.cod_cliente;
              Exception 
                  When Others then 
                        control.mensaje     := 'Error en Cierre Reasignacion de cliente a sector contable, borrando solicitudes de cambio realizadas '||SQLERRM;
                        vSistema            :=  Variables.codsistema;--'PA'
                        vErr                := '000688';
                        vMens               := ' en Cierre Reasignacion de cliente a sector contable, borrando solicitudes de cambio realizadas ' || SQLERRM;
                        v_Mensaje           := control.mensaje;                        
                         
                        message(c.cod_cliente||SQLCODE||vMensajeErr||' Historico'); Message('');
                        Utilitarios.Mensaje(vErr, variables.codidioma, vSistema,Acknowledge,vMens);
                        
                        pa.genera_msg_error(pcodmsg        =>vErr,
                                            pmsgerror      =>'Error Eliminando',
                                            pproceso       =>vSistema||' Elminaci√≥n',
                                            pusuario       =>user,
                                            pmsgerrorora   => 'SQLERRM: '||SQLERRM ||chr(13)||'Fecha de Corrida: '||vFecha||chr(13)||'Fecha de Solcitiud:'||c.fecha_solicitud
                                                                                                ||chr(13)||'Ultimo Proceso Corrido: Elminaci√≥n'||chr(13)
                                                                                          ||'C√≥digo Del Producto: '||chr(13)||'C√≥digo Agencia: '
                                                                                          ||chr(13)||'C√≥digo cliente: '||c.cod_cliente||chr(13)
                                                                                          ||'C√≥digo Sector Contable actual: '||c.COD_SEC_CONTABLE_ACTUAL||chr(13)
                                                                                                ||'C√≥digo Sector Contable Nuevo: '||c.COD_SEC_CONTABLE_NUEVO,
                                            pNotifica      =>'N'
                                            );
                      
                      vSubject  := 'Error realizando Cambio de Sector Contable';
                                                        
                    vTexto  := '<style type="text/css">table {border-collapse: collapse;} td, th {border: 1px solid black;padding: 3px;}</style>';
                    vTexto     := vTexto|| '<h3>Error Eliminando</h3>';
                    vTexto     := vTexto|| '<br><table>';
                    vTexto     := vTexto|| '<tr><td width=200><b>SQLERRM:</b></td><td>';
                    vTexto     := vTexto|| SQLERRM;
                    vTexto     := vTexto|| '<tr><td width=200><b>Fecha de Corrida:</b></td><td>';
                    vTexto     := vTexto|| vFecha;
                    vTexto     := vTexto|| '<tr><td><b>Fecha de Solcitiud:</b></td><td>';
                    vTexto     := vTexto|| c.fecha_solicitud;
                    vTexto     := vTexto|| '</td></tr><tr><td ><b>Ultimo Proceso Corrido:</b></td><td> Eliminando';
                    vTexto     := vTexto|| '</td></tr><tr><td><b>C√≥digo Del Producto:</b></td><td>';
                    vTexto     := vTexto|| null;
                    vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo Agencia:</b></td><td>';
                    vTexto     := vTexto|| null;
                    vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo cliente:</b></td><td>';
                    vTexto     := vTexto|| c.cod_cliente;                                       
                    vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo Sector Contable actual:</b></td><td>';
                    vTexto     := vTexto|| c.COD_SEC_CONTABLE_ACTUAL;                                       
                    vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo Sector Contable Nuevo:</b></td><td>';
                    vTexto     := vTexto|| c.COD_SEC_CONTABLE_NUEVO;                                       
                    vTexto     := vTexto|| '</td></tr></table>';
                      --Fin.
              End;    
              salvar_escondido;
          else
              rollback;
          End if;
            
        End Loop; --clientes
        
        --ENF 15/10/2014    :    se modifico para agregar el envio de correo para los errores. Fin.
        if not FORM_SUCCESS then
            vSistema  := Variables.codsistema;--'PA'            
            vErr := '000688';
            vMens := 'Reasignando, Validando forma en Aplicar Reclasificacion '||SQLERRM;     
           Raise Bpa_Exception;
        end if;
            
        --Set_Application_Property(Cursor_style, 'DEFAULT'); 
             
        if vnumero_asiento is null then
            control.mensaje := 'Fueron procesados '||VCANTIDADPROCESADA;
        else   
            control.mensaje := 'Fueron procesados '||VCANTIDADPROCESADA||' clientes. Se generaron los asientos del '||vnumero_asientoi ||' al '||vnumero_asiento||'.';
        end if;    
      
        v_Mensaje :=     control.mensaje;    

    Exception
        When Info_Exception Then
            Message(vErr ||'-'|| vMens);
            BITACORA_CIERRES_ERROR (variables.fecha, 'I');
        When Bpa_Exception Then
            --Set_Application_Property(Cursor_style, 'DEFAULT');      
            --Utilitarios.Mensaje(vErr, :codidioma, vSistema,Acknowledge,vMens);
            --exit_form(no_commit, no_validate);
            Message(vErr ||'-'|| vMens);
            BITACORA_CIERRES_ERROR (variables.fecha);
        
        When Others Then
            --Set_Application_Property(Cursor_style, 'DEFAULT');        
            Message(Vsequim ||'-'|| vMensaj ||'-'|| Sqlerrm);
            BITACORA_CIERRES_ERROR (variables.fecha);
            --exit_form(no_commit, no_validate);

    END P_APLICA_DIARIO_SEC;
    
    PROCEDURE P_Mensual_SEC(vFecha in Date,
                            vProxFecha in Date,
                            v_Mensaje in out Varchar2) IS

    --EFECTUA : Ejecuta el proceso mensual                                     
    --HISTORIA: API 05/10/2012 Creaci√≥n
    --HISTORIA: EMF 15/10/2014    :    se modifico para agregar el envio de correo para los errores.
    Cursor CO is
        Select *
        from solicitud_cambio_sector
        Where trunc(Fecha_Solicitud)    <= vFecha
        Order by cod_agencia, cod_cliente, fecha_solicitud;
        
    Cursor prestamo (vcliente varchar2) is
        Select prc.CODIGO_EMPRESA,prc.CODIGO_AGENCIA, prc.CODIGO_CLIENTE, 
        prc.NO_CREDITO,prc.CODIGO_MONEDA,
        prc.ESTADO,prc.TIPO_CREDITO,pri.FECHA_LIQUIDACION,
        Nvl(pri.SALDO_CREDITO,0) SALDO_CREDITO, prt.CODIGO_SUB_APLICACION,
        (Nvl(int_acumulados_antes,0)+Nvl(int_acumulados_liq,0)+Nvl(int_suspenso_antes,0)+Nvl(int_suspenso_liq,0)-Nvl(int_pagados_antes,0)) Intereses
        from   pr_creditos prc, pr_intereses_generados pri, pr_tipo_credito prt
        Where  prc.CODIGO_EMPRESA         = pri.CODIGO_EMPRESA
        And      prc.NO_CREDITO                 = pri.NO_CREDITO
        And    prc.CODIGO_EMPRESA         = prt.CODIGO_EMPRESA
        And      prc.TIPO_CREDITO                = prt.TIPO_CREDITO
        And         prc.CODIGO_EMPRESA         = VARIABLES.CODEMPRESA
        And         prc.CODIGO_CLIENTE         = vcliente
      And         pri.FECHA_LIQUIDACION  = vFecha
      And         prc.ESTADO                        In ('D','E','J')
      And         Nvl(pri.SALDO_CREDITO,0) > 0
        group by prc.CODIGO_EMPRESA,prc.CODIGO_AGENCIA,prc.CODIGO_CLIENTE,
        prt.CODIGO_SUB_APLICACION,prc.CODIGO_MONEDA, prc.NO_CREDITO,
        prc.ESTADO,prc.TIPO_CREDITO,pri.FECHA_LIQUIDACION,
        Nvl(pri.SALDO_CREDITO,0),
        (Nvl(int_acumulados_antes,0)+Nvl(int_acumulados_liq,0)+Nvl(int_suspenso_antes,0)+Nvl(int_suspenso_liq,0)-Nvl(int_pagados_antes,0));


    Cursor Certificado (vcliente varchar2) is
        Select cdc.cod_empresa, cdc.cod_agencia, cdc.num_certificado, cdc.COD_CARTERA, cdc.estado, 
        cdc.cuenta_contable, cdc.cliente, cdc.cod_producto, cdc.Tip_Certificado, 
        cdi.fecha_calculo, Nvl(cds.SALDO_AL_CIERRE,0) monto_cd, cdi.COD_RETENCION,
        NVL(cdc.MON_INT_X_PAGAR,0) MON_INT_X_PAGAR, cdc.pla_dias, cdc.Clasificacion, cdc.cod_moneda--dfatule 10092007    
        from cd_certificado cdc, CD_INTERES cdi, CD_SALDOS_AL_CIERRE CDS
        Where cdc.COD_EMPRESA         = cdi.COD_EMPRESA
        And      cdc.num_certificado = cdi.num_certificado
        AND      cdc.COD_EMPRESA         = cds.COD_EMPRESA
        And      cdc.num_certificado = cds.num_certificado
        And      cdi.fecha_calculo     = cds.FECHA_CIERRE    
        And      cdc.COD_EMPRESA         = VARIABLES.CODEMPRESA
        And      cdc.cliente                 = vcliente
        And      cds.FECHA_CIERRE         = VARIABLES.ULT_DIA_MES
        And      cdc.estado                     in ('A','R');
        
    Cursor Cefectivo (vcliente varchar2) is
        Select CE.COD_EMPRESA, CE.NUM_CUENTA, CE.COD_AGENCIA, CE.COD_PRODUCTO, CE.COD_CLIENTE, 
        CE.IND_ESTADO, SD.FECHA, Nvl(SD.SALDO_CONTABILIZADO,0) SALDO_CONTABILIZADO,
        Nvl(SOBREG_MENOS_48H,0) SOBREG_MENOS_48H,
        (Nvl(SOBREG_MAS48H_HASTA30D,0) + Nvl(SOBREG_MAS48H_MAYOR30D,0)) SOBREG_MAS48H,
        NVL(CE.INT_POR_PAGAR,0) INT_POR_PAGAR,
        NVL(SD.SAL_EMBARGADO, 0) SAL_EMBARGADO  -- API 12112021: Reclasificacion Embargos
        from CUENTA_EFECTIVO ce, SALDOS_X_DIA sd
        Where ce.COD_EMPRESA = sd.COD_EMPRESA
        And      ce.NUM_CUENTA  = sd.NUM_CUENTA
        And      ce.COD_EMPRESA = VARIABLES.CODEMPRESA
        And   CE.COD_CLIENTE = vcliente
        And      ce.NUM_CUENTA  >    0
        And      SD.FECHA               = vFecha
        Order by CE.COD_EMPRESA, CE.NUM_CUENTA;
        
          vNumAsiento          number(15);
          vTC1                 number(10):=null;
          vTC2                 number(10):=null;
          vMtoDiferencia       number(18,2);
          vErrFatal            boolean := FALSE;
          vAplic               varchar2(5) := 'BCG';-- buscar quitar hardcode
          vSubAplic            number(5)     := '900';-- buscar quitar hardcode
          vTipoTrans           varchar2(5) :='1';-- buscar quitar hardcode
          vSubTransCambio      varchar2(5) := Null;-- buscar quitar hardcode
          vNumTransa           varchar2(15):=0;
          vNUMERO_ASIENTO      Number(10);
          vNUMERO_ASIENTOI     Number(10);
          vDOCUMENTO           Varchar2(30);  
          vDESCRIPCION         Varchar2(250):='Asiento Reclasificacion Saldos de Productos de Clientes por Cambio de Sector Contable';
          vMENSAJE_ERROR       Varchar2(255);
          BCG_INTERFACE        exception;
          v_Tc1                number(18,8);
          v_Tc2                number(18,8);
          vMontoDife           Number(18,8);
          vMensajeErr          varchar2(255);
          vCant                Number;
          vContador            number;
          vcantidadtoTal       number(10);
          vcantidadprocesada   number(10);
          v_E_Saldos           SALDOS_X_DIA.SALDO_CONTABILIZADO%Type:=0;
          v_E_CCSaldos         SALDOS_X_DIA.SALDO_CONTABILIZADO%Type:=0;
          v_E_CDSaldos         CD_INTERES.monto_cd%Type:=0;
          v_E_PRSaldos         pr_intereses_generados.SALDO_CREDITO%Type:=0;
          --
          Info_Exception       Exception;
          Bpa_Exception        Exception;
          Bcc_Interface        Exception;
          Bcd_Interface        Exception;
          Bpr_Interface        Exception;
          vErr                 Varchar2(6);
          vMens                Varchar2(1000);
          vSistema             Varchar2(2);
          Vsequim              varchar2(10);
          vMensaj              varchar2(100);               
          vLAsientos           number;
          
          --EMF 15/10/2014    :se modifico para agregar el envio de correo para los errores. variables.
          vSubject  varchar2(4000);
          vtexto    varchar2(4000);
          vEmail    varchar2(100) := Param.Parametro_X_Empresa('1','CORREO_MSG_ERRORES','PA');    
          vIpCorreo varchar2(50)  := Param.Parametro_X_Empresa('1','SERVIDOR_SMTP','PA');
          vSender   varchar2(100) := Param.Parametro_X_Empresa('1','CORREO_SENDER','PA'); 
        --Fin.
        --Declaracion de la respuesta de factoring y leasing
          pExito    BOOLEAN;
          pCodigoRespuesta varchar2(100);
          --SE ADQUIERE LOS INDICADORES DE LOS SERVICIOS
          vIndFact   varchar2(100) := Param.Parametro_X_Empresa('1','FACTORING_IND_SEC','PA'); 
          vIndLeas   varchar2(100) := Param.Parametro_X_Empresa('1','LEASING_IND_SEC','PA'); 
          vIndITC    varchar2(100) := Param.Parametro_X_Empresa('1','ITC_IND_SEC','PA'); 
    BEGIN
        
        Vsequim   := '0';
        vMensaj   := 'Error en Ejecucion del proceso Cierre Reasignacion de cliente entre Oficiales '||vFecha;
        vContador := 0;

        Begin
            Select count(*)
            Into vContador
            from solicitud_cambio_sector
            Where FECHA_SOLICITUD <= vFecha;
        Exception
          when others then
             vContador := 0;
        End;
        
            Vsequim := '1';

        -- INICIA GAUGE ORACLE
           vcantidadtoTal := vContador;
           vcantidadprocesada := 0;
            
        -- ANCHO DE LA BARRA
           --SET_ITEM_PROPERTY('etiquetas.et_gauge',WIDTH,0);
           --:etiquetas.et_avance := '0%';
        
        -- DESPLIEGA OBJETOS
           --SET_ITEM_PROPERTY('etiquetas.et_gauge',DISPLAYED,PROPERTY_TRUE);    
           --SET_ITEM_PROPERTY('etiquetas.et_avance',DISPLAYED,PROPERTY_TRUE); 
           --synchronize;
           
        Vsequim := '2';
        --ENF: 15.10.2014: se agrego para no tener que ejecutar el proceso mensual que hace lo mismo.
        if ( vContador = 0 ) then
        
            control.mensaje     := 'No existen cambios de sector a clientes por procesar.';
                
            --No existen cambios de agencia a cuentas por procesar
            vSistema      := 'CC';
            vErr          := '003041';
            vMens         := Null;
            v_Mensaje     := control.mensaje;
            Raise Info_Exception;
        end if;      

        If vContador > 0 Then
            Begin
                Select count(*)
                    Into VCANTIDADTOTAL
                From solicitud_cambio_sector
                where fecha_solicitud <= vFecha;
            Exception
                When Others Then
                 VCANTIDADTOTAL := 0;
                 vsequim := '3';        
                 vMensaj := 'Error al contar cambios para la fecha';
                 Raise Bpa_Exception;
            End;
        End If;
        
        control.mensaje := 'Buscando productos para Reclasificar ';
        --Synchronize;             
            
        For C in CO Loop    --Todos los clientes que se van a reclasificar
        
            Begin--actualizo el sector
                Update Personas
                Set Cod_Sec_Contable = C.Cod_Sec_Contable_Nuevo,
                        Fecha_Modificacion =  sysdate
                Where cod_persona = c.cod_cliente;
                --
                Vsequim := '6.1';    
                vMensaj := 'Actualizando cliente '||c.cod_cliente;
                
                --SI EL INDICADOR ESTA ENCENDIDO ENTONCES SE LLAMA EL SERVICIO
                IF vIndFact = 'S' THEN
                    --Proceso para Factoring
                    Proceso_Fact_Leas(C.COD_CLIENTE, C.COD_SEC_CONTABLE_ACTUAL, C.Cod_Sec_Contable_Nuevo, '1150', pExito);
                    
                    IF pExito = TRUE THEN
                        dbms_output.put_line('Respuesta exitosa para Factoring');
                    ELSE
                        dbms_output.put_line('Respuesta erronea para Factoring');
                    END IF;
                END IF;
                
                IF vIndLeas = 'S' THEN
                    --Proceso para Leasing
                    Proceso_Fact_Leas(C.COD_CLIENTE, C.COD_SEC_CONTABLE_ACTUAL, C.Cod_Sec_Contable_Nuevo, '1151', pExito);
                    
                    IF pExito = TRUE THEN
                        dbms_output.put_line('Respuesta exitosa para Leasing');
                    ELSE
                        dbms_output.put_line('Respuesta erronea para Leasing');
                    END IF;
                END IF;
                
                IF vIndITC = 'S' THEN
                    --Proceso para ITC
                    ProcesoITC (vFecha, vProxFecha, C.COD_CLIENTE,C.Cod_Sec_Contable_Nuevo,C.cod_agencia,pCodigoRespuesta);

                    IF pCodigoRespuesta = '0' THEN
                        dbms_output.put_line('Respuesta exitosa para ITC');
                    ELSE
                        dbms_output.put_line('Respuesta erronea para ITC');
                    END IF;
                END IF;
            Exception                 
                When Others then 
                    control.mensaje     := sqlcode||'Error Actualizando Cliente-Sector '||c.cod_cliente||'-'||C.COD_sec_contable_nuevo||' -Error: '||SQLERRM;
                    --Synchronize;
                    --Pause;
                    If sqlcode = '-2291' Then
                        Message(' Dato relacionado con el cliente no existe en la tabla personas');Message('');
                    End If;
                    Vsequim := '6.2';    
                    vMensaj := 'Error actualizando cliente '||c.cod_cliente;
                    --
                    vSistema               := Variables.codsistema;--'PA'
                    vErr                   := '000688';
                    vMens                  := 'actualizando Cliente '||c.cod_cliente;
                    v_Mensaje              := control.mensaje;
                    
                    --EMF 15/10/2014    :    se modifico para agregar el envio de correo para los errores. variables dos mensajes y comentado la exception, mas registro y envio de correo para errores.
                    message(c.cod_cliente||SQLCODE||vMensajeErr||' actualizando Cliente'); Message('');
                    Utilitarios.Mensaje(vErr, variables.codidioma, vSistema,Acknowledge,vMens);
                    --Raise Bpa_Exception;
                    pa.genera_msg_error(pcodmsg        =>vErr,
                                        pmsgerror      =>'Error actualizando Cliente Mensual',
                                        pproceso       =>vSistema||' actualizando Cliente',
                                        pusuario       =>user,
                                        pmsgerrorora   => 'SQLERRM: '||SQLERRM ||chr(13)||'Fecha de Corrida: '||vFecha||chr(13)||'Fecha de Solcitiud:'||c.fecha_solicitud||chr(13)||'Ultimo Proceso Corrido: actualizando Cliente'||chr(13)
                                                                        ||'C√≥digo Del Producto: '||chr(13)||'C√≥digo Agencia: '||chr(13)||'C√≥digo cliente: '||c.cod_cliente||chr(13)||'C√≥digo Sector Contable actual: '||c.COD_SEC_CONTABLE_ACTUAL||chr(13)
                                                                                                    ||'C√≥digo Sector Contable Nuevo: '||c.COD_SEC_CONTABLE_NUEVO,
                                        pNotifica      =>'N'
                                        ); 
                    vSubject  := 'Error realizando Cambio de Sector Contable';
                                                    
                    vTexto  := '<style type="text/css">table {border-collapse: collapse;} td, th {border: 1px solid black;padding: 3px;}</style>';
                    vTexto     := vTexto|| '<h3>Error actualizando Cliente Mensual</h3>';
                    vTexto     := vTexto|| '<br><table>';
                    vTexto     := vTexto|| '<tr><td width=200><b>SQLERRM:</b></td><td>';
                    vTexto     := vTexto|| SQLERRM;
                    vTexto     := vTexto|| '<tr><td width=200><b>Fecha de Corrida:</b></td><td>';
                    vTexto     := vTexto|| vFecha;
                    vTexto     := vTexto|| '<tr><td><b>Fecha de Solcitiud:</b></td><td>';
                    vTexto     := vTexto|| c.fecha_solicitud;
                    vTexto     := vTexto|| '</td></tr><tr><td ><b>Ultimo Proceso Corrido:</b></td><td> actualizando Cliente';
                    vTexto     := vTexto|| '</td></tr><tr><td><b>C√≥digo Del Producto:</b></td><td>';
                    vTexto     := vTexto|| null;
                    vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo Agencia:</b></td><td>';
                    vTexto     := vTexto|| null;
                    vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo cliente:</b></td><td>';
                    vTexto     := vTexto|| c.cod_cliente;                                       
                    vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo Sector Contable actual:</b></td><td>';
                    vTexto     := vTexto|| c.COD_SEC_CONTABLE_ACTUAL;                                       
                    vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo Sector Contable Nuevo:</b></td><td>';
                    vTexto     := vTexto|| c.COD_SEC_CONTABLE_NUEVO;                                       
                    vTexto     := vTexto|| '</td></tr></table>';
                    
                    pa.send_mail_html(vIPCorreo, vSender, vEmail, vSubject, vTexto);
            --FIN.
            End;            
                
            control.mensaje := 'Reclasificando Asientos de Productos para el cliente '||c.cod_cliente;
            --Synchronize;    
            
            Vsequim := '7';
            vMensaj := 'Error despues de actualizar cliente ';
            control.mensaje := 'Reclasificando Asientos de Productos para el cliente '||c.cod_cliente;
            --Synchronize;    
             --Busco los productos del cliente
            For d in prestamo(c.cod_cliente) loop --busco prestamos de cada subaplicacion
                    
                control.mensaje := 'Reclasificando Asientos de Prestamos para el cliente '||c.cod_cliente;
                                
                vAplic := 'BPR';
                vTipoTrans := 78;
                
                Begin
                         
                    Vsequim := '8';
                    vMensaj := 'Error de la caratula del asiento pr';                     
                    CG.CG_UTL.Caratula_Del_Asiento(Variables.CODEMPRESA,
                                                     Variables.CodAgencia, --Agencia de Conexion del usuario
                                                     vAplic,
                                                     d.codigo_sub_aplicacion,
                                                     vTipoTrans,
                                                     vSubTransCambio,
                                                     vNumTransa,
                                                     VDESCRIPCION,
                                                     vFecha,
                                                     vFecha,
                                                     VNUMERO_ASIENTO,
                                                     Variables.Usuario,
                                                     VMENSAJE_ERROR);
                            
                    Vsequim := '8.1';
                    
                    if VMENSAJE_ERROR is not null then
                      --ENF 15/10/2014    :    se modifico para agregar el envio de correo para los errores. variables dos mensajes y comentado la exception, mas registro y envio de correo para errores.
                      --message('Caratula Asiento Pr '||VMENSAJE_ERROR||'-'||VNUMERO_ASIENTO); Message('');                  
                        vSistema              := Variables.codsistema;--'PA'
                        vErr                  := '000688';
                        vMens                 := 'Caratula Asiento '||VMENSAJE_ERROR||'-'||VNUMERO_ASIENTO;
                        
                        message(c.cod_cliente||SQLCODE||vMensajeErr||' Caratula_Del_Asiento_CC'); Message('');
                        Utilitarios.Mensaje(vErr, variables.codidioma, vSistema,Acknowledge,vMens);
                        
                        --raise BCG_INTERFACE;
                        pa.genera_msg_error(pcodmsg        =>vErr,
                                            pmsgerror      =>'Error Caratula Asiento Pr Mensual',
                                            pproceso       =>vSistema||'-Caratula Asiento',
                                            pusuario       =>user,
                                            pmsgerrorora   => 'SQLERRM: '||SQLERRM ||chr(13)||'Fecha de Corrida: '||vFecha||chr(13)||'Fecha de Solcitiud:'||c.fecha_solicitud
                                                                                                    ||chr(13)||'Ultimo Proceso Corrido: Caratula_Del_Asiento_PR'||chr(13)
                                                                                        ||'C√≥digo Del Producto: '||d.no_credito||chr(13)||'C√≥digo Agencia: '||d.CODIGO_AGENCIA
                                                                                        ||chr(13)||'C√≥digo cliente: '||c.cod_cliente||chr(13)
                                                                                        ||'C√≥digo Sector Contable actual: '||c.COD_SEC_CONTABLE_ACTUAL||chr(13)
                                                                                                    ||'C√≥digo Sector Contable Nuevo: '||c.COD_SEC_CONTABLE_NUEVO,
                                            pNotifica      =>'N'
                                            ); 
                                            
                        vSubject  := 'Error realizando Cambio de Sector Contable';
                                                        
                        vTexto  := '<style type="text/css">table {border-collapse: collapse;} td, th {border: 1px solid black;padding: 3px;}</style>';
                        vTexto     := vTexto|| '<h3>Error Caratula Asiento Pr Mensual</h3>';
                        vTexto     := vTexto|| '<br><table>';
                        vTexto     := vTexto|| '<tr><td width=200><b>SQLERRM:</b></td><td>';
                        vTexto     := vTexto|| SQLERRM;
                        vTexto     := vTexto|| '<tr><td width=200><b>Fecha de Corrida:</b></td><td>';
                        vTexto     := vTexto|| vFecha;
                        vTexto     := vTexto|| '<tr><td><b>Fecha de Solcitiud:</b></td><td>';
                        vTexto     := vTexto|| c.fecha_solicitud;
                        vTexto     := vTexto|| '</td></tr><tr><td ><b>Ultimo Proceso Corrido:</b></td><td> Caratula_Del_Asiento_PR';
                        vTexto     := vTexto|| '</td></tr><tr><td><b>C√≥digo Del Producto:</b></td><td>';
                        vTexto     := vTexto|| d.no_credito;
                        vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo Agencia:</b></td><td>';
                        vTexto     := vTexto|| d.CODIGO_AGENCIA;
                        vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo cliente:</b></td><td>';
                        vTexto     := vTexto|| c.cod_cliente;                                       
                        vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo Sector Contable actual:</b></td><td>';
                        vTexto     := vTexto|| c.COD_SEC_CONTABLE_ACTUAL;                                       
                        vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo Sector Contable Nuevo:</b></td><td>';
                        vTexto     := vTexto|| c.COD_SEC_CONTABLE_NUEVO;                                       
                        vTexto     := vTexto|| '</td></tr></table>';
                        
                        pa.send_mail_html(vIPCorreo, vSender, vEmail, vSubject, vTexto);
                        --Fin.
                    End if;            
                
                end;
                
                
                --ENF 15/10/2014    :    se modifico para agregar el envio de correo para los errores. 
                --                                    Variables dos mensajes y comentado la exception, mas registro y envio de correo para errores.
                if VMENSAJE_ERROR is null then
                    
                    vMensaj := 'Error de Asiento de Reclacificacion pr';
                    Asiento_Reclasificacion_Pr_Sec(Variables.CODEMPRESA,
                                                   Variables.CodAgencia,
                                                   d.TIPO_CREDITO,
                                                   d.estado,
                                                   VNUMERO_ASIENTO,
                                                   d.no_credito,
                                                   vAplic,
                                                   vSubAplic,
                                                   vTipoTrans,
                                                   vSubTransCambio,
                                                   vNumTransa,
                                                   vdescripcion,
                                                   vFecha,
                                                   c.cod_cliente,
                                                   d.CODIGO_AGENCIA,
                                                   c.COD_SEC_CONTABLE_ACTUAL,
                                                   c.COD_SEC_CONTABLE_NUEVO,
                                                   d.SALDO_CREDITO,
                                                   d.INTERESES,
                                                   v_tc1,
                                                   v_tc2,
                                                   VMensajeErr
                                                   );
                                               
                                                                                                                      
                    If VMensajeErr is not null Then
                            --Raise Bpr_Interface;
                            
                            vSistema       := Variables.codsistema;--'PA'
                            vErr           := '000688';
                            vMens          := 'Asiento de Reclacificacion pr '||VMensajeErr||'-'||VNUMERO_ASIENTO;
                          
                          --ENF 15/10/2014    :    se modifico para agregar el envio de correo para los errores.
                            message(c.cod_cliente||SQLCODE||vMensajeErr||' Asiento_Reclasificacion_Pr_Sec'); Message('');
                            Utilitarios.Mensaje(vErr, variables.codidioma, vSistema,Acknowledge,vMens);
                            pa.genera_msg_error(pcodmsg        =>vErr,
                                                pmsgerror      =>'Error Asiento de Reclacificacion pr Mensual',
                                                pproceso       =>vSistema||' Asiento de Reclacificacion pr',
                                                pusuario       =>user,
                                                pmsgerrorora   => 'SQLERRM: '||SQLERRM ||chr(13)||'Fecha de Corrida: '||vFecha||chr(13)||'Fecha de Solcitiud:'||c.fecha_solicitud
                                                                                                        ||chr(13)||'Ultimo Proceso Corrido: Asiento_Reclasificacion_Pr_Sec'||chr(13)
                                                                                            ||'C√≥digo Del Producto: '||d.no_credito||chr(13)||'C√≥digo Agencia: '||d.CODIGO_AGENCIA
                                                                                            ||chr(13)||'C√≥digo cliente: '||c.cod_cliente||chr(13)
                                                                                            ||'C√≥digo Sector Contable actual: '||c.COD_SEC_CONTABLE_ACTUAL||chr(13)
                                                                                                        ||'C√≥digo Sector Contable Nuevo: '||c.COD_SEC_CONTABLE_NUEVO,
                                                pNotifica      =>'N'
                                                ); 
                            vSubject  := 'Error realizando Cambio de Sector Contable';
                                                            
                            vTexto  := '<style type="text/css">table {border-collapse: collapse;} td, th {border: 1px solid black;padding: 3px;}</style>';
                            vTexto     := vTexto|| '<h3>Error Asiento de Reclacificacion pr Mensual</h3>';
                            vTexto     := vTexto|| '<br><table>';
                            vTexto     := vTexto|| '<tr><td width=200><b>SQLERRM:</b></td><td>';
                            vTexto     := vTexto|| SQLERRM;
                            vTexto     := vTexto|| '<tr><td width=200><b>Fecha de Corrida:</b></td><td>';
                            vTexto     := vTexto|| vFecha;
                            vTexto     := vTexto|| '<tr><td><b>Fecha de Solcitiud:</b></td><td>';
                            vTexto     := vTexto|| c.fecha_solicitud;
                            vTexto     := vTexto|| '</td></tr><tr><td ><b>Ultimo Proceso Corrido:</b></td><td> Asiento_Reclasificacion_Pr_Sec';
                            vTexto     := vTexto|| '</td></tr><tr><td><b>C√≥digo Del Producto:</b></td><td>';
                            vTexto     := vTexto|| d.no_credito;
                            vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo Agencia:</b></td><td>';
                            vTexto     := vTexto|| d.CODIGO_AGENCIA;
                            vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo cliente:</b></td><td>';
                            vTexto     := vTexto|| c.cod_cliente;                                       
                            vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo Sector Contable actual:</b></td><td>';
                            vTexto     := vTexto|| c.COD_SEC_CONTABLE_ACTUAL;                                       
                            vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo Sector Contable Nuevo:</b></td><td>';
                            vTexto     := vTexto|| c.COD_SEC_CONTABLE_NUEVO;                                       
                            vTexto     := vTexto|| '</td></tr></table>';
                            
                            pa.send_mail_html(vIPCorreo, vSender, vEmail, vSubject, vTexto);
                    End If;                                                                                                                                    
                    --Fin.
                END IF;
                
                if VMensajeErr is null then
                    vMensaj := 'Error en Cuadre Asiento pr';
                    CG.CG_UTL.Cuadre_Asiento(variables.Codempresa,
                                             vFecha,
                                             VNUMERO_ASIENTO,
                                             VMontoDife,
                                             VMensajeErr);
                                             
                   if ( vMensajeErr is not null ) then
                      
                      vSistema    := Variables.codsistema;--'PA'
                      vErr        := '000688';
                      vMens       := ' Mensaje Error en Cuadre Asiento Pr: '||VNUMERO_ASIENTO||' Monto Difiere: '||VMontoDife||' Error '||VMensajeErr;
                      
                        --ENF 15/10/2014    :    se modifico para agregar el envio de correo para los errores. 
                        --raise BCG_INTERFACE;
                        message(c.cod_cliente||SQLCODE||vMensajeErr||' Cuadre_Asiento_Pr'); Message('');
                        Utilitarios.Mensaje(vErr, variables.codidioma, vSistema,Acknowledge,vMens);
                        pa.genera_msg_error(pcodmsg        =>vErr,
                                            pmsgerror      =>'Error Cuadre Asiento Pr Mensual',
                                            pproceso       =>vSistema||' Cuadre Asiento Pr',
                                            pusuario       =>user,
                                            pmsgerrorora   => 'SQLERRM: '||SQLERRM ||chr(13)||'Fecha de Corrida: '||vFecha||chr(13)||'Fecha de Solcitiud:'||c.fecha_solicitud
                                                                                                    ||chr(13)||'Ultimo Proceso Corrido: Cuadre_Asiento_Pr'||chr(13)
                                                                                          ||'C√≥digo Del Producto: '||d.no_credito||chr(13)||'C√≥digo Agencia: '||d.CODIGO_AGENCIA
                                                                                          ||chr(13)||'C√≥digo cliente: '||c.cod_cliente||chr(13)
                                                                                          ||'C√≥digo Sector Contable actual: '||c.COD_SEC_CONTABLE_ACTUAL||chr(13)
                                                                                                    ||'C√≥digo Sector Contable Nuevo: '||c.COD_SEC_CONTABLE_NUEVO,
                                          pNotifica      =>'S'
                                          ); 
                            
                            vSubject  := 'Error realizando Cambio de Sector Contable';
                                                            
                            vTexto  := '<style type="text/css">table {border-collapse: collapse;} td, th {border: 1px solid black;padding: 3px;}</style>';
                            vTexto     := vTexto|| '<h3>Error Cuadre Asiento pr Mensual</h3>';
                            vTexto     := vTexto|| '<br><table>';
                            vTexto     := vTexto|| '<tr><td width=200><b>SQLERRM:</b></td><td>';
                            vTexto     := vTexto|| SQLERRM;
                            vTexto     := vTexto|| '<tr><td width=200><b>Fecha de Corrida:</b></td><td>';
                            vTexto     := vTexto|| vFecha;
                            vTexto     := vTexto|| '<tr><td><b>Fecha de Solcitiud:</b></td><td>';
                            vTexto     := vTexto|| c.fecha_solicitud;
                            vTexto     := vTexto|| '</td></tr><tr><td ><b>Ultimo Proceso Corrido:</b></td><td> Cuadre_Asiento_Pr';
                            vTexto     := vTexto|| '</td></tr><tr><td><b>C√≥digo Del Producto:</b></td><td>';
                            vTexto     := vTexto|| d.no_credito;
                            vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo Agencia:</b></td><td>';
                            vTexto     := vTexto|| d.CODIGO_AGENCIA;
                            vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo cliente:</b></td><td>';
                            vTexto     := vTexto|| c.cod_cliente;                                       
                            vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo Sector Contable actual:</b></td><td>';
                            vTexto     := vTexto|| c.COD_SEC_CONTABLE_ACTUAL;                                       
                            vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo Sector Contable Nuevo:</b></td><td>';
                            vTexto     := vTexto|| c.COD_SEC_CONTABLE_NUEVO;                                       
                            vTexto     := vTexto|| '</td></tr></table>';
                            
                            pa.send_mail_html(vIPCorreo, vSender, vEmail, vSubject, vTexto);
                            --Fin.
                   Else
                        control.mensaje := 'No. Asiento PR: '||VNUMERO_ASIENTO;                    
                            
                          if vNumero_AsientoI is null then -- Guardar el primero n√∫mero de asiento
                                vNumero_AsientoI := VNUMERO_ASIENTO;
                          end if;--guardar numero de asiento.
                   End if;--mensaje de error de la variable de error procedente del cuadre de asiento.
                   
                End If;--mensaje de error de cuadre de asiento.
                
            End Loop;  -- pr
            
            Vsequim := '9';
            vMensaj := 'Error despues del asiento de reclasificacion para PR ';
          
           --ENF 15/10/2014    :    se modifico para agregar el envio de correo para los errores. 
            if VMENSAJE_ERROR is null or VMensajeErr is null then  
              --Busco los productos del cliente en CDs
                For e in Certificado(c.cod_cliente) Loop --busco Certificados    
                  
                    control.mensaje := 'Reclasificando Asientos de Certificados para el cliente '||c.cod_cliente;              
                    
                    vAplic := 'BCD';
                    vTipoTrans := 25;
                    
                    if e.monto_cd > 0 then
                        
                        Begin
                                 
                            Vsequim := '9.1';
                            vMensaj := 'Error de la caratula del asiento cd ';                     
                            CG.CG_UTL.Caratula_Del_Asiento(Variables.CODEMPRESA,
                                                           Variables.CodAgencia, --Agencia de Conexion del usuario
                                                           vAplic,
                                                           e.cod_producto,
                                                           vTipoTrans,
                                                           vSubTransCambio,
                                                           vNumTransa,
                                                           VDESCRIPCION,
                                                           vFecha,
                                                           vFecha,
                                                           VNUMERO_ASIENTO,
                                                           Variables.Usuario,
                                                           VMENSAJE_ERROR);
                                    
                            Vsequim := '9.2';
                            
                            if VMENSAJE_ERROR is not null then
                              --ENF 15/10/2014    :    se modifico para agregar el envio de correo para los errores. 
                              --message('Caratula Asiento CD'||VMENSAJE_ERROR||'-'||VNUMERO_ASIENTO); Message('');    
                                vSistema         :=  Variables.codsistema;--'PA'
                                vErr             := '000688';
                                vMens            := 'Caratula Asiento CD '||VMENSAJE_ERROR||'-'||VNUMERO_ASIENTO;                          
                                message(c.cod_cliente||SQLCODE||vMensajeErr||' Caratula_Del_Asiento_CD'); Message('');
                                
                                Utilitarios.Mensaje(vErr, variables.codidioma, vSistema,Acknowledge,vMens);
                                --ENF 15/10/2014    :    se modifico para agregar el envio de correo para los errores. 
                                --raise BCG_INTERFACE; 
                                pa.genera_msg_error(pcodmsg        =>vErr,
                                                    pmsgerror      =>'Error Caratula del asiento cd Mensual',
                                                    pproceso       =>vSistema||' caratula del asiento cd',
                                                    pusuario       =>user,
                                                    pmsgerrorora   => 'SQLERRM: '||SQLERRM ||chr(13)||'Fecha de Corrida: '||vFecha||chr(13)||'Fecha de Solcitiud:'||c.fecha_solicitud
                                                    ||chr(13)||'Ultimo Proceso Corrido: Caratula_Del_Asiento_CD'||chr(13)
                                                    ||'C√≥digo Del Producto: '||e.num_certificado||chr(13)||'C√≥digo Agencia: '||e.COD_AGENCIA
                                                    ||chr(13)||'C√≥digo cliente: '||c.cod_cliente||chr(13)
                                                    ||'C√≥digo Sector Contable actual: '||c.COD_SEC_CONTABLE_ACTUAL||chr(13)
                                                    ||'C√≥digo Sector Contable Nuevo: '||c.COD_SEC_CONTABLE_NUEVO,
                                                  pNotifica      =>'N'
                                                  ); 
                                
                                    vSubject  := 'Error realizando Cambio de Sector Contable';
                                                                
                                    vTexto  := '<style type="text/css">table {border-collapse: collapse;} td, th {border: 1px solid black;padding: 3px;}</style>';
                                    vTexto     := vTexto|| '<h3>Error Caratula Del Asiento CD Mensual</h3>';
                                    vTexto     := vTexto|| '<br><table>';
                                    vTexto     := vTexto|| '<tr><td width=200><b>SQLERRM:</b></td><td>';
                                    vTexto     := vTexto|| SQLERRM;
                                    vTexto     := vTexto|| '<tr><td width=200><b>Fecha de Corrida:</b></td><td>';
                                    vTexto     := vTexto|| vFecha;
                                    vTexto     := vTexto|| '<tr><td><b>Fecha de Solcitiud:</b></td><td>';
                                    vTexto     := vTexto|| c.fecha_solicitud;
                                    vTexto     := vTexto|| '</td></tr><tr><td ><b>Ultimo Proceso Corrido:</b></td><td> Caratula_Del_Asiento_CD';
                                    vTexto     := vTexto|| '</td></tr><tr><td><b>C√≥digo Del Producto:</b></td><td>';
                                    vTexto     := vTexto|| e.num_certificado;
                                    vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo Agencia:</b></td><td>';
                                    vTexto     := vTexto|| e.COD_AGENCIA;
                                    vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo cliente:</b></td><td>';
                                    vTexto     := vTexto|| c.cod_cliente;                                       
                                    vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo Sector Contable actual:</b></td><td>';
                                    vTexto     := vTexto|| c.COD_SEC_CONTABLE_ACTUAL;                                       
                                    vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo Sector Contable Nuevo:</b></td><td>';
                                    vTexto     := vTexto|| c.COD_SEC_CONTABLE_NUEVO;                                       
                                    vTexto     := vTexto|| '</td></tr></table>';
                                    
                                    pa.send_mail_html(vIPCorreo, vSender, vEmail, vSubject, vTexto);
                            End if;            
                            --Fin.
                        end;
                        
                        --ENF 15/10/2014    :    se modifico para agregar el envio de correo para los errores. 
                        if VMENSAJE_ERROR is null then
                              Vsequim := '9.3';
                              vMensaj := 'Error de la Asiento Reclasificacion CD ';
                          
                                Asiento_Reclasificacion_CD_Sec (Variables.CODEMPRESA,
                                                                  Variables.CodAgencia,
                                                                  e.COD_CARTERA,
                                                                  e.Tip_Certificado,
                                                                  e.cod_retencion,
                                                                  e.estado,
                                                                  VNUMERO_ASIENTO,
                                                                  e.cuenta_contable,
                                                                  e.num_certificado,
                                                                  vAplic,
                                                                  vSubAplic,
                                                                  vTipoTrans,
                                                                  vSubTransCambio,
                                                                  vNumTransa,
                                                                  vdescripcion,
                                                                  vFecha,
                                                                  c.cod_cliente,
                                                                  e.COD_AGENCIA,
                                                                  c.COD_SEC_CONTABLE_ACTUAL,
                                                                  c.COD_SEC_CONTABLE_NUEVO,
                                                                  e.monto_cd,
                                                                  E.MON_INT_X_PAGAR,
                                                                  e.Pla_Dias            ,
                                                                  e.Clasificacion    ,
                                                                  e.Cod_Moneda        ,                                                                                    
                                                                  v_tc1,
                                                                  v_tc2,
                                                                  VMensajeErr
                                                                  );
                                            
                            If VMensajeErr is not null then
                                    --ENF 15/10/2014    :    se modifico para agregar el envio de correo para los errores. 
                                    --Raise Bcd_Interface;                              
                                    vSistema                :=  Variables.codsistema;--'PA'
                                    vErr                    := '000688';
                                    vMens                   := 'Asiento Reclasificacion CD '||VMensajeErr||'-'||VNUMERO_ASIENTO;             
                                    --ENF 15/10/2014    :    se modifico para agregar el envio de correo para los errores. 
                                    message(c.cod_cliente||SQLCODE||vMensajeErr||' Asiento_Reclasificacion_CD_Sec'); Message('');
                                    Utilitarios.Mensaje(vErr, variables.codidioma, vSistema,Acknowledge,vMens);
                                    
                                    pa.genera_msg_error(pcodmsg        =>vErr,
                                                        pmsgerror      =>'Error Asiento Reclasificacion CD Mensual',
                                                        pproceso       =>vSistema||' Asiento Reclasificacion CD',
                                                        pusuario       =>user,
                                                        pmsgerrorora   => 'SQLERRM: '||SQLERRM ||CHR( 13 ) || CHR( 10 )||
                                                                                                                'Fecha de Corrida: '||vFecha||CHR( 13 ) || CHR( 10 )||
                                                                                                                'Fecha de Solcitiud:'||c.fecha_solicitud||CHR( 13 ) || CHR( 10 )||
                                                                                                                'Ultimo Proceso Corrido: Asiento_Reclasificacion_CD_Sec'||CHR( 13 ) || CHR( 10 )||
                                                                                                                'C√≥digo Del Producto: '||e.num_certificado||CHR( 13 ) || CHR( 10 )||
                                                                                                                'C√≥digo Agencia: '||e.COD_AGENCIA||CHR( 13 ) || CHR( 10 )||
                                                                                                                'C√≥digo cliente: '||c.cod_cliente||CHR( 13 ) || CHR( 10 )||
                                                                                                                'C√≥digo Sector Contable actual: '||c.COD_SEC_CONTABLE_ACTUAL||CHR( 13 ) || CHR( 10 )||
                                                                                                                'C√≥digo Sector Contable Nuevo: '||c.COD_SEC_CONTABLE_NUEVO||CHR( 13 ) || CHR( 10 ),
                                                          pNotifica      =>'N'
                                                          ); 
                                                          
                                    vSubject  := 'Error realizando Cambio de Sector Contable';
                                                                
                                    vTexto  := '<style type="text/css">table {border-collapse: collapse;} td, th {border: 1px solid black;padding: 3px;}</style>';
                                    vTexto     := vTexto|| '<h3>Error Asiento Reclasificacion CD Mensual</h3>';
                                    vTexto     := vTexto|| '<br><table>';
                                    vTexto     := vTexto|| '<tr><td width=200><b>SQLERRM:</b></td><td>';
                                    vTexto     := vTexto|| SQLERRM;
                                    vTexto     := vTexto|| '<tr><td width=200><b>Fecha de Corrida:</b></td><td>';
                                    vTexto     := vTexto|| vFecha;
                                    vTexto     := vTexto|| '<tr><td><b>Fecha de Solcitiud:</b></td><td>';
                                    vTexto     := vTexto|| c.fecha_solicitud;
                                    vTexto     := vTexto|| '</td></tr><tr><td ><b>Ultimo Proceso Corrido:</b></td><td> Asiento_Reclasificacion_CD_Sec';
                                    vTexto     := vTexto|| '</td></tr><tr><td><b>C√≥digo Del Producto:</b></td><td>';
                                    vTexto     := vTexto|| e.num_certificado;
                                    vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo Agencia:</b></td><td>';
                                    vTexto     := vTexto|| e.COD_AGENCIA;
                                    vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo cliente:</b></td><td>';
                                    vTexto     := vTexto|| c.cod_cliente;                                       
                                    vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo Sector Contable actual:</b></td><td>';
                                    vTexto     := vTexto|| c.COD_SEC_CONTABLE_ACTUAL;                                       
                                    vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo Sector Contable Nuevo:</b></td><td>';
                                    vTexto     := vTexto|| c.COD_SEC_CONTABLE_NUEVO;                                       
                                    vTexto     := vTexto|| '</td></tr></table>';
                                    
                                    pa.send_mail_html(vIPCorreo, vSender, vEmail, vSubject, vTexto);
                                    
                            End If;
                            --Fin.
                        End If;
                        
                        --ENF 15/10/2014    :    se modifico para agregar el envio de correo para los errores. 
                        if VMensajeErr is null then
                              Vsequim := '9.4';
                              vMensaj := 'Error de la Cuadre Asiento cd ';                     
                          
                                CG.CG_UTL.Cuadre_Asiento(variables.Codempresa,
                                                         vFecha,
                                                         VNUMERO_ASIENTO,
                                                         VMontoDife,
                                                         VMensajeErr);
                                                         
                          if ( vMensajeErr is not null ) then
                                vSistema      := Variables.codsistema;--'PA'
                                vErr          := '000688';
                                vMens         := ' Mensaje Error en Cuadre Asiento: '||VNUMERO_ASIENTO||' Monto Difiere: '||VMontoDife||' Error '||VMensajeErr;
                              --ENF 15/10/2014    :    se modifico para agregar el envio de correo para los errores. 
                                message(c.cod_cliente||SQLCODE||vMensajeErr||' Cuadre_Asiento_CD'); Message('');
                                Utilitarios.Mensaje(vErr, variables.codidioma, vSistema,Acknowledge,vMens);
                            --raise BCG_INTERFACE;
                                
                                pa.genera_msg_error(pcodmsg        =>vErr,
                                                    pmsgerror      =>'Error Cuadre Asiento CD Mensual',
                                                    pproceso       =>vSistema||' Cuadre Asiento CD',
                                                    pusuario       =>user,
                                                    pmsgerrorora   => 'SQLERRM: '||SQLERRM ||chr(13)||'Fecha de Corrida: '||vFecha||chr(13)||'Fecha de Solcitiud:'||c.fecha_solicitud
                                                                                                        ||chr(13)||'Ultimo Proceso Corrido: Cuadre_Asiento_CD'||chr(13)
                                                                                              ||'C√≥digo Del Producto: '||e.num_certificado||chr(13)||'C√≥digo Agencia: '||e.COD_AGENCIA
                                                                                              ||chr(13)||'C√≥digo cliente: '||c.cod_cliente||chr(13)
                                                                                              ||'C√≥digo Sector Contable actual: '||c.COD_SEC_CONTABLE_ACTUAL||chr(13)
                                                                                                        ||'C√≥digo Sector Contable Nuevo: '||c.COD_SEC_CONTABLE_NUEVO,
                                                      pNotifica      =>'N'
                                                      ); 
                              
                                vSubject  := 'Error realizando Cambio de Sector Contable';
                                                            
                                vTexto  := '<style type="text/css">table {border-collapse: collapse;} td, th {border: 1px solid black;padding: 3px;}</style>';
                                vTexto     := vTexto|| '<h3>Error Cuadre Asiento CD Mensual Mensual</h3>';
                                vTexto     := vTexto|| '<br><table>';
                                vTexto     := vTexto|| '<tr><td width=200><b>SQLERRM:</b></td><td>';
                                vTexto     := vTexto|| SQLERRM;
                                vTexto     := vTexto|| '<tr><td width=200><b>Fecha de Corrida:</b></td><td>';
                                vTexto     := vTexto|| vFecha;
                                vTexto     := vTexto|| '<tr><td><b>Fecha de Solcitiud:</b></td><td>';
                                vTexto     := vTexto|| c.fecha_solicitud;
                                vTexto     := vTexto|| '</td></tr><tr><td ><b>Ultimo Proceso Corrido:</b></td><td> Cuadre_Asiento_CD';
                                vTexto     := vTexto|| '</td></tr><tr><td><b>C√≥digo Del Producto:</b></td><td>';
                                vTexto     := vTexto|| e.num_certificado;
                                vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo Agencia:</b></td><td>';
                                vTexto     := vTexto|| e.COD_AGENCIA;
                                vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo cliente:</b></td><td>';
                                vTexto     := vTexto|| c.cod_cliente;                                       
                                vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo Sector Contable actual:</b></td><td>';
                                vTexto     := vTexto|| c.COD_SEC_CONTABLE_ACTUAL;                                       
                                vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo Sector Contable Nuevo:</b></td><td>';
                                vTexto     := vTexto|| c.COD_SEC_CONTABLE_NUEVO;                                       
                                vTexto     := vTexto|| '</td></tr></table>';
                                
                                pa.send_mail_html(vIPCorreo, vSender, vEmail, vSubject, vTexto);
                                  --fin.
                          Else
                            
                              control.mensaje := 'No. Asiento CD: '||VNUMERO_ASIENTO;                    
                                  
                              if vNumero_AsientoI is null then -- Guardar el primero n√∫mero de asiento
                                    vNumero_AsientoI := VNUMERO_ASIENTO;
                              end if;--if guardar el primero numero asiento
                              
                          End if;--if variable mensaje error es no nulo.
                          
                        End If;--if de mensaje error de cuadre asiento.
                        
                    End if; -- e.monto_cd
                    
                End Loop;     -- codproducto
                
            End If;--Mensaje error el principal del loop de CD.             
             
            Vsequim := '10';
            vMensaj := 'Error despues del asiento de reclasificacion para CD ';
            
            --ENF 15/10/2014    :    se modifico para agregar el envio de correo para los errores. 
            If VMensajeErr is null or VMENSAJE_ERROR is null then
                --Busco los productos del cliente en CC
                For f in Cefectivo(c.cod_cliente) Loop --busco las cuentas de efectivo del cliente
                        
                    control.mensaje := 'Reclasificando Asientos de Cuentas de Efectivo para el cliente '||c.cod_cliente;
                                        
                    vAplic := 'BCC';
                    vTipoTrans := 104;
                    
                   --if abs(f.SALDO_CONTABILIZADO) > 0 then
                    if abs(f.SALDO_CONTABILIZADO) > 0 or f.SAL_EMBARGADO > 0 then  -- API 12112021: Reclasificacion de embargos
                        Begin
                                 
                            Vsequim := '10.1';
                            vMensaj := 'Error de la caratula del asiento CC';                     
                            
                            CG.CG_UTL.Caratula_Del_Asiento(Variables.CODEMPRESA,
                                                             Variables.CodAgencia, --Agencia de Conexion del usuario
                                                             vAplic,
                                                             f.cod_producto,
                                                             vTipoTrans,
                                                             vSubTransCambio,
                                                             vNumTransa,
                                                             VDESCRIPCION,
                                                             vFecha,
                                                             vFecha,
                                                             VNUMERO_ASIENTO,
                                                             Variables.Usuario,
                                                             VMENSAJE_ERROR);
                                    
                            Vsequim := '10.2';
                            if VMENSAJE_ERROR is not null then
                              --ENF 15/10/2014    :    se modifico para agregar el envio de correo para los errores. 
                              --message('Caratula Asiento CC'||VMENSAJE_ERROR||'-'||VNUMERO_ASIENTO); Message('');    
                                vSistema          := Variables.codsistema;--'PA'
                                vErr              := '000688';
                                vMens             := 'Caratula Asiento CC'||VMENSAJE_ERROR||'-'||VNUMERO_ASIENTO;
                                --ENF 15/10/2014    :    se modifico para agregar el envio de correo para los errores. 
                                message(c.cod_cliente||SQLCODE||vMensajeErr||' Caratula_Del_Asiento_CC'); Message('');
                                Utilitarios.Mensaje(vErr, variables.codidioma, vSistema,Acknowledge,vMens);
                              --raise BCG_INTERFACE;
                                pa.genera_msg_error(pcodmsg        =>vErr,
                                                    pmsgerror      =>'Error Caratula Asiento CC Mensual',
                                                    pproceso       =>vSistema||' Caratula Asiento CC',
                                                    pusuario       =>user,
                                                    pmsgerrorora   => 'SQLERRM: '||SQLERRM ||chr(13)||'Fecha de Corrida: '||vFecha||chr(13)||'Fecha de Solcitiud:'||c.fecha_solicitud
                                                                                                        ||chr(13)||'Ultimo Proceso Corrido: Caratula_Del_Asiento_CC'||chr(13)
                                                                                              ||'C√≥digo Del Producto: '||f.num_cuenta||chr(13)||'C√≥digo Agencia: '||f.COD_AGENCIA
                                                                                              ||chr(13)||'C√≥digo cliente: '||c.cod_cliente||chr(13)
                                                                                              ||'C√≥digo Sector Contable actual: '||c.COD_SEC_CONTABLE_ACTUAL||chr(13)
                                                                                                        ||'C√≥digo Sector Contable Nuevo: '||c.COD_SEC_CONTABLE_NUEVO,
                                                      pNotifica      =>'N'
                                                      ); 
                                    vSubject  := 'Error realizando Cambio de Sector Contable';
                                                            
                                    vTexto  := '<style type="text/css">table {border-collapse: collapse;} td, th {border: 1px solid black;padding: 3px;}</style>';
                                    vTexto     := vTexto|| '<h3>Error Caratula Del Asiento CC Mensual</h3>';
                                    vTexto     := vTexto|| '<br><table>';
                                    vTexto     := vTexto|| '<tr><td width=200><b>SQLERRM:</b></td><td>';
                                    vTexto     := vTexto|| SQLERRM;
                                    vTexto     := vTexto|| '<tr><td width=200><b>Fecha de Corrida:</b></td><td>';
                                    vTexto     := vTexto|| vFecha;
                                    vTexto     := vTexto|| '<tr><td><b>Fecha de Solcitiud:</b></td><td>';
                                    vTexto     := vTexto|| c.fecha_solicitud;
                                    vTexto     := vTexto|| '</td></tr><tr><td ><b>Ultimo Proceso Corrido:</b></td><td> Caratula_Del_Asiento_CC';
                                    vTexto     := vTexto|| '</td></tr><tr><td><b>C√≥digo Del Producto:</b></td><td>';
                                    vTexto     := vTexto|| f.num_cuenta;
                                    vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo Agencia:</b></td><td>';
                                    vTexto     := vTexto|| f.COD_AGENCIA;
                                    vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo cliente:</b></td><td>';
                                    vTexto     := vTexto|| c.cod_cliente;                                       
                                    vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo Sector Contable actual:</b></td><td>';
                                    vTexto     := vTexto|| c.COD_SEC_CONTABLE_ACTUAL;                                       
                                    vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo Sector Contable Nuevo:</b></td><td>';
                                    vTexto     := vTexto|| c.COD_SEC_CONTABLE_NUEVO;                                       
                                    vTexto     := vTexto|| '</td></tr></table>';
                                    
                                    pa.send_mail_html(vIPCorreo, vSender, vEmail, vSubject, vTexto);
                                --Fin.
                            End if;            
                        
                        end;
                        
                        --ENF 15/10/2014    :    se modifico para agregar el envio de correo para los errores. 
                        If VMENSAJE_ERROR is null then
                            Vsequim := '10.2';
                            vMensaj := 'Error de la Asiento Reclasificacion CC ';
                            
                            Asiento_Reclasificacion_CC_Sec(Variables.CODEMPRESA,
                                                          Variables.CodAgencia,
                                                          f.cod_producto,
                                                          f.IND_ESTADO,
                                                          VNUMERO_ASIENTO,
                                                          f.num_cuenta,
                                                          vAplic,
                                                          vSubAplic,
                                                          vTipoTrans,
                                                          vSubTransCambio,
                                                          vNumTransa,
                                                          vdescripcion,
                                                          vFecha,
                                                          c.cod_cliente,
                                                          f.COD_AGENCIA,
                                                          c.COD_SEC_CONTABLE_ACTUAL,
                                                          c.COD_SEC_CONTABLE_NUEVO,
                                                          f.SALDO_CONTABILIZADO,
                                                          f.INT_POR_PAGAR,
                                                          F.SOBREG_MENOS_48H,
                                                          F.SOBREG_MAS48H,
                                                          v_tc1,
                                                          v_tc2,
                                                          vMensajeErr
                                                          );
                                                                                ---ENF
                            If  vMensajeErr is not null Then
                                vSistema      := Variables.codsistema;--'PA'
                                vErr          := '000688';
                                vMens         := ' Error de la Asiento Reclasificacion CC '||vMensajeErr;
                                --ENF 15/10/2014    :    se modifico para agregar el envio de correo para los errores. 
                                --Raise Bcc_Interface;
                                message(c.cod_cliente||SQLCODE||vMensajeErr||' Asiento_Reclasificacion_CC_Sec'); Message('');
                                Utilitarios.Mensaje(vErr, variables.codidioma, vSistema,Acknowledge,vMens);
                                pa.genera_msg_error(pcodmsg        =>vErr,
                                                    pmsgerror      =>'Error Asiento Reclasificacion CC Mensual',
                                                    pproceso       =>vSistema||' Asiento Reclasificacion CC',
                                                    pusuario       =>user,
                                                    pmsgerrorora   => 'SQLERRM: '||SQLERRM ||chr(13)||'Fecha de Corrida: '||vFecha||chr(13)||'Fecha de Solcitiud:'||c.fecha_solicitud
                                                                                                        ||chr(13)||'Ultimo Proceso Corrido: Asiento_Reclasificacion_CC_Sec'||chr(13)
                                                                                              ||'C√≥digo Del Producto: '||f.num_cuenta||chr(13)||'C√≥digo Agencia: '||f.COD_AGENCIA
                                                                                              ||chr(13)||'C√≥digo cliente: '||c.cod_cliente||chr(13)
                                                                                              ||'C√≥digo Sector Contable actual: '||c.COD_SEC_CONTABLE_ACTUAL||chr(13)
                                                                                                        ||'C√≥digo Sector Contable Nuevo: '||c.COD_SEC_CONTABLE_NUEVO,
                                                      pNotifica      =>'N'
                                                      ); 
                                    vSubject  := 'Error realizando Cambio de Sector Contable';
                                                            
                                    vTexto  := '<style type="text/css">table {border-collapse: collapse;} td, th {border: 1px solid black;padding: 3px;}</style>';
                                    vTexto     := vTexto|| '<h3>Error Asiento Reclasificacion CC Mensual</h3>';
                                    vTexto     := vTexto|| '<br><table>';
                                    vTexto     := vTexto|| '<tr><td width=200><b>SQLERRM:</b></td><td>';
                                    vTexto     := vTexto|| SQLERRM;
                                    vTexto     := vTexto|| '<tr><td width=200><b>Fecha de Corrida:</b></td><td>';
                                    vTexto     := vTexto|| vFecha;
                                    vTexto     := vTexto|| '<tr><td><b>Fecha de Solcitiud:</b></td><td>';
                                    vTexto     := vTexto|| c.fecha_solicitud;
                                    vTexto     := vTexto|| '</td></tr><tr><td ><b>Ultimo Proceso Corrido:</b></td><td> Asiento_Reclasificacion_CC_Sec';
                                    vTexto     := vTexto|| '</td></tr><tr><td><b>C√≥digo Del Producto:</b></td><td>';
                                    vTexto     := vTexto|| f.num_cuenta;
                                    vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo Agencia:</b></td><td>';
                                    vTexto     := vTexto|| f.COD_AGENCIA;
                                    vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo cliente:</b></td><td>';
                                    vTexto     := vTexto|| c.cod_cliente;                                       
                                    vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo Sector Contable actual:</b></td><td>';
                                    vTexto     := vTexto|| c.COD_SEC_CONTABLE_ACTUAL;                                       
                                    vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo Sector Contable Nuevo:</b></td><td>';
                                    vTexto     := vTexto|| c.COD_SEC_CONTABLE_NUEVO;                                       
                                    vTexto     := vTexto|| '</td></tr></table>';
                                    
                                    pa.send_mail_html(vIPCorreo, vSender, vEmail, vSubject, vTexto);
                                --Fin.
                            End If;
                        End If;
                        
                        --ENF 15/10/2014    :    se modifico para agregar el envio de correo para los errores. 
                        If VMensajeErr is null then
                          vMensaj := 'Error de la Cuadre Asiento CC ';
                          CG.CG_UTL.Cuadre_Asiento(variables.Codempresa,
                                                 vFecha,
                                                 VNUMERO_ASIENTO,
                                                 VMontoDife,
                                                 VMensajeErr);
                           if ( vMensajeErr is not null ) then
                                vSistema     := Variables.codsistema;--'PA'
                                vErr         := '000688';
                                vMens        := ' Mensaje Error en Cuadre Asiento: '||VNUMERO_ASIENTO||' Monto Difiere: '||VMontoDife||' Error '||VMensajeErr;
                                
                                message(c.cod_cliente||SQLCODE||vMensajeErr||' Cuadre_Asiento_CC'); Message('');
                                Utilitarios.Mensaje(vErr, variables.codidioma, vSistema,Acknowledge,vMens);
                            
                                --raise BCG_INTERFACE;                            
                                pa.genera_msg_error(pcodmsg        =>vErr,
                                                    pmsgerror      =>'Error Cuadre Asiento CC Mensual',
                                                    pproceso       =>vSistema||' Cuadre Asiento CC',
                                                    pusuario       =>user,
                                                    pmsgerrorora   => 'SQLERRM: '||SQLERRM ||chr(13)||'Fecha de Corrida: '||vFecha||chr(13)||'Fecha de Solcitiud:'||c.fecha_solicitud
                                                                                                        ||chr(13)||'Ultimo Proceso Corrido: Cuadre_Asiento_CC'||chr(13)
                                                                                              ||'C√≥digo Del Producto: '||f.num_cuenta||chr(13)||'C√≥digo Agencia: '||f.COD_AGENCIA
                                                                                              ||chr(13)||'C√≥digo cliente: '||c.cod_cliente||chr(13)
                                                                                              ||'C√≥digo Sector Contable actual: '||c.COD_SEC_CONTABLE_ACTUAL||chr(13)
                                                                                                        ||'C√≥digo Sector Contable Nuevo: '||c.COD_SEC_CONTABLE_NUEVO,
                                                      pNotifica      =>'N'
                                                      ); 
                                  vSubject  := 'Error realizando Cambio de Sector Contable';
                                                        
                                vTexto  := '<style type="text/css">table {border-collapse: collapse;} td, th {border: 1px solid black;padding: 3px;}</style>';
                                vTexto     := vTexto|| '<h3>Error Cuadre_Asiento CC Mensual</h3>';
                                vTexto     := vTexto|| '<br><table>';
                                vTexto     := vTexto|| '<tr><td width=200><b>SQLERRM:</b></td><td>';
                                vTexto     := vTexto|| SQLERRM;
                                vTexto     := vTexto|| '<tr><td width=200><b>Fecha de Corrida:</b></td><td>';
                                vTexto     := vTexto|| vFecha;
                                vTexto     := vTexto|| '<tr><td><b>Fecha de Solcitiud:</b></td><td>';
                                vTexto     := vTexto|| c.fecha_solicitud;
                                vTexto     := vTexto|| '</td></tr><tr><td ><b>Ultimo Proceso Corrido:</b></td><td> Cuadre_Asiento_CC';
                                vTexto     := vTexto|| '</td></tr><tr><td><b>C√≥digo Del Producto:</b></td><td>';
                                vTexto     := vTexto|| f.num_cuenta;
                                vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo Agencia:</b></td><td>';
                                vTexto     := vTexto|| f.COD_AGENCIA;
                                vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo cliente:</b></td><td>';
                                vTexto     := vTexto|| c.cod_cliente;                                       
                                vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo Sector Contable actual:</b></td><td>';
                                vTexto     := vTexto|| c.COD_SEC_CONTABLE_ACTUAL;                                       
                                vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo Sector Contable Nuevo:</b></td><td>';
                                vTexto     := vTexto|| c.COD_SEC_CONTABLE_NUEVO;                                       
                                vTexto     := vTexto|| '</td></tr></table>';
                                    
                                    pa.send_mail_html(vIPCorreo, vSender, vEmail, vSubject, vTexto);
                                   --Fin.
                           Else
                                control.mensaje := 'No. Asiento CC: '||VNUMERO_ASIENTO;                    
                                    
                                  if vNumero_AsientoI is null then -- Guardar el primero n√∫mero de asiento
                                        vNumero_AsientoI := VNUMERO_ASIENTO;
                                  end if;--if de guardar numero de asiento.
                                  
                           End if;--if de variable mensaje del prcoedimiento actual.
                           
                        End If;--variable mensaje de error del procedimiento anterior.
                        
                    End if; -- saldo_contabilizado
                                                                                    
                End Loop; -- cc
                
            End If;--if de mensajes de error.
             
            Vsequim := '11';
            vMensaj := 'Error despues del asiento de reclasificacion para CC ';

            -- INCREMENTA EL CONTADOR
            vcantidadprocesada := vcantidadprocesada + 1;
            -- ACTUALIZA BARRA    
             --SET_ITEM_PROPERTY('ETIQUETAS.ET_GAUGE',WIDTH,(656*(((VCANTIDADPROCESADA*100)/VCANTIDADTOTAL)/100)));
            --:ETIQUETAS.ET_AVANCE := TO_CHAR(ROUND(((VCANTIDADPROCESADA*100)/VCANTIDADTOTAL)))||'%'; 
        
            Vsequim := '12';
            
            If VMensajeErr is null or VMENSAJE_ERROR is null then
                
                control.mensaje := 'Pasando a hist√≥ricos las solicitud de cambio procesada '||c.cod_cliente;
                Vsequim := '12.1';
                
              Begin
                  insert into pa.solicitud_cambio_sector_hist
                  select *
                      from pa.solicitud_cambio_sector
                  where trunc(fecha_solicitud) <= vFecha
                      and cod_cliente = c.cod_cliente;
              Exception 
                  When Others then 
                        control.mensaje     := 'Error en Cierre Reasignacion de cliente a sector contable, Pasando a Hist√≥rico de Solicitudes '||SQLERRM;
                        vSistema            :=  Variables.codsistema;--'PA'
                        vErr                := '000688';
                        vMens               := 'en Cierre Reasignacion de cliente a sector contable, Pasando a Hist√≥rico de Solicitudes '|| SQLERRM;
                        v_Mensaje           := control.mensaje;        
                        --ENF 15/10/2014    :    se modifico para agregar el envio de correo para los errores. 
                        message(c.cod_cliente||SQLCODE||vMensajeErr||' Historico'); Message('');
                        Utilitarios.Mensaje(vErr, variables.codidioma, vSistema,Acknowledge,vMens);
                        --Raise Bpa_Exception;
                        pa.genera_msg_error(pcodmsg        =>vErr,
                                            pmsgerror      =>'Error en el Historico Mensual',
                                            pproceso       =>vSistema||' Historico',
                                            pusuario       =>user,
                                            pmsgerrorora   => 'SQLERRM: '||SQLERRM ||chr(13)||'Fecha de Corrida: '||vFecha||chr(13)||'Fecha de Solcitiud:'||c.fecha_solicitud
                                                                                                ||chr(13)||'Ultimo Proceso Corrido: Historico'||chr(13)
                                                                                          ||'C√≥digo Del Producto: '||chr(13)||'C√≥digo Agencia: '
                                                                                          ||chr(13)||'C√≥digo cliente: '||c.cod_cliente||chr(13)
                                                                                          ||'C√≥digo Sector Contable actual: '||c.COD_SEC_CONTABLE_ACTUAL||chr(13)
                                                                                                ||'C√≥digo Sector Contable Nuevo: '||c.COD_SEC_CONTABLE_NUEVO,
                                              pNotifica      =>'N'
                                              ); 
                      vSubject  := 'Error realizando Cambio de Sector Contable';
                                                        
                    vTexto  := '<style type="text/css">table {border-collapse: collapse;} td, th {border: 1px solid black;padding: 3px;}</style>';
                    vTexto     := vTexto|| '<h3>Error en el Historico Mensual</h3>';
                    vTexto     := vTexto|| '<br><table>';
                    vTexto     := vTexto|| '<tr><td width=200><b>SQLERRM:</b></td><td>';
                    vTexto     := vTexto|| SQLERRM;
                    vTexto     := vTexto|| '<tr><td width=200><b>Fecha de Corrida:</b></td><td>';
                    vTexto     := vTexto|| vFecha;
                    vTexto     := vTexto|| '<tr><td><b>Fecha de Solcitiud:</b></td><td>';
                    vTexto     := vTexto|| c.fecha_solicitud;
                    vTexto     := vTexto|| '</td></tr><tr><td ><b>Ultimo Proceso Corrido:</b></td><td> Historico';
                    vTexto     := vTexto|| '</td></tr><tr><td><b>C√≥digo Del Producto:</b></td><td>';
                    vTexto     := vTexto|| null;
                    vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo Agencia:</b></td><td>';
                    vTexto     := vTexto|| null;
                    vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo cliente:</b></td><td>';
                    vTexto     := vTexto|| c.cod_cliente;                                       
                    vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo Sector Contable actual:</b></td><td>';
                    vTexto     := vTexto|| c.COD_SEC_CONTABLE_ACTUAL;                                       
                    vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo Sector Contable Nuevo:</b></td><td>';
                    vTexto     := vTexto|| c.COD_SEC_CONTABLE_NUEVO;                                       
                    vTexto     := vTexto|| '</td></tr></table>';
                        
                        pa.send_mail_html(vIPCorreo, vSender, vEmail, vSubject, vTexto);
                      --Fin.
              End;
                                              
                Vsequim := '12.2';
              Begin
                  Delete pa.solicitud_cambio_sector
                    where trunc(fecha_solicitud) <= vFecha
                      and cod_cliente = c.cod_cliente;
              Exception 
                  When Others then 
                        control.mensaje    := 'Error en Cierre Reasignacion de cliente a sector contable, borrando solicitudes de cambio realizadas '||SQLERRM;
                        vSistema           :=  Variables.codsistema;--'PA'
                        vErr               := '000688';
                        vMens              := ' en Cierre Reasignacion de cliente a sector contable, borrando solicitudes de cambio realizadas ' || SQLERRM;
                        v_Mensaje          := control.mensaje;                        
                        --ENF 15/10/2014    :    se modifico para agregar el envio de correo para los errores. 
                        message(c.cod_cliente||SQLCODE||vMensajeErr||' Historico'); Message('');
                        Utilitarios.Mensaje(vErr, variables.codidioma, vSistema,Acknowledge,vMens);
                        --Raise Bpa_Exception;
                        pa.genera_msg_error(pcodmsg        =>vErr,
                                              pmsgerror      =>'Error Eliminando Mensual',
                                              pproceso       =>vSistema||' Elminaci√≥n',
                                              pusuario       =>user,
                                              pmsgerrorora   => 'SQLERRM: '||SQLERRM ||chr(13)||'Fecha de Corrida: '||vFecha||chr(13)||'Fecha de Solcitiud:'||c.fecha_solicitud
                                                                                                ||chr(13)||'Ultimo Proceso Corrido: Elminaci√≥n'||chr(13)
                                                                                          ||'C√≥digo Del Producto: '||chr(13)||'C√≥digo Agencia: '
                                                                                          ||chr(13)||'C√≥digo cliente: '||c.cod_cliente||chr(13)
                                                                                          ||'C√≥digo Sector Contable actual: '||c.COD_SEC_CONTABLE_ACTUAL||chr(13)
                                                                                                ||'C√≥digo Sector Contable Nuevo: '||c.COD_SEC_CONTABLE_NUEVO,
                                              pNotifica      =>'N'
                                              );
                      
                      vSubject  := 'Error realizando Cambio de Sector Contable';
                                                        
                    vTexto  := '<style type="text/css">table {border-collapse: collapse;} td, th {border: 1px solid black;padding: 3px;}</style>';
                    vTexto     := vTexto|| '<h3>Error Eliminando Mensual</h3>';
                    vTexto     := vTexto|| '<br><table>';
                    vTexto     := vTexto|| '<tr><td width=200><b>SQLERRM:</b></td><td>';
                    vTexto     := vTexto|| SQLERRM;
                    vTexto     := vTexto|| '<tr><td width=200><b>Fecha de Corrida:</b></td><td>';
                    vTexto     := vTexto|| vFecha;
                    vTexto     := vTexto|| '<tr><td><b>Fecha de Solcitiud:</b></td><td>';
                    vTexto     := vTexto|| c.fecha_solicitud;
                    vTexto     := vTexto|| '</td></tr><tr><td ><b>Ultimo Proceso Corrido:</b></td><td> Eliminando';
                    vTexto     := vTexto|| '</td></tr><tr><td><b>C√≥digo Del Producto:</b></td><td>';
                    vTexto     := vTexto|| null;
                    vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo Agencia:</b></td><td>';
                    vTexto     := vTexto|| null;
                    vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo cliente:</b></td><td>';
                    vTexto     := vTexto|| c.cod_cliente;                                       
                    vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo Sector Contable actual:</b></td><td>';
                    vTexto     := vTexto|| c.COD_SEC_CONTABLE_ACTUAL;                                       
                    vTexto     := vTexto|| '</td></tr><tr><td ><b>C√≥digo Sector Contable Nuevo:</b></td><td>';
                    vTexto     := vTexto|| c.COD_SEC_CONTABLE_NUEVO;                                       
                    vTexto     := vTexto|| '</td></tr></table>';
                      --Fin.
              End;    
              salvar_escondido;
          else
              rollback;
          End if;
            
        End Loop; --clientes
        
        --ENF 15/10/2014    :    se modifico para agregar el envio de correo para los errores. Fin.
        if not FORM_SUCCESS then
            vSistema                    :=     Variables.codsistema;--'PA'            
            vErr := '000688';
            vMens := 'Reasignando, Validando forma en Aplicar Reclasificacion '||SQLERRM;     
           Raise Bpa_Exception;
        end if;
            
        --Set_Application_Property(Cursor_style, 'DEFAULT'); 
             
        if vnumero_asiento is null then
            control.mensaje := 'Fueron procesados '||VCANTIDADPROCESADA;
        else   
            control.mensaje := 'Fueron procesados '||VCANTIDADPROCESADA||' clientes. Se generaron los asientos del '||vnumero_asientoi ||' al '||vnumero_asiento||'.';
        end if;    
      
        v_Mensaje :=     control.mensaje;    

    Exception
        When Info_Exception Then
            Message(vErr ||'-'|| vMens);
            BITACORA_CIERRES_ERROR (variables.fecha, 'I');
            
        When Bpa_Exception Then
                --:control.mensaje     := 'Error en Proceso Cierre Reasignacion de cliente entre Oficiales ';
                --Synchronize;    
                --Set_Application_Property(Cursor_style, 'DEFAULT');      
                ---Utilitarios.Mensaje(vErr, :codidioma, vSistema,Acknowledge,vMens);
            --exit_form(no_commit, no_validate);
            message('Error: '||vErr||' - '||vMens);
            BITACORA_CIERRES_ERROR (variables.fecha);
        --ENF 15/10/2014    :    se modifico para agregar el envio de correo para los errores. 
        /*        
        When BCG_INTERFACE Then
                Set_Application_Property(Cursor_style, 'DEFAULT');            
                Message('Error BCG '||VMensajeErr); Message('');
                Utilitarios.Mensaje(vErr, :codidioma, vSistema,Acknowledge,vMens);
            exit_form(no_commit, no_validate);        
        
        When Bcc_Interface Then
                Set_Application_Property(Cursor_style, 'DEFAULT');      
                Message('Error BCC '||VMensajeErr); Message('');
            exit_form(no_commit, no_validate);
        
        When Bcd_Interface Then
                Set_Application_Property(Cursor_style, 'DEFAULT');      
                Message('Error BCD '||VMensajeErr); Message('');
            exit_form(no_commit, no_validate);
        
        When Bpr_Interface Then
                Set_Application_Property(Cursor_style, 'DEFAULT');      
                Message('Error BPR '||VMensajeErr); Message('');
            exit_form(no_commit, no_validate);*/
        --ENF 15/10/2014    :    se modifico para agregar el envio de correo para los errores.  Fin.
        When Others Then
                --Set_Application_Property(Cursor_style, 'DEFAULT');        
               Message(Vsequim ||'-'|| vMensaj ||'-'|| Sqlerrm);
               BITACORA_CIERRES_ERROR (variables.fecha);
              --exit_form(no_commit, no_validate);

    END P_Mensual_SEC;
          
    /* -------------------------------------------------------------------- */
    /* DESCRIPCION: CAMBIO DE CALENDARIO PA                                 */
    /* -------------------------------------------------------------------- */
    PROCEDURE CAMBIO_SECTOR_CONTABLE  IS        -- CCSOBTEC
                            
       vProcName           VARCHAR2(80)   := 'CAMBIO_SECTOR_CONTABLE';
       l_rindex_g          PLS_INTEGER    := DBMS_APPLICATION_INFO.set_session_longops_nohint;
       l_slno_g            PLS_INTEGER;
       pTarget             PLS_INTEGER;   
       
       vMensaje            VARCHAR2(1000) := Null;
       exError             EXCEPTION;
       vDesProceso         VARCHAR2(20);     
        
    BEGIN
    
        Job.Ejecuta := 'JOB_CAMBIO_SECTOR_CONTABLE';            
        IniVarGlobalesLocales('PACAMSEC');  
        BInicio (vProcName);
        
        BITACORA_CIERRES_INICIO(Control.Fecha_Proceso);
                
        If variables.Tipo_Cierre = 'D' Then
            
            DBMS_APPLICATION_INFO.set_session_longops (
                         rindex        => l_rindex_g,
                         slno          => l_slno_g,
                         op_name       => Job.Ejecuta,
                         target        => pTarget,
                         context       => 0,
                         sofar         => 1,
                         totalwork     => 2,
                         target_desc   => 'Procesando  ...',
                         units         => 'rows');
                         
            ValidarCierre_Diario(vMensaje); -- Valida cierre diario
            
            DBMS_APPLICATION_INFO.set_session_longops (
                         rindex        => l_rindex_g,
                         slno          => l_slno_g,
                         op_name       => Job.Ejecuta,
                         target        => pTarget,
                         context       => 0,
                         sofar         => 2,
                         totalwork     => 2,
                         target_desc   => 'Procesando  ...',
                         units         => 'rows');
                                                  
            P_APLICA_DIARIO_SEC(variables.ANTERIOR_DIA_HABIL,
                                variables.fecha_sistema, 
                                vMensaje);-- Aplicar Reasignacion Diaria

        Elsif variables.Tipo_Cierre = 'M' Then
        
            DBMS_APPLICATION_INFO.set_session_longops (
                         rindex        => l_rindex_g,
                         slno          => l_slno_g,
                         op_name       => Job.Ejecuta,
                         target        => pTarget,
                         context       => 0,
                         sofar         => 1,
                         totalwork     => 2,
                         target_desc   => 'Procesando  ...',
                         units         => 'rows');
            
            ValidarCierre_Mensual(vMensaje);
            
            DBMS_APPLICATION_INFO.set_session_longops (
                         rindex        => l_rindex_g,
                         slno          => l_slno_g,
                         op_name       => Job.Ejecuta,
                         target        => pTarget,
                         context       => 0,
                         sofar         => 2,
                         totalwork     => 2,
                         target_desc   => 'Procesando  ...',
                         units         => 'rows');
                         
            P_Mensual_SEC(variables.ANTERIOR_DIA_HABIL, 
                          variables.fecha_sistema, 
                          vMensaje);-- CORRE DESPUES DEL CIERRE MENSUAL
            
        End If;
        
        Select decode(variables.Tipo_Cierre,'M','Mensual','Diario') 
           Into vDesProceso 
          from dual;

        control.mensaje := vMensaje;
        
        BITACORA_CIERRES_FIN(Control.Fecha_Proceso); 
        BFinal(vProcName);
        
    EXCEPTION
        WHEN OTHERS THEN
            Message ('Proceso: '||vDesProceso||' '||control.mensaje||' >> '||SqlErrm); 
            BITACORA_CIERRES_ERROR (Control.Fecha_Proceso); 
    END CAMBIO_SECTOR_CONTABLE;
    
   /* -------------------------------------------------------------------- */
   /* DESCRIPCION: CAMBIO DE CALENDARIO PA                                 */
   /* -------------------------------------------------------------------- */
   PROCEDURE CAMBIO_CALENDARIO_PA IS
   
      vProcName           VARCHAR2(80)  := 'CAMBIO_CALENDARIO_PA';
      l_rindex_g          PLS_INTEGER   := DBMS_APPLICATION_INFO.set_session_longops_nohint;
      l_slno_g            PLS_INTEGER;
      pTarget             PLS_INTEGER;
        
   BEGIN
   
       Job.Ejecuta := 'JOB_CAMBIO_CALENDARIO_PA';
       IniVarGlobalesLocales('PACALEN1');
       BInicio (vProcName);
   
       IF calend.cod_sistema IS NOT NULL THEN
          
          --BITACORA_CIERRES
          BITACORA_CIERRES_INICIO (CALEND.FEC_HOY);
          
          DBMS_APPLICATION_INFO.set_session_longops (
                         rindex        => l_rindex_g,
                         slno          => l_slno_g,
                         op_name       => Job.Ejecuta,
                         target        => pTarget,
                         context       => 0,
                         sofar         => 1,
                         totalwork     => 2,
                         target_desc   => 'Procesando  ...',
                         units         => 'rows');
                                                  
            IF calend.cod_sistema = 'PA' THEN
            
                DECLARE
                   CURSOR c1 IS
                       SELECT cod_agencia
                         FROM sistemas_x_agencia
                        WHERE cod_empresa = 1
                          AND cod_sistema = 'PA'
                          AND esta_activo = 'S'
                          AND instalado = 'S'
                          AND calend_integrado = 'S'
                          AND cod_agencia IN (SELECT cod_agencia
                                                FROM pa.calendarios
                                               WHERE cod_empresa = 1 
                                                 AND cod_sistema = 'PA')
                                               ORDER BY ABS(cod_agencia);
                 BEGIN
                     
                   FOR correr IN c1
                   LOOP            
                                          
                      Correr_Calen1_Integra_PA (variables.codEmpresa,
                                                correr.cod_agencia);
                   END LOOP;
                   
                 END;
 
            END IF;
            
            DBMS_APPLICATION_INFO.set_session_longops (
                         rindex        => l_rindex_g,
                         slno          => l_slno_g,
                         op_name       => Job.Ejecuta,
                         target        => pTarget,
                         context       => 0,
                         sofar         => 2,
                         totalwork     => 2,
                         target_desc   => 'Procesando  ...',
                         units         => 'rows');

          --BITACORA_CIERRES
          BITACORA_CIERRES_FIN (CALEND.FEC_HOY);
          BFinal(vProcName);
       END IF;
   
   EXCEPTION
        WHEN OTHERS THEN
            Message (SqlCode||' >> '||SqlErrm); 
            BITACORA_CIERRES_ERROR (variables.fecha);    
   END CAMBIO_CALENDARIO_PA;
   
   --<<RFELIZ||25082020>>--
   /*Proceso que actualiza calendario internacional*/
   PROCEDURE ACTUALIZA_CALENDARIO_CI IS

      vfec            DATE;   
      vfec_cambio     DATE;      
      vfec_anterior   DATE;
      vprox_fecha     DATE;

      vnom_dia        VARCHAR2(15);
      vcodsistema     VARCHAR2(10);    
      
      
      CURSOR c_fec_interna IS
       SELECT v.cod_empresa
             ,v.cod_agencia
             ,v.cod_sistema 
         FROM pa.calendarios v
        WHERE v.cod_empresa = 1 
          AND v.cod_sistema = vcodsistema; 
  
   BEGIN
    
        vcodsistema := 'CI'; 
       
        --Fecha actual Calendario CI
        SELECT MAX(v.fec_hoy)
          INTO vfec         
          FROM pa.calendarios v
         WHERE v.cod_empresa = 1 
           AND v.cod_sistema = vcodsistema; 
       
   
      FOR g IN c_fec_interna
      LOOP
      
          --Fecha de ma√±ana 
          vfec_cambio := pa.calendar.obtener_sig_fec_habil(g.cod_empresa,
                                                           g.cod_agencia,
                                                           vfec); 
          
          --Dia de la semana de la fecha de ma√±ana 
          vnom_dia := pa.calendar.dia_de_la_semana(vfec_cambio,
                                                  'SPANISH');
          
          -- Dia anterior: "Fecha de hoy" 
          vfec_anterior  := vfec;
          
          --Pasado ma√±ana 
          vprox_fecha := pa.calendar.obtener_sig_fec_habil(g.cod_empresa,
                                                           g.cod_agencia,
                                                           vfec_cambio);
      
          --Actualizar agencias de calendario INTERNACIONAL = 'CI',etc..
          UPDATE pa.calendarios
             SET fec_hoy      = vfec_cambio
                ,nom_dia      = vnom_dia
                ,fec_anterior = vfec_anterior
                ,prox_fecha   = vprox_fecha
           WHERE cod_empresa  = g.cod_empresa 
             AND cod_sistema  = g.cod_sistema; 
          
      END LOOP; 
      
   END; 
   
   /* -------------------------------------------------------------------- */
   /* DESCRIPCION: CAMBIO DE CALENDARIO PA B2000                           */
   /* -------------------------------------------------------------------- */
   PROCEDURE CAMBIO_CALENDARIO_PA_B2000 IS
   
      vProcName           VARCHAR2(80)  := 'CAMBIO_CALENDARIO_PA_B2000';
      l_rindex_g          PLS_INTEGER   := DBMS_APPLICATION_INFO.set_session_longops_nohint;
      l_slno_g            PLS_INTEGER;
      pTarget             PLS_INTEGER;
        
   BEGIN
   
       Job.Ejecuta := 'JOB_CAMBIO_CALENDARIO_PA_B2000';
       IniVarGlobalesLocales('PACALEND');
       BInicio (vProcName);
   
       IF calend.cod_sistema IS NOT NULL THEN
          
          --BITACORA_CIERRES
          BITACORA_CIERRES_INICIO (CALEND.FEC_HOY);
          
          DBMS_APPLICATION_INFO.set_session_longops (
                         rindex        => l_rindex_g,
                         slno          => l_slno_g,
                         op_name       => Job.Ejecuta,
                         target        => pTarget,
                         context       => 0,
                         sofar         => 1,
                         totalwork     => 2,
                         target_desc   => 'Procesando  ...',
                         units         => 'rows');
                         
            --<<RFELIZ||25082020>>--
            /*Agregamos el proceso para que actualice el
              el calendario internacional*/
            BEGIN
                ACTUALIZA_CALENDARIO_CI;
                HAGA_COMMIT;
            EXCEPTION
                 WHEN OTHERS THEN
                     message('Error actualizacion CI :'||SQLERRM);
                     message(' ',NO_ACKNOWLEDGE);
                     ROLLBACK;
            END;                              
            
            --
            --
            
            IF calend.cod_sistema = 'PA' THEN
            
                Correr_Calendarios_Integrados (variables.codEmpresa,
                                               variables.codAgencia);
            
            ELSE
                                                          
                Correr_Calendario_Pa_B2000(variables.codEmpresa, 
                                           variables.codAgencia,
                                           variables.cod_sistema);
            END IF;
            
            DBMS_APPLICATION_INFO.set_session_longops (
                         rindex        => l_rindex_g,
                         slno          => l_slno_g,
                         op_name       => Job.Ejecuta,
                         target        => pTarget,
                         context       => 0,
                         sofar         => 2,
                         totalwork     => 2,
                         target_desc   => 'Procesando  ...',
                         units         => 'rows');

          --BITACORA_CIERRES
          BITACORA_CIERRES_FIN (CALEND.FEC_HOY);
          BFinal(vProcName);
       END IF;
   
   EXCEPTION
        WHEN OTHERS THEN
            Message (SqlCode||' >> '||SqlErrm); 
            BITACORA_CIERRES_ERROR (variables.fecha);    
   END CAMBIO_CALENDARIO_PA_B2000;
   
   PROCEDURE salvar_escondido IS

    BEGIN
        
      commit;

    END salvar_escondido;
   
   PROCEDURE P_Diario (v_Fecha in date, 
                       v_Mensaje in out varchar2) IS
                       
    --EFECTUA : Ejecuta el proceso diario                                     
    --HISTORIA: dfatule : 16/Mar/2007 : creacion
    Cursor co is
      Select Cod_Ejecutivo_Titular, Cod_Agencia_Titular, Cod_Agencia_Solicita, Cod_Ejecutivo_Solicita, Fecha_solicitud, Estado
      From   Cambios_Oficiales
      where  FECHA_SOLICITUD < v_Fecha
        and  ESTADO                     = 'S';
        
     vCant               Number;  
     vcantidadtoTal      Number(10);
     vcantidadprocesada  Number(10);
     Bpa_Exception       Exception;
     vErr                Varchar2(6);
     vMens               Varchar2(1000);
     vSistema            Varchar(2);
     Vsequim             varchar2(10);
     vMensaj             varchar2(100);                

    BEGIN   

        Vsequim                := '0';
        vMensaj                := 'Error Ejecutando Proceso Diario ';
        vCant                  := 0;    
        vcantidadtoTal         := 0;
        vcantidadprocesada     := 0;
        v_Mensaje              := Null;
        vErr                   := Null;
        vMens                  := Null;
        vSistema               := Variables.codsistema;--'PA'

       Begin
          Select     Count(*)
            Into     vCant
            From     Cambios_Oficiales
           where     FECHA_SOLICITUD < v_Fecha  
             and     ESTADO = 'S';
       exception
          when others then
             vCant := 0;
       end;

        Vsequim            :=    '1';
        Vsequim            :=    '2';

       -- INICIA GAUGE ORACLE
       vcantidadtoTal         := vCant;
       vcantidadprocesada     := 0;

       -- ANCHO DE LA BARRA
       --SET_ITEM_PROPERTY('etiquetas.et_gauge',WIDTH,0);
       --:etiquetas.et_avance := '0%';

       -- DESPLIEGA OBJETOS
       --SET_ITEM_PROPERTY('etiquetas.et_gauge',DISPLAYED,PROPERTY_TRUE);    
       --SET_ITEM_PROPERTY('etiquetas.et_avance',DISPLAYED,PROPERTY_TRUE);    
       --synchronize;

      Vsequim := '3';

       For a in co loop

            Begin
            
              Update Cambios_Oficiales
                  Set  USUARIO_APRORECH      = VARIABLES.USUARIO,
                       FECHA_APRORECH        = v_Fecha,
                       MODIFICADO_POR        = VARIABLES.USUARIO,
                       FECHA_MODIFICACION    = Sysdate,  
                       ESTADO                = 'R'
                Where  COD_EJECUTIVO_TITULAR = A.Cod_Ejecutivo_Titular
                  And  COD_AGENCIA_TITULAR   = A.Cod_Agencia_Titular
                  And  COD_AGENCIA_SOLICITA  = A.Cod_Agencia_Solicita
                  And  COD_EJECUTIVO_SOLICITA= a.Cod_Ejecutivo_Solicita
                  And  FECHA_SOLICITUD       = a.Fecha_solicitud
                  And  ESTADO                = a.Estado;
            Exception            
                When Others Then
                    control.mensaje    := 'Error en Diario, Actualizando Cambio Oficiales '||SQLERRM;
                    vSistema           := Variables.codsistema;
                    vErr               := '000688';
                    vMens              := 'en Diario, Actualizando Cambio Oficiales' || SQLCODE;                        
                    v_Mensaje          := control.mensaje;                        
                    Raise Bpa_Exception;
            End;


            -- INCREMENTA EL CONTADOR
            vcantidadprocesada := vcantidadprocesada + 1;
            -- ACTUALIZA BARRA
            --SET_ITEM_PROPERTY('ETIQUETAS.ET_GAUGE',WIDTH,(656*(((VCANTIDADPROCESADA*100)/VCANTIDADTOTAL)/100)));
            --:ETIQUETAS.ET_AVANCE := TO_CHAR(ROUND(((VCANTIDADPROCESADA*100)/VCANTIDADTOTAL)))||'%'; 
            --Synchronize;

       End Loop;
      
       Vsequim                            :=    '4';

        salvar_escondido;
                    
        if not FORM_SUCCESS then
           vErr  := '000688';
           vMens := ' Reasignando, Validando forma en Diario '||SQLERRM;     
           Raise Bpa_Exception;
        else

            If vcantidadprocesada > 0 then
                control.mensaje := 'Fin Ejecucion Proceso Diario, Fueron Actualizados '||vcantidadprocesada||' Solicitudes de Reasignacion Rechazadas';
                        
            Else
                control.mensaje := 'Fin Ejecucion Proceso Diario, No se encontro registros para Actualizar.';

            End If;
        end if;

    Exception
        When Bpa_Exception Then
                control.mensaje     := 'Error '||SQLERRM;
                Message(vErr ||' - '|| vMens ||' - '||control.mensaje); 
                BITACORA_CIERRES_ERROR (CONTROL.FECHA_PROCESO);
                RollBack;
                --Utilitarios.Mensaje(vErr, :codidioma, vSistema, Acknowledge,vMens);
                --Set_Application_Property(Cursor_style, 'DEFAULT');      
                --Raise form_trigger_failure;
        When Others Then        
            Message(Vsequim ||'-'|| vMensaj); 
            BITACORA_CIERRES_ERROR (CONTROL.FECHA_PROCESO);
            --Set_Application_Property(Cursor_style, 'DEFAULT');
            --exit_form(no_commit, no_validate);                      
                
    END P_Diario;
    
    PROCEDURE ValidarCierre_diario(Pmensaje in out varchar2) IS
        --EFECTUA : ValidarCierre diario el proceso de cierre diario del esquema CC
      
       vFecha         Date;
       vMensaje       varchar2(1000):=Null;

       Vsequim        varchar2(10);
       vMensaj        varchar2(100);               

       
    BEGIN
        
        Vsequim := '0';
        vMensaj := 'Error Validando el cierre diario';

        control.mensaje := 'Validando el cierre diario de CC para la fecha:'||Variables.ANTERIOR_DIA_HABIL;
        Synchronize;
                
       begin
          -- Se valida se haya ejecutado el cierre Diario
          select Ult_Cierre_Dia
           into vFecha
           from cierre_x_grupos
           where ( cod_empresa = variables.CodEmpresa   )
           and   ( cod_grupo   = variables.cod_grupo );
       exception
          when no_data_found then
             vFecha := null;
          when others then
             --Error al verificar la fecha de ultima ejecucion del proceso
             Pmensaje := 'Error al verificar la fecha de ultima ejecucion del proceso';
             Vsequim := '1';
             vMensaj    := 'Error Validando el cierre diario: Error al verificar la fecha de ultima ejecucion del proceso';
             Message(vMensaj||'-'||Pmensaje); 
             BITACORA_CIERRES_ERROR (CONTROL.FECHA_PROCESO);        
             --raise form_trigger_failure;
       end;

       if ( vFecha is null) or ( vFecha < Variables.ANTERIOR_DIA_HABIL ) then
          --si la fecha del cierre de CC es inferior al anterior dia habil
          --solo debe continuar si es mayor o igual al anterior dia habil.
          --No se ha realizado el cierre del dia anterior a esta fecha
          --UTILITARIOS.mensaje('000180',variables.CodIdioma,'CC');
          Pmensaje := 'No se ha realizado el cierre del dia anterior a esta fecha';
          Vsequim := '2';
          vMensaj    := 'Error Validando el cierre diario: Fecha Ultimo Cierre de CC: '||vFecha ||' Es Menor que la Fecha de Cierre: '||Variables.ANTERIOR_DIA_HABIL;
          Message(vMensaj||'-'||Pmensaje);
          BITACORA_CIERRES_ERROR (CONTROL.FECHA_PROCESO);                     
          --raise form_trigger_failure;     
       end if;
       
    EXCEPTION
        When Others Then
            Message(Vsequim ||'-'|| vMensaj);
            BITACORA_CIERRES_ERROR (CONTROL.FECHA_PROCESO);
            --exit_form(no_commit, no_validate);
            --Set_Application_Property(Cursor_style, 'DEFAULT');               
    end ValidarCierre_diario;
    
    /****************************************************************************
    * Procedimiento que se encarga de validar el nivel de ingreso de la persona *
    * y asignar el nicho correspondiente de acuerdo al nivel de ingreso.        *
    *****************************************************************************/
    PROCEDURE Busca_nicho(pCodOficial in  Varchar2,
                          pCodNicho   out Varchar2)IS
                          
       vMontoIngreso  Number(18,2);  
       vIndTipPersona Varchar2(1); 
       vCodigoAgencia empleados.cod_agencia_labora%type;
    BEGIN
        -- Buscamos la agencia del oficial asignado
       Begin
          Select cod_agencia_labora 
            Into vCodigoAgencia
            From empleados
           Where cod_empresa = variables.codempresa
             And id_empleado = pCodOficial;
       Exception
               When no_data_found Then
                    -- El usuario no esta registrado como empleado
                    --utilitarios.mensaje('000490', variables.codidioma, 'PA', acknowledge, SQLERRM);
                    mensaje('000490: '||sqlerrm); 
                    BITACORA_CIERRES_ERROR (CONTROL.FECHA_PROCESO);
                    --raise form_trigger_failure;
               When Others Then
                    mensaje('Error buscando las agencias correspondiente al oficial: '||sqlerrm); 
                    BITACORA_CIERRES_ERROR (CONTROL.FECHA_PROCESO);
                    --raise form_trigger_failure;
       End;
       
      -- Determinamos a que nicho corresponde al oficial asignado
       Begin
          Select Cod_nicho
            Into pCodNicho
            From pa.pa_nichos
           Where Sufijo_agencia = substr(vCodigoAgencia,length(vCodigoAgencia)-1,2)
             and nvl(ind_institucional,'N') = 'N';
             --and vMontoIngreso between rango_inicio and rango_fin;
           Exception 
              When no_data_found Then
                   pCodNicho := null;
              When Others Then
                   mensaje('Error obteniendo el c√≥digo del nicho: '||sqlerrm); 
                   BITACORA_CIERRES_ERROR (CONTROL.FECHA_PROCESO);
                   --Raise form_trigger_failure;
       End;  

    END Busca_nicho;
    
    PROCEDURE CL_Tipo_cuenta (pcodmotivo in varchar2,
                             pcodmoneda in varchar2,
                             ptipocuenta in varchar2,
                             ptipomotivo in out varchar2,
                             pcodsistema in out varchar2,
                             paplicacomision in out varchar2) IS
    -- EFECTUA: Busca el motivo segun el tipo de cuenta para la CL
    -- Historia: dfatule 14/mar/2007
        Vsequim                            varchar2(10);
        vMensaj                            varchar2(100);               

    BEGIN

            Vsequim := '0';
            vMensaj    := 'Error buscando tipo de cuenta';

       if pcodmotivo is null then
            Mensaje('Por Favor Indique el Motivo que ha Originado esta Cuenta');
            BITACORA_CIERRES_ERROR (CONTROL.FECHA_PROCESO);
            --raise form_trigger_failure;
       else
       -- 
       -- Busca la Descripcion del Motivo en CL_MOTIVOS. 
       -- 
            Vsequim := '1';
            vMensaj    := 'Error buscando datos del tipo de cuenta';   
       
          begin
            select a.tipo_motivo    ,
                   a.cod_sistema    ,
                   a.aplica_comision
              into ptipomotivo    ,
                   pcodsistema    ,
                   paplicacomision
              from cl_contrapartida_contable b, 
                   cl_motivo                 a
             where a.cod_empresa = variables.codEmpresa
               and a.cod_motivo  = pcodmotivo
               and a.tipo_cuenta in (ptipocuenta,'A')
               and b.cod_empresa = a.cod_empresa 
               and b.cod_motivo  = a.cod_motivo
               and b.cod_moneda  = pcodmoneda
               and b.tipo_cuenta = ptipocuenta;
           exception
                when no_data_found then
                     Mensaje('El Motivo: '||pcodmotivo||' No Existe o No es Permitido para la Moneda: '||pcodmoneda);
                     BITACORA_CIERRES_ERROR (CONTROL.FECHA_PROCESO);
                     --raise form_trigger_failure;
                when others then
                     Mensaje('Ocurrio Error Buscando el Motivo: '||pCodMotivo||sqlerrm);
                     BITACORA_CIERRES_ERROR (CONTROL.FECHA_PROCESO);
                     --raise form_trigger_failure;     
          end;

       end if;

    Exception
        When Others Then
            --Set_Application_Property(Cursor_style, 'DEFAULT');        
             Message(Vsequim ||'-'|| vMensaj); Message(' ');
             BITACORA_CIERRES_ERROR (CONTROL.FECHA_PROCESO);
             --exit_form(no_commit, no_validate);            

    END CL_Tipo_cuenta;
    
    Procedure Es_Centralizada ( pCtaCtable in char,
                                pResultado out Char) IS
    --EFECTUA : Evaluar Unidad Centralizada de Cuenta Contable                                     
    BEGIN
        
        
        Begin
         select Decode(Unidad_Centralizada,Null,'N','S')
         into   pResultado
         from    CG_CATALOGO_X_EMPRESA
         where   CODIGO_EMPRESA  = VARIABLES.CODEMPRESA
         and     CUENTA_CONTABLE = pCtaCtable;
      Exception
        when others then
          --Error del sistema
          --Utilitarios.Mensaje('000099', :VARIABLES.CODIDIOMA, 'CG', Acknowledge,' Buscando Unidad Centralizada de la cuenta Contable: '||pCtaCtable);
          Message('Buscando Unidad Centralizada de la cuenta Contable: ' ||'-'|| pCtaCtable); 
          BITACORA_CIERRES_ERROR (CONTROL.FECHA_PROCESO);
          --Raise Form_Trigger_Failure;
      End;
      
      
    END Es_Centralizada;
--ACollado.30/05/2023--Creo funcion que devuelve sector contable del cliente| [FDS-1754] Centro de Costos
Function Sector_Contable_Cliente(Pcod_empresa       in varchar2,
                                 Pcliente           in varchar2) return varchar2 is
vsector PERSONAS.COD_SEC_CONTABLE%type;
begin
        select  b.cod_sec_contable
         into vsector
         from personas b
        where b.cod_persona    = Pcliente;
return vsector;
exception when others then
     return nvl(vsector,'0');
end;
------------------------------------------------------------------------------------
    PROCEDURE Asiento_Reclasificacion_Pr(Pcod_empresa       in varchar2,
                                         Pcod_agencia       in varchar2,
                                         Ptipo_credito      in varchar2,
                                         Pestado            in varchar2,
                                         Pnumasiento        in varchar2,
                                         Pnocredito         in varchar2,
                                         PAplic             in Varchar2,
                                         PSubAplic          in Varchar2,
                                         PTipoTrans         in varchar2,
                                         PSubTransCambio    in varchar2,                                                    
                                         PNumTransa         in varchar2,
                                         Pdescripcion       in varchar2,
                                         Pfecha             in date,
                                         Pcliente           in varchar2,
                                         PTitular_agencia   in varchar2,
                                         Pnueva_agencia     in varchar2,
                                         PSaldoCredito      in number,
                                         pIntereses         in number,--ACollado.30/05/2023.intereses| [FDS-1754] Centro de Costos
                                         pInteresesSu       in number,--ACollado.30/05/2023.intereses suspendidos| [FDS-1754] Centro de Costos
                                         PTc1               in out number,
                                         PTc2               in out Number,
                                         PMensajeError      in out varchar2
                                         ) IS
        --EFECTUA : Inicializacion de Variables Locales Adicionales                                     
        --HISTORIA: dfatule : 16/Mar/2007 : redefinicion
        Vcuentacontable                Varchar2(25);
        BCG_INTERFACE                 Exception;
         vErr                                    Varchar2(6);
         vMens                                    Varchar2(1000);
         vSistema                            Varchar2(2);
        Vsequim                                varchar2(10);
        vMensaj                                varchar2(100);    
        vCentral                            Varchar2(1);
        -- ACollado 30/05/2023: Modificaciones para verificar atraso de creditos en J o E- [FDS-1754] Centro de Costos
        vAtraso    varchar2(1);
        vConcepto varchar2(30);
        vSectorContable PERSONAS.COD_SEC_CONTABLE%type :=Sector_Contable_Cliente(Pcod_empresa,Pcliente);
        vCentralInt varchar2(1);
        vCentralIntS varchar2(1);
        vCentralIntS2 varchar2(1);
        vCuentaContableInt cg.cg_catalogo_x_empresa.cuenta_contable%type;
        vCuentaContableIntS cg.cg_catalogo_x_empresa.cuenta_contable%type;
        vCuentaContableIntS2 cg.cg_catalogo_x_empresa.cuenta_contable%type;
    Begin

    vSequim    := '0';
    vMensaj    := 'Error generando reclasificacion de Prestamos para el cliente '||Pcliente;

        pr.PR_PROCS.Cuenta_Contable_Principal_BPR(Pcod_empresa, 
                                      Ptipo_credito, 
                                      Pestado,
                                      Pnocredito, 
                                      Vcuentacontable, 
                                      PMensajeError);
            Vsequim    := '1'; 
                                                  
        If PMensajeError is not NULL then
                    vErr        :=    '000688';
                    vMens       :=    ' Buscando Cuenta Contable Principal BPR, Credito: '||Pnocredito||
                                                ' Tipo de Credito: '||Ptipo_credito||' Cuenta contable: '||Vcuentacontable||' Error: '||PMensajeError;
                    vSistema    :=    Variables.codsistema;--'PA'
              raise BCG_INTERFACE;
        End if;
        
            Vsequim    := '2';    
            control.mensaje := ' Asiento: '||Pnumasiento||' Cuenta Contable '||Vcuentacontable;
            
            --Si no es centralizada haz el asiento--dfatule 04092007
            Es_Centralizada ( Vcuentacontable,
                                            vCentral);--S o N
            If vCentral = 'N' Then    --dfatule 04092007                          
            
                CG.CG_UTL.Lineas_del_Asiento( Pcod_empresa,
                                               Pcod_agencia,         --Agencia del titular que se le dara el debido
                                               PAplic,
                                               PSubAplic,
                                               PTipoTrans,
                                               PSubTransCambio, -- No hay Subtransacc.--
                                               PNumTransa,
                                               PDESCRIPCION,
                                               Pfecha,                  -- F/Movimiento   --
                                               Pfecha,                  -- F/Valor        --
                                               Pfecha,                  -- F/del_dia  --
                                               Pnumasiento,
                                               Vcuentacontable,
                                               PTitular_agencia,-- tiene Auxiliar  --
                                               PSaldoCredito,    
                                               'S',                -- Si Acumula         --
                                               'C',                         -- Credito, Tipo movimiento
                                               'N',                -- No modifica linea  --
                                               PTc1,              -- Tipo de cambio orig--
                                               PTC2,              -- Tipo de cambio base--
                                               Variables.Usuario, 
                                               PMensajeError);
                Vsequim    := '3';

                                                       
            If PMensajeError is not null then                
                    vErr       :=    '000688';
                    vMens      :=    ' Despues Lineas del Asiento Debito '||PMensajeError||'-'||Pcliente||'CRno. '||Pnocredito;
                    vSistema   :=    Variables.codsistema;--'PA'
              raise BCG_INTERFACE;
            End if;
            
                Vsequim    := '4';
            
                control.mensaje := ' Asiento Debito: '||Pnumasiento||' Saldo: '||PSaldoCredito||' Auxiliar: '||PTitular_agencia||' Cuenta Contable '||Vcuentacontable||' Error '||PMensajeError||'- Cliente: '||Pcliente||'CRno. '||Pnocredito;                        
            
                CG.CG_UTL.Lineas_del_Asiento( variables.Codempresa,
                                               variables.CodAgencia, --Agencia del Solicitante que se le dara el Credito.
                                               PAplic,
                                               PSubAplic,
                                               PTipoTrans,
                                               PSubTransCambio,       -- No hay Subtransacc.--
                                               PNumTransa,
                                               PDESCRIPCION,
                                               PFecha,                              -- F/Movimiento   --
                                               PFecha,                              -- F/Valor        --
                                               PFecha,                              -- F/del_dia  --
                                               Pnumasiento,
                                               Vcuentacontable,
                                               Pnueva_agencia,             -- Tiene Auxiliar  --
                                               Psaldocredito,
                                               'S',                            -- Si Acumula         --
                                               'D',                                     -- Debito, Tipo movimiento  --
                                               'N',                            -- No modifica linea  --
                                               PTc1,                          -- Tipo de cambio orig--
                                               PTc2,                          -- Tipo de cambio base--
                                               Variables.Usuario, 
                                               PMensajeError);
                Vsequim    := '5';

                               
            if PMensajeError is not null then
                    vErr        :=    '000688';
                    vMens       :=    ' Despues verificar Error Lineas del Asiento Credito '||PMensajeError||'-'||Pcliente||'CRno. '||Pnocredito;
                    vSistema    :=    Variables.codsistema;--'PA'
              raise BCG_INTERFACE;
            End if;
                
                Vsequim    := '6';
                control.mensaje := ' Asiento Credito: '||Pnumasiento||' Saldo: '||Psaldocredito||' Auxiliar: '||Pnueva_agencia||' Cuenta Contable '||Vcuentacontable||' Error '||PMensajeError||'- Cliente: '||Pcliente||'CRno. '||Pnocredito;
                Synchronize;                                
        
            End If;--Si no es centralizada haz el asiento--dfatule 04092007

    --ACollado.30/05/2023.Se reclasifican los intereses| [FDS-1754] Centro de Costos
        vConcepto := '';
        if pEstado in ('E','J') then
           vAtraso := PR.Verifica_Atraso_BPR (Pcod_empresa, Pnocredito);
           if vAtraso = 'M' then
               vConcepto := '_MORA';
           elsif vAtraso = 'V' then
               vConcepto := '_VENCIDO';
           end if;
        end if;
            -- Intereses del cr√©dito
        -- Cuenta contable sector
        begin
               select CUENTA_CONTABLE
                 into vCuentaContableInt
               from PR_CUENTAS_X_CONCEPTO a
              where CODIGO_EMPRESA    = Pcod_empresa
                and TIPO_CREDITO      = Ptipo_credito
                and CODIGO_ESTADO     = Pestado
                and CONCEPTO          = 'INTERESES'||vConcepto
                and COD_SEC_CONTABLE  = vSectorContable;
        exception
           when no_data_found then
               PMensajeError := '001814'; --No encontro Cta para el concepto NConcepto
             return;
          when too_many_rows then
            PMensajeError := '000015'; -- Concepto duplicada
             return;
          when others then
            PMensajeError := '000016'; -- Se presentaron problemas con la cuenta
          return;
        end ;
            -- Intereses en suspenso
        -- Cuenta contable sector
        begin
               select CUENTA_CONTABLE
                 into vCuentaContableIntS
               from PR_CUENTAS_X_CONCEPTO a
              where CODIGO_EMPRESA    = Pcod_empresa
                and TIPO_CREDITO      = Ptipo_credito
                and CODIGO_ESTADO     = Pestado
                and CONCEPTO          = 'INTERESES_EN_SUSPENSO'
                and COD_SEC_CONTABLE  = '0';--- vSectorContable; --REVISAR FDS-1754-Centro de Costos
        exception
           when no_data_found then
               PMensajeError := '001814'; --No encontro Cta para el concepto NConcepto
             return;
          when too_many_rows then
            PMensajeError := '000015'; -- Concepto duplicada
             return;
          when others then
            PMensajeError := '000016'; -- Se presentaron problemas con la cuenta
          return;
        end ;

        -- Intereses en suspenso contrario
        -- Cuenta contable sector
        begin
               select CUENTA_CONTABLE
                 into vCuentaContableIntS2
               from PR_CUENTAS_X_CONCEPTO a
              where CODIGO_EMPRESA    = Pcod_empresa
                and TIPO_CREDITO      = Ptipo_credito
                and CODIGO_ESTADO     = Pestado
                and CONCEPTO          = 'INGRESO_X_INT_EN_SUSPENSO'
                and COD_SEC_CONTABLE  = '0';--- vSectorContable; --REVISAR FDS-1754-Centro de Costos
        exception
           when no_data_found then
               PMensajeError := '001814'; --No encontro Cta para el concepto NConcepto
             return;
          when too_many_rows then
            PMensajeError := '000015'; -- Concepto duplicada
             return;
          when others then
            PMensajeError := '000016'; -- Se presentaron problemas con la cuenta
          return;
        end ;
        
            Vsequim    := '2';

            control.mensaje := ' Asiento: '||Pnumasiento||' Cuenta Contable '||vCuentaContableInt;

            --Si no es centralizada haz el asiento
            Es_Centralizada ( Vcuentacontableint,
                              vCentralInt);--S o N

            If vCentralInt = 'N' Then

                 CG.CG_UTL.Lineas_del_Asiento( Pcod_empresa,
                                               Pcod_agencia,         --Agencia del titular que se le dara el debido
                                               PAplic,
                                               PSubAplic,
                                               PTipoTrans,
                                               PSubTransCambio, -- No hay Subtransacc.--
                                               PNumTransa,
                                               PDESCRIPCION,
                                               Pfecha,                  -- F/Movimiento   --
                                               Pfecha,                  -- F/Valor        --
                                               Pfecha,                  -- F/del_dia  --
                                               Pnumasiento,
                                               Vcuentacontableint,
                                               PTitular_agencia,-- tiene Auxiliar  --
                                               pIntereses,
                                               'S',                -- Si Acumula         --
                                               'C',                         -- Debito, Tipo movimiento  --
                                               'N',                -- No modifica linea  --
                                               PTc1,              -- Tipo de cambio orig--
                                               PTC2,              -- Tipo de cambio base--
                                               Variables.Usuario,
                                               PMensajeError);
                    if PMensajeError is not null then
                            vErr        :=    '000688';
                            vMens       :=    ' Despues verificar Error Lineas del Asiento Debito '||PMensajeError||'-'||Pcliente||'CRno. '||Pnocredito;
                            vSistema    :=    Variables.codsistema;--'PA'
                      raise BCG_INTERFACE;
                    End if;

                    CG.CG_UTL.Lineas_del_Asiento( Pcod_empresa,
                                       Pcod_agencia,         --Agencia del titular que se le dara el debido
                                       PAplic,
                                       PSubAplic,
                                       PTipoTrans,
                                       PSubTransCambio, -- No hay Subtransacc.--
                                       PNumTransa,
                                       PDESCRIPCION,
                                       Pfecha,                  -- F/Movimiento   --
                                       Pfecha,                  -- F/Valor        --
                                       Pfecha,                  -- F/del_dia  --
                                       Pnumasiento,
                                       Vcuentacontableint,
                                       Pnueva_agencia,                -- tiene Auxiliar  --
                                       PIntereses,
                                       'S',                -- Si Acumula         --
                                       'D',                         -- Credito, Tipo movimiento  --
                                       'N',                -- No modifica linea  --
                                       PTc1,              -- Tipo de cambio orig--
                                       PTC2,              -- Tipo de cambio base--
                                       Variables.Usuario,
                                       PMensajeError);
                    if PMensajeError is not null then
                            vErr        :=    '000688';
                            vMens       :=    ' Despues verificar Error Lineas del Asiento Credito '||PMensajeError||'-'||Pcliente||'CRno. '||Pnocredito;
                            vSistema    :=    Variables.codsistema;--'PA'
                      raise BCG_INTERFACE;
                    End if;
                    Vsequim    := '3';

            End If;--Si no es centralizada haz el asiento

            Vsequim    := '4';

            control.mensaje := ' Asiento: '||Pnumasiento||' Cuenta Contable '||VcuentacontableIntS;

          --Si no es centralizada haz el asiento
            Es_Centralizada ( VcuentacontableintS,
                              vCentralIntS);--S o N

            If vCentralIntS = 'N' Then
             CG.CG_UTL.Lineas_del_Asiento( Pcod_empresa,
                                           Pcod_agencia,         --Agencia del titular que se le dara el debido
                                           PAplic,
                                           PSubAplic,
                                           PTipoTrans,
                                           PSubTransCambio, -- No hay Subtransacc.--
                                           PNumTransa,
                                           PDESCRIPCION,
                                           Pfecha,                  -- F/Movimiento   --
                                           Pfecha,                  -- F/Valor        --
                                           Pfecha,                  -- F/del_dia  --
                                           Pnumasiento,
                                           VcuentacontableintS,
                                           PTitular_agencia,-- tiene Auxiliar  --
                                           pInteresesSu,
                                           'S',                -- Si Acumula         --
                                           'C',                         -- Debito, Tipo movimiento  --
                                           'N',                -- No modifica linea  --
                                           PTc1,              -- Tipo de cambio orig--
                                           PTC2,              -- Tipo de cambio base--
                                           Variables.Usuario,
                                           PMensajeError);
                if PMensajeError is not null then
                        vErr        :=    '000688';
                        vMens       :=    ' Despues verificar Error Lineas del Asiento Debito '||PMensajeError||'-'||Pcliente||'CRno. '||Pnocredito;
                        vSistema    :=    Variables.codsistema;--'PA'
                  raise BCG_INTERFACE;
                End if;

                CG.CG_UTL.Lineas_del_Asiento( Pcod_empresa,
                                   Pcod_agencia,         --Agencia del titular que se le dara el debido
                                   PAplic,
                                   PSubAplic,
                                   PTipoTrans,
                                   PSubTransCambio, -- No hay Subtransacc.--
                                   PNumTransa,
                                   PDESCRIPCION,
                                   Pfecha,                  -- F/Movimiento   --
                                   Pfecha,                  -- F/Valor        --
                                   Pfecha,                  -- F/del_dia  --
                                   Pnumasiento,
                                   VcuentacontableintS,
                                   Pnueva_agencia,                -- tiene Auxiliar  --
                                   PInteresesSu,
                                   'S',                -- Si Acumula         --
                                   'D',                         -- Credito, Tipo movimiento  --
                                   'N',                -- No modifica linea  --
                                   PTc1,              -- Tipo de cambio orig--
                                   PTC2,              -- Tipo de cambio base--
                                   Variables.Usuario,
                                   PMensajeError);
                if PMensajeError is not null then
                        vErr        :=    '000688';
                        vMens       :=    ' Despues verificar Error Lineas del Asiento Credito '||PMensajeError||'-'||Pcliente||'CRno. '||Pnocredito;
                        vSistema    :=    Variables.codsistema;--'PA'
                  raise BCG_INTERFACE;
                End if;
                Vsequim    := '5';
            end if;--Si no es centralizada haz el asiento

            --Para las cuentas de interes de suspenso, las cuales son de orden, debo realizar el movimiento contrario a la cuenta comenzando en 82
            Vsequim    := '6';

            control.mensaje := ' Asiento: '||Pnumasiento||' Cuenta Contable '||VcuentacontableIntS2;

            --Si no es centralizada haz el asiento
            Es_Centralizada ( VcuentacontableIntS2,
                              vCentralIntS2);--S o N

            If vCentralIntS2 = 'N' Then


                 CG.CG_UTL.Lineas_del_Asiento( Pcod_empresa,
                                               Pcod_agencia,         --Agencia del titular que se le dara el debido
                                               PAplic,
                                               PSubAplic,
                                               PTipoTrans,
                                               PSubTransCambio, -- No hay Subtransacc.--
                                               PNumTransa,
                                               PDESCRIPCION,
                                               Pfecha,                  -- F/Movimiento   --
                                               Pfecha,                  -- F/Valor        --
                                               Pfecha,                  -- F/del_dia  --
                                               Pnumasiento,
                                               VcuentacontableintS2,
                                               PTitular_agencia,-- tiene Auxiliar  --
                                               pInteresesSu,
                                               'S',                -- Si Acumula         --
                                               'D',                         -- Debito, Tipo movimiento  --
                                               'N',                -- No modifica linea  --
                                               PTc1,              -- Tipo de cambio orig--
                                               PTC2,              -- Tipo de cambio base--
                                               Variables.Usuario,
                                               PMensajeError);
                    if PMensajeError is not null then
                            vErr        :=    '000688';
                            vMens       :=    ' Despues verificar Error Lineas del Asiento Debito '||PMensajeError||'-'||Pcliente||'CRno. '||Pnocredito;
                            vSistema    :=    Variables.codsistema;--'PA'
                      raise BCG_INTERFACE;
                    End if;

                    CG.CG_UTL.Lineas_del_Asiento( Pcod_empresa,
                                       Pcod_agencia,         --Agencia del titular que se le dara el debido
                                       PAplic,
                                       PSubAplic,
                                       PTipoTrans,
                                       PSubTransCambio, -- No hay Subtransacc.--
                                       PNumTransa,
                                       PDESCRIPCION,
                                       Pfecha,                  -- F/Movimiento   --
                                       Pfecha,                  -- F/Valor        --
                                       Pfecha,                  -- F/del_dia  --
                                       Pnumasiento,
                                       VcuentacontableintS2,
                                       Pnueva_agencia,                -- tiene Auxiliar  --
                                       PInteresesSu,
                                       'S',                -- Si Acumula         --
                                       'C',                         -- Credito, Tipo movimiento  --
                                       'N',                -- No modifica linea  --
                                       PTc1,              -- Tipo de cambio orig--
                                       PTC2,              -- Tipo de cambio base--
                                       Variables.Usuario,
                                       PMensajeError);
                    if PMensajeError is not null then
                            vErr        :=    '000688';
                            vMens       :=    ' Despues verificar Error Lineas del Asiento Credito '||PMensajeError||'-'||Pcliente||'CRno. '||Pnocredito;
                            vSistema    :=    Variables.codsistema;--'PA'
                      raise BCG_INTERFACE;
                    End if;
                    Vsequim    := '7';

            End If;--Si no es centralizada haz el asiento
    Exception
        When BCG_INTERFACE Then
            --Utilitarios.Mensaje(vErr, variables.codidioma, vSistema,Acknowledge,vMens);
            Message(vErr ||'-'|| vMens); 
            BITACORA_CIERRES_ERROR (CONTROL.FECHA_PROCESO);
            RollBack;
            --Set_Application_Property(Cursor_style, 'DEFAULT');   
            --Raise form_trigger_failure;
            
        When Others Then
            --Message(SQLERRM||SQLCODE); Message(' ');
             --Set_Application_Property(Cursor_style, 'DEFAULT');        
             Message(Vsequim ||'-'|| vMensaj); 
             BITACORA_CIERRES_ERROR (CONTROL.FECHA_PROCESO);
             --exit_form(no_commit, no_validate);                            
    End Asiento_Reclasificacion_Pr;

--ACollado.01/06/2023/Hacemos procedimiento para reclasificar los montos embargados..FDS-1754-Centro de Costos
  PROCEDURE Asiento_Reclasificacion_Cd_Reten (Pcod_empresa in varchar2,
                                              Pcod_agencia in varchar2,
                                              PCod_Cartera in varchar2,
                                              PTip_Certificado in varchar2,
                                              Pcod_retencion in varchar2,
                                              Pestado in varchar2, --Estado del Certificado
                                              Pnumasiento in varchar2, --Num asiento caratula
                                              PAplic in Varchar2,
                                              PSubAplic in Varchar2,
                                              PTipoTrans in varchar2,
                                              PSubTransCambio in varchar2,
                                              PNumTransa in varchar2,
                                              Pdescripcion in varchar2,
                                              Pfecha in date,
                                              Pcliente    in varchar2,
                                              PTitular_agencia in varchar2,
                                              Pnueva_agencia in varchar2,
                                              PMontoCD in number,--Monto retenido
                                              pMon_int_x_pagar IN NUMBER,--Interes x pagar retenido
                                              pMon_int_cap     IN NUMBER,--Interes capitalizado retenido
                                              pPla_Dias        IN NUMBER,
                                              pClasificacion   IN VARCHAR2,
                                              pCod_Moneda       IN VARCHAR2,
                                              PTc1 in out number,
                                              PTc2 in out Number,
                                              PMensajeError in out varchar2
                                              ) IS
    --EFECTUA : Inicializacion de Variables Locales Adicionales
     BCG_INTERFACE Exception;
    vctacontable          varchar2(25);
    vIndRet               varchar2(1);
    --
    Vsequim               varchar2(10);
    vMensaj               varchar2(100);
    vCentral              varchar2(1);
    --DFATULE 10092007
    vCapitalizable      varchar2(1):= null;
    vCodCartera_Int     cd_certificado.cod_cartera%type:= null;
    vCtaContable_Int    cd_certificado.cuenta_contable%type:= null;
    vCuentacontable     cd_certificado.cuenta_contable%type:= null;
    vNumError           varchar2(6):= null;
    vSqlCode            number:= null;
    --rareyes 19/01/2023
    vCOD_SEC_CONTABLE PERSONAS.COD_SEC_CONTABLE%type :=Sector_Contable_Cliente(Pcod_empresa,Pcliente);
      ---

    BEGIN

        Vsequim := '1';
        vMensaj := 'Error ejecutando reclasificacion de CD para el cliente '||Pcliente;

          if pTip_Certificado in ('CV','CF','VCV','VCF') then
                 vCapitalizable := 'C';
          else
               vCapitalizable := 'N';
          end if;

        Vsequim := '1.1';
        vMensaj := 'Error buscando cartera de intereses del CD para el cliente '||Pcliente;
        vCodCartera_Int := PCod_Cartera;--le asigno la cartera del cd

        CD_CAMBIO_CARTERA(Pcod_empresa,
                          Pcod_retencion,
                          PCod_Cartera,
                          PTip_Certificado,
                          vCOD_SEC_CONTABLE,
                          vIndRet,
                          vctacontable,
                          vctacontable_int,
                          vCapitalizable);
        --Intereses x pagar retenidos
        If pMon_int_x_pagar > 0 then
             Vsequim := '1.2';
                         --
             if vCodCartera_int is null then
               if vNumerror = '000183' then
                  Message('Error: '||vNumError);
                  BITACORA_CIERRES_ERROR (CONTROL.FECHA_PROCESO);
               else
                  Message('Error: '||vNumError);
                  BITACORA_CIERRES_ERROR (CONTROL.FECHA_PROCESO);
               end if;
             end if ;

             Vsequim := '1.3';

            --Si no es centralizada haz el asiento--
          Es_Centralizada ( vCtaContable_Int,
                            vCentral);--S o N
          If vCentral = 'N' Then
                  CG.CG_UTL.Lineas_del_Asiento(Pcod_empresa,
                                               Pcod_agencia,
                                               PAplic,
                                               PSubAplic,
                                               PTipoTrans,
                                               PSubTransCambio,
                                               PNumTransa,
                                               Pdescripcion,
                                               Pfecha,
                                               Pfecha,
                                               Pfecha,
                                               Pnumasiento,
                                               vCtaContable_Int,
                                               PTitular_agencia,
                                               pMon_int_x_pagar,
                                               'S',
                                               'D',
                                               'N',
                                               pTC1,
                                               pTC2,
                                               variables.usuario,
                                               PMensajeError);
                    Vsequim := '2';
                    vMensaj := 'Error en asiento debito del CD pMon_int_x_pagar para el cliente '||Pcliente;

                  if PMensajeError is not null then
                    Message('Error: '||PMensajeError);
                    BITACORA_CIERRES_ERROR (CONTROL.FECHA_PROCESO);
                  end if;
                  --
                  pTC1 := null;
                  pTC2 := null;

                  CG.CG_UTL.Lineas_del_Asiento(Pcod_empresa,
                                               Pcod_agencia,
                                               PAplic,
                                               PSubAplic,
                                               PTipoTrans,
                                               PSubTransCambio,
                                               PNumTransa,
                                               Pdescripcion,
                                               Pfecha,
                                               Pfecha,
                                               Pfecha,
                                               Pnumasiento,
                                               vCtaContable_Int,
                                               Pnueva_agencia,
                                               pMon_int_x_pagar,
                                               'S',
                                               'C',
                                               'N',
                                               pTC1,
                                               pTC2,
                                               variables.usuario,
                                               PMensajeError);
                    Vsequim := '2.1';
                    vMensaj := 'Error en asiento credito del CD pMon_int_x_pagar para el cliente '||Pcliente;

                  if PMensajeError is not null then
                    Message('Error: '||PMensajeError);
                    BITACORA_CIERRES_ERROR (CONTROL.FECHA_PROCESO);
                  end if;
          End If;
        End If;
        ---Intereses capitalizados retenidos
        If pMon_int_cap > 0 then
             Vsequim := '1.2';
                         --
             if vCodCartera_int is null then
               if vNumerror = '000183' then
                  Message('Error: '||vNumError);
                  BITACORA_CIERRES_ERROR (CONTROL.FECHA_PROCESO);
               else
                  Message('Error: '||vNumError);
                  BITACORA_CIERRES_ERROR (CONTROL.FECHA_PROCESO);
               end if;
             end if ;

             Vsequim := '1.3';

            --Si no es centralizada haz el asiento--
          Es_Centralizada ( vCtaContable_Int,
                            vCentral);--S o N
          If vCentral = 'N' Then
                  CG.CG_UTL.Lineas_del_Asiento(Pcod_empresa,
                                               Pcod_agencia,
                                               PAplic,
                                               PSubAplic,
                                               PTipoTrans,
                                               PSubTransCambio,
                                               PNumTransa,
                                               Pdescripcion,
                                               Pfecha,
                                               Pfecha,
                                               Pfecha,
                                               Pnumasiento,
                                               vCtaContable_Int,
                                               PTitular_agencia,
                                               pMon_int_cap,
                                               'S',
                                               'D',
                                               'N',
                                               pTC1,
                                               pTC2,
                                               variables.usuario,
                                               PMensajeError);
                    Vsequim := '2';
                    vMensaj := 'Error en asiento debito del CD pMon_int_cap para el cliente '||Pcliente;

                  if PMensajeError is not null then
                    Message('Error: '||PMensajeError);
                    BITACORA_CIERRES_ERROR (CONTROL.FECHA_PROCESO);
                  end if;
                  --
                  pTC1 := null;
                  pTC2 := null;

                  CG.CG_UTL.Lineas_del_Asiento(Pcod_empresa,
                                               Pcod_agencia,
                                               PAplic,
                                               PSubAplic,
                                               PTipoTrans,
                                               PSubTransCambio,
                                               PNumTransa,
                                               Pdescripcion,
                                               Pfecha,
                                               Pfecha,
                                               Pfecha,
                                               Pnumasiento,
                                               vCtaContable_Int,
                                               Pnueva_agencia,
                                               pMon_int_cap,
                                               'S',
                                               'C',
                                               'N',
                                               pTC1,
                                               pTC2,
                                               variables.usuario,
                                               PMensajeError);
                    Vsequim := '2.1';
                    vMensaj := 'Error en asiento credito del CD pMon_int_cap para el cliente '||Pcliente;

                  if PMensajeError is not null then
                    Message('Error: '||PMensajeError);
                    BITACORA_CIERRES_ERROR (CONTROL.FECHA_PROCESO);
                  end if;
          End If;
        End If;
        --Monto Total retenido sin intereses
        If pMontoCD > 0 then

              Es_Centralizada ( vctacontable,
                                vCentral);--S o N
              If vCentral = 'N' Then
                  CG.CG_UTL.Lineas_del_Asiento(Pcod_empresa,
                                               Pcod_agencia,
                                               PAplic,
                                               PSubAplic,
                                               PTipoTrans,
                                               PSubTransCambio,
                                               PNumTransa,
                                               Pdescripcion,
                                               Pfecha,
                                               Pfecha,
                                               Pfecha,
                                               Pnumasiento,
                                               vctacontable,
                                               PTitular_agencia,
                                               PMontoCD,
                                               'S',
                                               'D',
                                               'N',
                                               pTC1,
                                               pTC2,
                                               variables.usuario,
                                               PMensajeError);
                    Vsequim := '3';
                    vMensaj := 'Error en asiento debito del CD activo para el cliente '||Pcliente;

                  if PMensajeError is not null then
                    Message('Error: '||PMensajeError);
                    BITACORA_CIERRES_ERROR (CONTROL.FECHA_PROCESO);
                  end if;
                  --
                  pTC1 := null;
                  pTC2 := null;

                  CG.CG_UTL.Lineas_del_Asiento(Pcod_empresa,
                                               Pcod_agencia,
                                               PAplic,
                                               PSubAplic,
                                               PTipoTrans,
                                               PSubTransCambio,
                                               PNumTransa,
                                               Pdescripcion,
                                               Pfecha,
                                               Pfecha,
                                               Pfecha,
                                               Pnumasiento,
                                               vctacontable,
                                               Pnueva_agencia,--PTitular_agencia, --dfatule 31082007
                                               PMontoCD,
                                               'S',
                                               'C',
                                               'N',
                                               pTC1,
                                               pTC2,
                                               variables.usuario,
                                               PMensajeError);
                    Vsequim := '3.1';
                    vMensaj := 'Error en asiento credito del CD activo para el cliente '||Pcliente;

                  if PMensajeError is not null then
                    Message('Error: '||PMensajeError);
                    BITACORA_CIERRES_ERROR (CONTROL.FECHA_PROCESO);
                  end if;
              End If;
        End If;

    Exception
        When Others Then
            Message(Vsequim ||'-'|| vMensaj);
            BITACORA_CIERRES_ERROR (CONTROL.FECHA_PROCESO);
    END Asiento_Reclasificacion_Cd_Reten;

    PROCEDURE Asiento_Reclasificacion_Cd (Pcod_empresa in varchar2,
                                          Pcod_agencia in varchar2,
                                          PCod_Cartera in varchar2,
                                          PTip_Certificado in varchar2,
                                          Pcod_retencion in varchar2,
                                          Pestado in varchar2, --Estado del Certificado
                                          Pnumasiento in varchar2, --Num asiento caratula
                                          Pcuentacontable in varchar2, --Cuenta contable Orig
                                          Pnocredito in varchar2,
                                          PAplic in Varchar2,
                                          PSubAplic in Varchar2,
                                          PTipoTrans in varchar2,
                                          PSubTransCambio in varchar2,                                                    
                                          PNumTransa in varchar2,
                                          Pdescripcion in varchar2,
                                          Pfecha in date,
                                          Pcliente    in varchar2,
                                          PTitular_agencia in varchar2,
                                          Pnueva_agencia in varchar2,
                                          PMontoCD in number,
                                          pMontoOriginal in number,--ACollado.30/05/2023--FDS-1754-Agrego monto original
                                          pMon_int_x_pagar IN NUMBER,--DFATULE 10092007
                                          pPla_Dias                        IN NUMBER,--DFATULE 10092007
                                          pClasificacion            IN VARCHAR2,--DFATULE 10092007
                                          pCod_Moneda                    IN VARCHAR2,--DFATULE 10092007                                                                        
                                          pMon_int_cap in number,--ACollado.30/05/2023--FDS-1754-Agrego Intereses
                                          PTc1 in out number,
                                          PTc2 in out Number,
                                          PMensajeError in out varchar2
                                          ) IS
                                          
    --EFECTUA : Inicializacion de Variables Locales Adicionales                                     
    --HISTORIA: dfatule : 16/Mar/2007 : Redefinicion
    --Historia:    Dfatule    :    10/sep/2007    :    Incluir Asiento Reclasificacion Interes x Pagar                                                                        
    BCG_INTERFACE Exception;
    vctacontable        varchar2(25);
    vIndRet             varchar2(1);
    --
    Vsequim                            varchar2(10);
    vMensaj                            varchar2(100);
    vCentral                        varchar2(1);
    --DFATULE 10092007
      vCapitalizable      varchar2(1):= null;
      vCodCartera_Int   cd_certificado.cod_cartera%type:= null;  
      vCtaContable_Int     cd_certificado.cuenta_contable%type:= null;  
      vNumError            varchar2(6):= null; 
      vSqlCode             number:= null;   
      --rareyes 19/01/2023
      vCOD_SEC_CONTABLE      varchar2(10);
      ---
      --FDS-1754--ACollado.01/06/2023
      v_tc1 number:=null;
      v_tc2 number:=null;
      vMontoCD number:=nvl(pMontoOriginal,0);
      vMon_int_x_pagar NUMBER:=nvl(pMon_int_x_pagar,0)+nvl(pMon_int_cap,0);
      vMonInteresRetRestar number:=0;
      vMonPrincRetRestar number:=0;
      vOposicion varchar2(1):='N';
      Cursor cEmbargos is
        select ec.*,E.TIPO_EMBARGO
          from embargo_x_cuenta ec,
               embargo e
          where cod_sistema='CD'
            and estado= 'A'
            and ec.cod_empresa = e.cod_empresa
            and ec.num_embargo = e.num_embargo
            and ec.num_cuenta = Pnocredito;
            
    BEGIN 
         --FDS-1754--ACollado.01/06/2023
         For x in cEmbargos loop
            Asiento_Reclasificacion_CD_Reten (Pcod_empresa,
                                              Pcod_agencia,
                                              PCod_Cartera,
                                              PTip_Certificado,
                                              x.cod_retencion,
                                              Pestado,
                                              Pnumasiento,
                                              PAplic,
                                              PSubAplic,
                                              PTipoTrans,
                                              PSubTransCambio,
                                              PNumTransa,
                                              Pdescripcion,
                                              Pfecha,
                                              Pcliente,
                                              PTitular_agencia,
                                              Pnueva_agencia,
                                              nvl(x.sal_embargado,0) - (nvl(x.mon_int_ret_x_pagar,0) + nvl(x.mon_int_ret_cap,0)),
                                              x.mon_int_ret_x_pagar,
                                              x.mon_int_ret_cap,
                                              pPla_Dias,
                                              pClasificacion,
                                              pCod_Moneda,
                                              v_tc1,
                                              v_tc2,
                                              PMensajeError
                                              );
          vMonInteresRetRestar := vMonInteresRetRestar + (nvl(x.mon_int_ret_x_pagar,0) + nvl(x.mon_int_ret_cap,0));
          vMonPrincRetRestar := vMonPrincRetRestar + (nvl(x.sal_embargado,0) - (nvl(x.mon_int_ret_x_pagar,0) + nvl(x.mon_int_ret_cap,0)));
          If x.tipo_embargo = 'O' then
             vOposicion:='S';
          End If;
         End Loop;
         If vOposicion = 'S' then
          vMon_int_x_pagar:=0;
          vMontoCD:=0;
         Else
          vMontoCD :=vMontoCD - vMonPrincRetRestar;
          vMon_int_x_pagar := vMon_int_x_pagar - vMonInteresRetRestar;
         End If;
         --Si los montos normales son cero salgo del proceso.
         If vMontoCD <= 0 and vMon_int_x_pagar <= 0 then
            return;
         End If;
         --FDS-1754--ACollado.01/06/2023

        Vsequim := '1';
        vMensaj := 'Error ejecutando reclasificacion de CD para el cliente '||Pcliente;

          if pTip_Certificado in ('CV','CF','VCV','VCF') then
                 vCapitalizable := 'C';
          else
               vCapitalizable := 'N';
          end if;        
                  
                Vsequim := '1.1';
                vMensaj := 'Error buscando cartera de intereses del CD para el cliente '||Pcliente;
                        
                            
                     vCodCartera_Int := PCod_Cartera;--le asigno la cartera del cd
                             
             CD.CD_PROCS.cd_obt_cartera( Pcod_empresa, 
                                         vCtaContable_Int, 
                                         vCodCartera_Int,
                                         pPla_Dias,
                                         pClasificacion, 
                                         'N', -- indicador de Vencido (S), Vigente (N), Vista (V)
                                         pCod_Moneda, 
                                         pcliente,
                                         vCapitalizable,
                                         vNumError, 
                                         vSqlcode,
                                         'I' -- cta de intereses activos.
                                         ); 
                                                                         
                 if vNumError is not null then
                     Message('Error: '||vNumError); 
                     BITACORA_CIERRES_ERROR (CONTROL.FECHA_PROCESO);
                     --utilitarios.mensaje(vNumError, variables.codidioma, 'CD');
                     --raise form_trigger_failure ;
                 end if;    
                         
                 Vsequim := '1.2';
                         --                 
                 if vCodCartera_int is null then 
                   if vNumerror = '000183' then  
                      Message('Error: '||vNumError);
                      BITACORA_CIERRES_ERROR (CONTROL.FECHA_PROCESO);
                      --utilitarios.mensaje_error (vNumError, :variables.codidioma, 'CD', vSqlcode);
                      --raise form_trigger_failure ;
                   else
                      Message('Error: '||vNumError);
                      BITACORA_CIERRES_ERROR (CONTROL.FECHA_PROCESO);
                      --utilitarios.mensaje(vNumerror, :variables.codidioma, 'CD');
                      --raise form_trigger_failure ;
                   end if;   
                 end if ;    
                         
                                        Vsequim := '1.3';

      If  Pestado = 'A' Then

            
            --Si no es centralizada haz el asiento--dfatule 04092007
          Es_Centralizada ( Pcuentacontable,
                                                vCentral);--S o N
          If vCentral = 'N' Then    --dfatule 04092007  
                        --DFATULE 10092007 : Inicio
            
                     if vMon_int_x_pagar > 0 then--pMon_int_x_pagar > 0 then --FDS-1754--ACollado.01/06/2023

                                        CG.CG_UTL.Lineas_del_Asiento(Pcod_empresa, 
                                                           Pcod_agencia,
                                                           PAplic, 
                                                           PSubAplic, 
                                                           PTipoTrans, 
                                                           PSubTransCambio,
                                                           PNumTransa,                            
                                                           Pdescripcion, 
                                                           Pfecha, 
                                                           Pfecha, 
                                                           Pfecha, 
                                                           Pnumasiento, 
                                                           vCtaContable_Int, 
                                                           PTitular_agencia,
                                                           vMon_int_x_pagar,--pMon_int_x_pagar, --FDS-1754--ACollado.01/06/2023
                                                           'S', 
                                                           'D', 
                                                           'N', 
                                                           pTC1, 
                                                           pTC2,
                                                           variables.usuario, 
                                                           PMensajeError);
                                            Vsequim := '2';          
                                            vMensaj := 'Error en asiento debito del CD pMon_int_x_pagar para el cliente '||Pcliente;

                                          if PMensajeError is not null then
                                            Message('Error: '||PMensajeError);
                                            BITACORA_CIERRES_ERROR (CONTROL.FECHA_PROCESO);
                                            --UTILITARIOS.mensaje_error(PMensajeError, :variables.CodIdioma, 'CD', SQLCODE/*DBMS_ERROR_CODE*/);
                                            --raise form_trigger_failure;
                                          end if;                        
                                          --
                                          pTC1 := null;            
                                          pTC2 := null;            
                                                                                
                                          CG.CG_UTL.Lineas_del_Asiento(Pcod_empresa,
                                                               Pcod_agencia,
                                                               PAplic, 
                                                               PSubAplic, 
                                                               PTipoTrans, 
                                                               PSubTransCambio,
                                                               PNumTransa, 
                                                               Pdescripcion, 
                                                               Pfecha, 
                                                               Pfecha, 
                                                               Pfecha, 
                                                               Pnumasiento, 
                                                               vCtaContable_Int, 
                                                               Pnueva_agencia,
                                                               vMon_int_x_pagar, --pMon_int_x_pagar, --FDS-1754--ACollado.01/06/2023
                                                               'S', 
                                                               'C', 
                                                               'N', 
                                                               pTC1, 
                                                               pTC2,
                                                               variables.usuario, 
                                                               PMensajeError);
                                            Vsequim := '2.1';    
                                            vMensaj := 'Error en asiento credito del CD pMon_int_x_pagar para el cliente '||Pcliente;
                                                           
                                          if PMensajeError is not null then
                                            Message('Error: '||PMensajeError);
                                            BITACORA_CIERRES_ERROR (CONTROL.FECHA_PROCESO);
                                            --UTILITARIOS.mensaje_error(PMensajeError, :variables.CodIdioma, 'CD', SQLCODE/*DBMS_ERROR_CODE*/);
                                            --raise form_trigger_failure;
                                          end if;                     
                     End If;--pMon_int_x_pagar > 0 
                    --DFATULE 10092007 : Fin
              If vMontoCD > 0 then--FDS-1754--ACollado.01/06/2023
                CG.CG_UTL.Lineas_del_Asiento(Pcod_empresa, 
                                   Pcod_agencia,
                                   PAplic, 
                                   PSubAplic, 
                                   PTipoTrans, 
                                   PSubTransCambio,
                                   PNumTransa,                            
                                   Pdescripcion, 
                                   Pfecha, 
                                   Pfecha, 
                                   Pfecha, 
                                   Pnumasiento, 
                                   Pcuentacontable, 
                                   PTitular_agencia,
                                   vMontoCD,--PMontoCD, --FDS-1754--ACollado.01/06/2023
                                   'S', 
                                   'D', 
                                   'N', 
                                   pTC1, 
                                   pTC2,
                                   variables.usuario, 
                                   PMensajeError);
                    Vsequim := '3';          
                    vMensaj := 'Error en asiento debito del CD activo para el cliente '||Pcliente;
                                   
                  if PMensajeError is not null then
                    Message('Error: '||PMensajeError);
                    BITACORA_CIERRES_ERROR (CONTROL.FECHA_PROCESO);
                    --UTILITARIOS.mensaje_error(PMensajeError, :variables.CodIdioma, 'CD', SQLCODE/*DBMS_ERROR_CODE*/);
                    --raise form_trigger_failure;
                  end if;                        
                  --
                  pTC1 := null;            
                  pTC2 := null;            
                                                        
                  CG.CG_UTL.Lineas_del_Asiento(Pcod_empresa,
                                                       Pcod_agencia,
                                       PAplic, 
                                       PSubAplic, 
                                       PTipoTrans, 
                                       PSubTransCambio,
                                       PNumTransa, 
                                       Pdescripcion, 
                                       Pfecha, 
                                       Pfecha, 
                                       Pfecha, 
                                       Pnumasiento, 
                                       Pcuentacontable, 
                                       Pnueva_agencia,--PTitular_agencia, --dfatule 31082007
                                       vMontoCD,--PMontoCD, --FDS-1754--ACollado.01/06/2023
                                       'S', 
                                       'C', 
                                       'N', 
                                       pTC1, 
                                       pTC2,
                                       variables.usuario, 
                                       PMensajeError);
                    Vsequim := '3.1';    
                    vMensaj := 'Error en asiento credito del CD activo para el cliente '||Pcliente;
                                   
                  if PMensajeError is not null then
                    Message('Error: '||PMensajeError);
                    BITACORA_CIERRES_ERROR (CONTROL.FECHA_PROCESO);
                    --UTILITARIOS.mensaje_error(PMensajeError, :variables.CodIdioma, 'CD', SQLCODE/*DBMS_ERROR_CODE*/);
                    --raise form_trigger_failure;
                  end if;
                End If;--FDS-1754--ACollado.01/06/2023
          End If;--Pestado = 'A' Si no es centralizada haz el asiento--dfatule 04092007
          
      ElsIf Pestado = 'R' Then

      ----rareyes 19/01/2023
begin
 select COD_SEC_CONTABLE
  into vCOD_SEC_CONTABLE
  from personas
 where COD_PERSONA = Pcliente;

 EXCEPTION
 WHEN OTHERS THEN
  vCOD_SEC_CONTABLE := '0';

end;
      ----rareyes 19/01/2023


                CD_CAMBIO_CARTERA(Pcod_empresa,
                                  Pcod_retencion,
                                  PCod_Cartera,
                                  PTip_Certificado,
                                  vCOD_SEC_CONTABLE, --Pcliente,   --rareyes 19/01/20223 se coloca el sector contable y se quita el tipo de cliente el cual es un dato erroneo
                                   vIndRet,
                                   vctacontable,
                                   vctacontable_int,--DFATULE 10092007
                                   vCapitalizable);--DFATULE 10092007 --: Forma Pago Int
                Vsequim := '4';
                vMensaj := 'Error buscando cambio cartera del CD Retenido para el cliente '||Pcliente;

              if not valida_cartera_dest(Pcuentacontable, vctacontable) then
                Message('Error: '||'000409');
                BITACORA_CIERRES_ERROR (CONTROL.FECHA_PROCESO);
                --utilitarios.mensaje('000409', :variables.codIdioma, 'CD');
                --raise form_trigger_failure;
              end if;
                --dfatule 10092007: Ini
              if not valida_cartera_dest(vCtaContable_Int, vctacontable_int) then
                Message('Error: '||'000409');
                BITACORA_CIERRES_ERROR (CONTROL.FECHA_PROCESO);
                --utilitarios.mensaje('000409', :variables.codIdioma, 'CD');
                --raise form_trigger_failure;
              end if;        
                --dfatule 10092007: Fin
            
                --Si no es centralizada haz el asiento--dfatule 04092007
              Es_Centralizada ( vctacontable,
                                                    vCentral);--S o N
              If vCentral = 'N' Then    --dfatule 04092007  
                  
                  --DFATULE 10092007 : Inicio
                    if vMon_int_x_pagar > 0 then--pMon_int_x_pagar > 0 then--FDS-1754--ACollado.01/06/2023

                            CG.CG_UTL.Lineas_del_Asiento(Pcod_empresa, 
                                                 Pcod_agencia,
                                                 PAplic, 
                                                 PSubAplic, 
                                                 PTipoTrans, 
                                                 PSubTransCambio,
                                                 PNumTransa, 
                                                 Pdescripcion, 
                                                 Pfecha, 
                                                 Pfecha, 
                                                 Pfecha, 
                                                 Pnumasiento, 
                                                 vctacontable_int, 
                                                 PTitular_agencia,
                                                  vMon_int_x_pagar,--pMon_int_x_pagar, --FDS-1754--ACollado.01/06/2023
                                                 'S', 
                                                 'D', 
                                                 'N', 
                                                 v_tc1,--pTC1,
                                                 v_tc2,--pTC2,
                                                 variables.usuario, 
                                                 PMensajeError);
                            Vsequim := '5';
                            vMensaj := 'Error en asiento debito del CD retenido pMon_int_x_pagar para el cliente '||Pcliente;
                                                     
                          if PMensajeError is not null then
                            Message('Error: '||PMensajeError);
                            BITACORA_CIERRES_ERROR (CONTROL.FECHA_PROCESO);
                            --UTILITARIOS.mensaje_error(PMensajeError, :variables.CodIdioma, 'CD', SQLCODE/*DBMS_ERROR_CODE*/);
                            --raise form_trigger_failure;
                          end if;
                          --
                          pTC1 := null;
                          pTC2 := null;
                      
                    
                          CG.CG_UTL.Lineas_del_Asiento(Pcod_empresa,
                                               Pcod_agencia,
                                               PAplic, 
                                               PSubAplic, 
                                               PTipoTrans, 
                                               PSubTransCambio,
                                               PNumTransa, 
                                               Pdescripcion, 
                                               Pfecha, 
                                               Pfecha, 
                                               Pfecha, 
                                               Pnumasiento, 
                                               vctacontable_int, 
                                               Pnueva_agencia,
                                               vMon_int_x_pagar,--pMon_int_x_pagar, --FDS-1754--ACollado.01/06/2023
                                               'S', 
                                               'C', 
                                               'N', 
                                               v_tc1,--pTC1,
                                               v_tc2,--pTC2,
                                               variables.usuario, 
                                               PMensajeError);
                                               
                            Vsequim := '5.1';
                            vMensaj := 'Error en asiento credito del CD retenido pMon_int_x_pagar para el cliente '||Pcliente;
                    
                          if PMensajeError is not null then
                            Message('Error: '||PMensajeError);
                            BITACORA_CIERRES_ERROR (CONTROL.FECHA_PROCESO);                             
                            --UTILITARIOS.mensaje_error(PMensajeError, :variables.CodIdioma, 'CD', SQLCODE/*DBMS_ERROR_CODE*/);
                            --raise form_trigger_failure;
                          end if;

                    End If;--pMon_int_x_pagar > 0 
                    --DFATULE 10092007 : Fin
                   If vmontoCD > 0 then--FDS-1754--ACollado.01/06/2023
                    CG.CG_UTL.Lineas_del_Asiento(Pcod_empresa, 
                                         Pcod_agencia,
                                         PAplic, 
                                         PSubAplic, 
                                         PTipoTrans, 
                                         PSubTransCambio,
                                         PNumTransa, 
                                         Pdescripcion, 
                                         Pfecha, 
                                         Pfecha, 
                                         Pfecha, 
                                         Pnumasiento, 
                                         vctacontable, 
                                         PTitular_agencia,
                                         vMontoCD,--PMontoCD, --FDS-1754--ACollado.01/06/2023
                                         'S', 
                                         'D', 
                                         'N', 
                                         pTC1, 
                                         pTC2,
                                         variables.usuario, 
                                         PMensajeError);
                    Vsequim := '6';
                    vMensaj := 'Error en asiento debito del CD retenido para el cliente '||Pcliente;
                                             
                  if PMensajeError is not null then
                    Message('Error: '||PMensajeError);
                    BITACORA_CIERRES_ERROR (CONTROL.FECHA_PROCESO);
                    --UTILITARIOS.mensaje_error(PMensajeError, :variables.CodIdioma, 'CD', SQLCODE/*DBMS_ERROR_CODE*/);
                    --raise form_trigger_failure;
                  end if;
                  --
                  pTC1 := null;
                  pTC2 := null;
              
            
                  CG.CG_UTL.Lineas_del_Asiento(Pcod_empresa,
                                       Pcod_agencia,
                                       PAplic, 
                                       PSubAplic, 
                                       PTipoTrans, 
                                       PSubTransCambio,
                                       PNumTransa, 
                                       Pdescripcion, 
                                       Pfecha, 
                                       Pfecha, 
                                       Pfecha, 
                                       Pnumasiento, 
                                       vctacontable, 
                                       Pnueva_agencia,--PTitular_agencia,--dfatule 31082007
                                       vMontoCD,--PMontoCD, --FDS-1754--ACollado.01/06/2023
                                       'S', 
                                       'C', 
                                       'N', 
                                       pTC1, 
                                       pTC2,
                                       variables.usuario, 
                                       PMensajeError);
                                       
                    Vsequim := '6.1';
                    vMensaj := 'Error en asiento credito del CD retenido para el cliente '||Pcliente;
            
                  if PMensajeError is not null then
                    Message('Error: '||PMensajeError);
                    BITACORA_CIERRES_ERROR (CONTROL.FECHA_PROCESO);
                    --UTILITARIOS.mensaje_error(PMensajeError, :variables.CodIdioma, 'CD', SQLCODE/*DBMS_ERROR_CODE*/);
                    --raise form_trigger_failure;
                  end if;
                End if; --FDS-1754--ACollado.01/06/2023
              End If;--Pestado = 'R' Si no es centralizada haz el asiento--dfatule 04092007
      
      End If;          

    Exception
        When Others Then
            Message(Vsequim ||'-'|| vMensaj);
            BITACORA_CIERRES_ERROR (CONTROL.FECHA_PROCESO);
            --Set_Application_Property(Cursor_style, 'DEFAULT');
            --exit_form(no_commit, no_validate);                        
                     
    END Asiento_Reclasificacion_Cd;
    
    PROCEDURE Genera_Contabilizacion_CxL(
                                            pCodOpcion           In  Varchar2,
                                            pcodsistema          in varchar2,
                                            PAplic               in Varchar2,
                                            PSubAplic            in Varchar2,
                                            PTipoTrans           in varchar2,
                                            PSubTransCambio      in varchar2,                                                    
                                            PNumTransa           in varchar2,
                                            Pdescripcion         in varchar2,
                                            pfecSistema          in varchar2,
                                            PSaldoActual         in number,
                                            PTitular_agencia     in varchar2,
                                            Pnueva_agencia       in varchar2,
                                            pcodmoneda           in varchar2,
                                            pmonedabase          in varchar2,
                                            pAsiento             IN VARCHAR2
                                            ) IS

    --EFECTUA : Inicializacion de Variables Locales Adicionales
    --HISTORIA: dfatule : 16/Mar/2007 : redefinicion
    -- 
    -- Declaracion de Variables de Trabajo.
    -- 
       vTC1               Number(18,2)         ;
       vTC2                  Number(18,2)         ;
         vDiferencia        Number   := 0        ;
       vTipPartida        Varchar2(1)          ;
       vTipContraPartida  Varchar2(1)          ;
         vCuentaContable    Varchar2(25)         ;
       vAbreviatura       Varchar2(20)  := Null;
       vDescripcionContra Varchar2(100) := Null;
       vMsjError             Varchar2(250) := Null;
       vCodError             Varchar2(250) := Null;
       Vsequim                        varchar2(10);
         vMensaj                        varchar2(100);        
         vCentral                        Varchar2(1);       
    --
    BEGIN
            -- 
            Vsequim := '0';
            vMensaj := 'Error contabilizando CxL ';
            
            -- Se Determina el Concepto de la Transaccion en Parametros
            -- para Identificar el Codigo de la Transaccion a Realizar.
            -- 
            if pCodOpcion = 'TRANSREGCOB' then
                vAbreviatura       := 'CTAXCOB'    ;
              vTipPartida        := 'C'          ;
              vTipContraPartida  := 'D'          ;
            --      vTipPartida        := 'D'          ; 
            --      vTipContraPartida  := 'C'          ;
            --        vDescripcion       := 'GENERACION DE CUENTA POR LIQUIDAR (CXC)';
            --      vDescripcionContra := 'REGISTRO DE CUENTA POR LIQUIDAR (CXC)'; 
            elsif pCodOpcion =  'TRANSREGPAG' then
                vAbreviatura       := 'CTAXPAG'    ;
              vTipPartida        := 'D'          ;
              vTipContraPartida  := 'C'          ;
            --      vTipPartida        := 'C'          ;
            --      vTipContraPartida  := 'D'          ;
            --        vDescripcion       := 'GENERACION DE CUENTA POR LIQUIDAR (CXP)';
            --      vDescripcionContra := 'REGISTRO DE CUENTA POR LIQUIDAR (CXP)'; 
            end if;
            
                Vsequim := '1';
            vMensaj := 'Error contabilizando CxL despues de elegir opcion de partidas';    
            -- 
            -- Busca la Cuenta Contable del Parametro por Moneda en CL_PARAM_MONEDA.
            -- 
            vCuentaContable := cl_procs.Param_Monedas_BCL(variables.codEmpresa, 
                                                pcodsistema                  ,
                                                pcodmoneda                   , 
                                                vAbreviatura,
                                                vCodError,
                                                vMsjError);
            vsequim := '2';
                                                
            if vMsjError is not Null then
              Mensaje('02-ContabilizaCxL: '||vMsjError);
              BITACORA_CIERRES_ERROR (CONTROL.FECHA_PROCESO);
              --raise form_trigger_failure;
            end if;
            vsequim := '3';

            --Si no es centralizada haz el asiento--dfatule 04092007
            Es_Centralizada ( vCuentaContable,
                                            vCentral);--S o N
            If vCentral = 'N' Then    --dfatule 04092007 

                    -- 
                    -- Se Genera la Linea del Asiento Contable con la Cuenta Parametrizada.
                    -- 
                    vTC1 := null;
                    vTC2 := null;
                    CG.CG_UTL.Lineas_Del_Asiento(variables.codEmpresa ,
                                                   variables.codAgencia ,
                                                   PAplic                                ,
                                                   PSubAplic                            ,
                                                   PTipoTrans                        ,
                                                   PSubTransCambio                ,                                                    
                                                   PNumTransa                        ,
                                                   Pdescripcion                    ,
                                                   pfecSistema                     , 
                                                   pfecSistema                     ,
                                                   pfecSistema                     ,
                                                   pAsiento                   ,
                                                   vCuentaContable       ,
                                                   PTitular_agencia             ,
                                                   PSaldoActual                    ,
                                                   'S'                   ,
                                                   vTipPartida           ,
                                                   'N'                   ,
                                                   vTC1                  ,
                                                   vTC2                  ,
                                                   variables.Usuario    ,
                                                   vMsjError);
                    vsequim := '4';
                                                            
                    if vMsjError is not Null then
                      Mensaje('05-ContabilizaCxL: '||vMsjError);
                      BITACORA_CIERRES_ERROR (CONTROL.FECHA_PROCESO);
                      --raise form_trigger_failure;
                    end if;
                    vsequim := '5';
                    
                    -- 
                    -- Se Genera la Linea del Asiento Contable con la Cuenta del Motivo.
                    -- 
                    vTC1 := null;
                    vTC2 := null;
                    CG.CG_UTL.Lineas_Del_Asiento(variables.codEmpresa ,
                                                   variables.codAgencia ,
                                                   PAplic                                ,
                                                   PSubAplic                            ,
                                                   PTipoTrans                        ,
                                                   PSubTransCambio                ,                                                    
                                                   PNumTransa                        ,
                                                   Pdescripcion                    ,
                                                   pfecSistema                     ,
                                                   pfecSistema                     ,
                                                   pfecSistema                     ,
                                                   pAsiento                   ,
                                                   vCuentaContable       ,
                                                   Pnueva_agencia                 ,
                                                   PSaldoActual                    ,
                                                   'S'                   ,
                                                   vTipContrapartida     ,
                                                   'N'                   ,
                                                   vTC1                  ,
                                                   vTC2                  ,
                                                   variables.Usuario    ,
                                                   vMsjError);
                    vsequim := '6';
                                                            
                    if vMsjError is not Null then
                      Mensaje('08-ContabilizaCxL '||vMsjError);
                      BITACORA_CIERRES_ERROR (CONTROL.FECHA_PROCESO);
                      --raise form_trigger_failure;
                    end if;
                    vsequim := '7';

            End If;--Si no es centralizada haz el asiento--dfatule 04092007

    EXCEPTION
        when others then
             --Set_Application_Property(Cursor_style, 'DEFAULT');        
             Message(Vsequim ||'-'|| vMensaj);
             BITACORA_CIERRES_ERROR (CONTROL.FECHA_PROCESO);
             --exit_form(no_commit, no_validate);                        
    END Genera_Contabilizacion_CxL;
    
    PROCEDURE Asiento_Reclasificacion_CC (Pcod_empresa in varchar2,
                                         Pcod_agencia in varchar2,
                                         Pcod_producto in varchar2,
                                         Pestado in varchar2,
                                         pNumAsiento in varchar2,
                                         Pnocuenta in varchar2,
                                         PAplic in Varchar2,
                                         PSubAplic in Varchar2,
                                         PTipoTrans in varchar2,
                                         PSubTransCambio in varchar2,
                                         PNumTransa in varchar2,
                                         Pdescripcion in varchar2,
                                         Pfecha in date,
                                         Pcliente    in varchar2,
                                         PTitular_agencia in varchar2,
                                         Pnueva_agencia in varchar2,
                                         PSaldoCC in number,
                                         PSOBREG_MENOS_48H in number,
                                         PSOBREG_MAS_48H in number,
                                         PInteresesCC in number,--ACollado30/05/2023-CambioCentrodeCostos| [FDS-1754] Centro de Costos
                                         pEmbargado in number,--ACollado30/05/2023-CambioCentrodeCostos| [FDS-1754] Centro de Costos
                                         PTc1 in out number,
                                         PTc2 in out Number,
                                         PMensajeError in out varchar2
                                         ) IS
    --EFECTUA : Inicializacion de Variables Locales Adicionales                                     
    --HISTORIA: dfatule : 16/Mar/2007 : redefinicion    
    --Historia: dfatule : 10/Sep/2007    : Se analizo la reclasificacion de Intereses y se detecto que no es necesario hacer 
    --asiento de reclasificacion para CC, ya que no se hace asiento diario de los interes por Pagar. 
    --Cuando se haga haciendo diario de los intereses por pagar, entonces se debera reclasificar a la cuenta 511 
    --de Gastos en la plantilla 27.
        vMensajeError             varchar2(100);
        vCtaPrincipalInactivo varchar2(25);
        vCtaPrincipal                    varchar2(25);
            vCtaAdelMenos48         varchar2(25);
            vCtaAdelMas48                varchar2(25);
            Vsequim                                varchar2(10);
            vMensaj                                varchar2(1000);    
            vCentral                            varchar2(1);
        --ACollado30/05/2023-nuevas variables| [FDS-1754] Centro de Costos
        vCtaInteresesN cg.cg_catalogo_x_empresa.cuenta_contable%type;
        vCentralInt    varchar2(1);
        vSectorContable PERSONAS.COD_SEC_CONTABLE%type :=  Sector_Contable_Cliente(Pcod_empresa,Pcliente);
        vCtaDebitoEmb CG.CG_CODIFIC_DETALLE.CONCEPTO%type;
        vCtaIntCreEmb CG.CG_CODIFIC_DETALLE.CONCEPTO%type;
        vCtaIntInaEmb CG.CG_CODIFIC_DETALLE.CONCEPTO%type;
        vIntxPagEmb number(16,2);
       Cursor cIntEmbargado is
       select sum(int_por_pagar) int_por_pagar_emb
        from cuenta_efectivo ce
       where ce.cod_empresa = Pcod_empresa
         and ce.ind_estado = '6'
         and ce.num_cuenta= pnoCuenta
         and exists ( select distinct(c.num_cuenta)
                        from pa.embargo e,
                             pa.embargo_x_cuenta c
                       where e.cod_empresa = 1
                         and e.estado = 'A'
                         and e.tipo_embargo = 'O'
                         and e.cod_empresa = c.cod_empresa
                         and e.num_embargo = c.num_embargo
                         and c.num_cuenta = ce.num_cuenta
                         and ce.fecha_inactiva < e.fec_inicio                      
                      --IPF-4626--Agrego fallecidas
                      union
                      select distinct(c.num_cuenta)
                        from pa.fallecido e,
                             pa.fallecido_x_cuenta c
                       where e.cod_empresa = 1
                         and e.estado = 'A'
                         and e.cod_empresa = c.cod_empresa
                         and e.num_fallecido = c.num_fallecido
                         and c.num_cuenta = ce.num_cuenta
                         and ce.fecha_inactiva < e.fec_inicio);
    BEGIN
        Vsequim    := '0';
        vMensaj    := 'Error entrando a reclasificacion CC para el cliente '||Pcliente;
              -- Para que busque la cuenta contable por sector
              CG_UTL.Cuenta_Contable_Sector(variables.CodEmpresa,
                                    'BCC',
                                    Pcod_producto,
                                    'PRINCIPAL_INACTIVO',
                                    Pcliente,
                                    vCtaPrincipalInactivo,
                                    vMensajeError);
                    
              Vsequim    := '0.1';
              
              --
              if  ( vMensajeError is not null ) then              
                  pMensajeError := vMensajeError;
                    return;
              end if;
                    Vsequim    := '0.2';
              
              -- Para que busque la cuenta contable por sector
              CG_UTL.Cuenta_Contable_Sector(variables.CodEmpresa,
                                    'BCC',
                                    Pcod_producto,
                                    'PRINCIPAL',
                                    Pcliente,
                                    vCtaPrincipal,
                                    vMensajeError);
              --
                    Vsequim    := '0.3';
              
              if  ( vMensajeError is not null ) then
                  pMensajeError := vMensajeError;
                    return;
              end if;
                    Vsequim    := '0.4';
              
              -- Para que las Tasas de Cambio las busque
              PTc1 := null;
              PTc2 := null;
              
            If Pestado not in ('0','2','6') Then --Asiento a Cuentas Activas
                --ACollado-30/05/2023--Manejo el estado Abandonadas| [FDS-1754] Centro de Costos
                If Pestado = '7' then
                  CG_UTL.Cuenta_Contable_Sector(variables.CodEmpresa,
                                                'BCC',
                                                Pcod_producto,
                                                'PRINCIPAL_ABANDONO',
                                                Pcliente,
                                                vCtaPrincipal,
                                                vMensajeError);
                  if ( vMensajeError is not null ) then
                      pMensajeError := vMensajeError;
                        return;
                  end if;
                End If;
                
                        --Si no es centralizada haz el asiento--dfatule 04092007
                Es_Centralizada ( vCtaPrincipal,
                                                            vCentral);--S o N
                If vCentral = 'N' Then    --dfatule 04092007                
                    
                                    Vsequim    := '1';
                                    vMensaj    := 'Error Asiento a Cuentas Activas reclasificacion CC para el cliente '||Pcliente;            
                          CG_UTL.Lineas_del_Asiento ( Pcod_empresa,
                                                     Pcod_Agencia,
                                                      PAplic,
                                                     PSubAplic,
                                                     PTipoTrans,
                                                     PSubTransCambio,
                                                     PNumTransa,
                                                     Pdescripcion,
                                                     Pfecha,
                                                     Pfecha,
                                                     Pfecha,
                                                     Pnumasiento,
                                                     vCtaPrincipal,
                                                      PTitular_agencia,
                                                      PSaldoCC,
                                                         'S',
                                                         'D',
                                                                  'N',
                                                      PTc1,
                                                      PTc2,
                                                      variables.Usuario,
                                                      vMensajeError
                                                                  );
                                    Vsequim    := '1.1';
                                          
                          if ( vMensajeError is not null ) then              
                              pMensajeError := vMensajeError;
                                return;
                          end if;
                          --
                                    Vsequim    := '1.2';
                          
                          CG_UTL.Lineas_del_Asiento (Pcod_empresa,
                                                                            Pcod_Agencia,
                                                                            PAplic,
                                                                            PSubAplic,
                                                                            PTipoTrans,
                                                                            PSubTransCambio,
                                                                            PNumTransa,
                                                                            Pdescripcion,
                                                                            Pfecha,
                                                                            Pfecha,
                                                                            Pfecha,
                                                                            Pnumasiento,
                                                                            vCtaPrincipal,
                                                                            Pnueva_agencia,
                                                                            PSaldoCC,
                                                                            'S',
                                                                            'C',
                                                                            'N',
                                                                            PTc1,
                                                                            PTc2,
                                                                            variables.Usuario,
                                                                            vMensajeError
                                                                            );
                                    Vsequim    := '1.3';
                                    
                          if ( vMensajeError is not null ) then
                              pMensajeError := vMensajeError;
                                return;
                          end if;              
                                    Vsequim    := '1.4';

                                                If Pestado not in ('0', '2') Then  --Asiento a Cuentas SobreGiros
                                                
                                                Vsequim    := '2';
                                                vMensaj    := 'Error Asiento a Cuentas SobreGiros reclasificacion CC para el cliente '||Pcliente;                                
                        
                                                -- Para que las Tasas de Cambio las busque
                                                PTc1 := null;
                                                PTc2 := null;
                                                    -- Contabiliza Adelantos Menos 48 Horas
                                                  --
                                                  If PSOBREG_MENOS_48H > 0 then
                                                      --
                                                    Vsequim    := '2.1';
                                                    vMensaj    := 'Error Asiento a Cuentas SobreGiros ADELANTO_HASTA_48_HORAS reclasificacion CC para el cliente '||Pcliente;                                
                                                    
                                                      CG_UTL.Cuenta_Contable_Sector(Pcod_empresa,
                                                                             'BCC',
                                                                             Pcod_producto,
                                                                             'ADELANTO_HASTA_48_HORAS',
                                                                             Pcliente,
                                                                             vCtaAdelMenos48,
                                                                             vMensajeError);
                                                      
                                                      if  ( vMensajeError is not null ) then
                                                          pMensajeError := vMensajeError;
                                                          return;
                                                      end if;
                                                      
                                                            Vsequim    := '2.2';
                                                            
                                                            --Si no es centralizada haz el asiento--dfatule 04092007
                                                    Es_Centralizada ( vCtaAdelMenos48,
                                                                                                vCentral);--S o N
                                                    If vCentral = 'N' Then    --dfatule 04092007                                                                                            
                                                                                                                            
                                                              CG_UTL.Lineas_del_Asiento (
                                                                                     to_number(pCod_Empresa),
                                                                                     to_number(pCod_Agencia),
                                                                                     pAplic                   ,
                                                                                     pSubAplic        ,
                                                                                     pTipoTrans             ,
                                                                                     pSubTransCambio        ,
                                                                                     pNumTransa                         ,
                                                                                     pdescripcion           ,
                                                                                     pfecha            ,
                                                                                     pfecha            ,
                                                                                     pfecha            ,
                                                                                     pNumAsiento            ,
                                                                                     vCtaAdelMenos48          ,
                                                                                     PTitular_agencia       ,
                                                                                     PSOBREG_MENOS_48H            ,
                                                                                     'S'                                        ,
                                                                                     'D'                            ,
                                                                                              'N'                                       ,
                                                                                     PTc1                                ,
                                                                                     PTc2                   ,
                                                                                     variables.Usuario     ,
                                                                                     vMensajeError
                                                                                                      );
                                                                                                          
                                                                  
                                                              if ( vMensajeError is not null )  then
                                                                  pMensajeError := vMensajeError;
                                                                  return;
                                                                  
                                                              end if;
                                                              --
                                                              
                                                                    Vsequim    := '2.3';
                                                              
                                                              CG_UTL.Lineas_del_Asiento (
                                                                                     to_number(pCod_Empresa),
                                                                                     to_number(pCod_Agencia),
                                                                                     pAplic                   ,
                                                                                     pSubAplic                    ,
                                                                                     pTipoTrans             ,
                                                                                     pSubTransCambio        ,
                                                                                     pNumTransa                         ,
                                                                                     pdescripcion           ,
                                                                                     pfecha                                    ,
                                                                                     pfecha                                    ,
                                                                                     pfecha                                    ,
                                                                                     pNumAsiento            ,
                                                                                     vCtaPrincipal            ,
                                                                                     Pnueva_agencia         ,
                                                                                     PSOBREG_MENOS_48H            ,
                                                                                     'S'                                        ,
                                                                                     'C'                            ,
                                                                                              'N'                                       ,
                                                                                     PTc1                                ,
                                                                                     PTc2                   ,
                                                                                     variables.Usuario     ,
                                                                                     vMensajeError
                                                                                                      );
                                                                         Vsequim    := '2.4';
                                                              if ( vMensajeError is not null ) then
                                                                  pMensajeError := vMensajeError;
                                                                  return;
                                                              end if;
                                                              
                                                    End If; --Fin si no es centralizada Pestado not in ('0','2','6')--dfatule 04092007 PSOBREG_MENOS_48H > 0
                                                    
                                                  end if;--PSOBREG_MENOS_48H > 0
                                                     
                                                     Vsequim    := '2.5';
                                                  -- Contabiliza Adelantos Mas 48 Horas
                                                  --
                                                  if PSOBREG_MAS_48H > 0  then
                        
                                                    vMensaj    := 'Error Asiento a Cuentas SobreGiros ADELANTO_MAYOR_48_HORAS reclasificacion CC para el cliente '||Pcliente;                                
                                                      
                                                      CG_UTL.Cuenta_Contable_Sector(pCod_Empresa,
                                                                             'BCC',
                                                                             PCod_Producto,
                                                                             'ADELANTO_MAYOR_48_HORAS',
                                                                             Pcliente,
                                                                             vCtaAdelMas48,
                                                                             vMensajeError);
                                                      --
                                                             Vsequim    := '2.6';
                                                      
                                                      if  ( vMensajeError is not null ) then                                  
                                                          pMensajeError := vMensajeError;
                                                          return;
                                                      end if;
                                                             Vsequim    := '2.7';
                                                            --
                                                            
                                                            --Si no es centralizada haz el asiento--dfatule 04092007
                                                    Es_Centralizada ( vCtaAdelMas48,
                                                                                                vCentral);--S o N
                                                    If vCentral = 'N' Then    --dfatule 04092007                                                                                            
                                                                                                                
                                                              CG_UTL.Lineas_del_Asiento (
                                                                                     to_number(pCod_Empresa)    ,
                                                                                     to_number(PCod_Agencia) ,
                                                                                     pAplic                 ,
                                                                                     pSubAplic                    ,
                                                                                     pTipoTrans             ,
                                                                                     pSubTransCambio        ,
                                                                                     pNumTransa                         ,
                                                                                     pdescripcion           ,
                                                                                     pfecha            ,
                                                                                     pfecha            ,
                                                                                     pfecha            ,
                                                                                     pNumAsiento         ,
                                                                                     vCtaAdelMas48            ,
                                                                                     PTitular_agencia   ,
                                                                                     PSOBREG_MAS_48H              ,
                                                                                     'S'                                        ,
                                                                                     'D'                            ,
                                                                                              'N'                                       ,
                                                                                     PTc1                ,
                                                                                     PTc2           ,
                                                                                     variables.Usuario     ,
                                                                                     vMensajeError
                                                                                                  );
                                                                    Vsequim    := '2.8';
                                                                    
                                                              if ( vMensajeError is not null ) then
                                                                  pMensajeError := vMensajeError;
                                                                  return;
                                                              end if;
                                                              --
                                                                    Vsequim    := '2.9';
                                                              
                                                              CG_UTL.Lineas_del_Asiento (
                                                                                     to_number(pCod_Empresa)    ,
                                                                                     to_number(PCod_Agencia) ,
                                                                                     pAplic                   ,
                                                                                     pSubAplic        ,
                                                                                     pTipoTrans             ,
                                                                                     pSubTransCambio        ,
                                                                                     pNumTransa                         ,
                                                                                     pdescripcion           ,
                                                                                     pfecha            ,
                                                                                     pfecha            ,
                                                                                     pfecha            ,
                                                                                     pNumAsiento         ,
                                                                                     vCtaAdelMas48        ,
                                                                                     Pnueva_agencia  ,
                                                                                     PSOBREG_MAS_48H                ,
                                                                                     'S'                                        ,
                                                                                     'C'                            ,
                                                                                              'N'                                       ,
                                                                                     PTc1                ,
                                                                                     PTc2           ,
                                                                                     variables.Usuario     ,
                                                                                     vMensajeError
                                                                                                      );
                                                                                                      
                                                                Vsequim    := '2.10';
                                                                
                                                              if ( vMensajeError is not null )  then
                                                                  pMensajeError := vMensajeError;
                                                                  return;
                                                              end if;
                                                              
                                                                Vsequim    := '2.11';
                                                    
                                                    End If;--Fin si no es centralizada Pestado not in ('0','2','6')--dfatule 04092007 PSOBREG_MAS_48H > 0
                                                    
                                                  End if;--PSOBREG_MAS_48H > 0
                                                  
                                                End If; --Pestado not in ('0', '2') 
                End If;    --Fin si no es centralizada Pestado not in ('0','2','6')--dfatule 04092007

              --ACollado.30/05/2023 Para que busque la cuenta contable  de intereses por sector| [FDS-1754] Centro de Costos
                 Busca_Cuenta_Contable (variables.CodEmpresa,
                                        'BCC',
                                        Pcod_producto,
                                        'INT_X_PAGAR_X_SECTOR',
                                        vSectorContable,
                                        vCtaInteresesN,
                                        vMensajeError);
                 Es_Centralizada ( vCtaInteresesN,
                                   vCentralInt);--S o N
                 If vCentralInt ='N' then
                          -- Para que las Tasas de Cambio las busque
                          PTc1 := null;
                          PTc2 := null;
                          CG_UTL.Lineas_del_Asiento (Pcod_empresa,
                                                     Pcod_Agencia,
                                                     PAplic,
                                                     PSubAplic,
                                                     PTipoTrans,
                                                     PSubTransCambio,
                                                     PNumTransa,
                                                     Pdescripcion,
                                                     Pfecha,
                                                     Pfecha,
                                                     Pfecha,
                                                     Pnumasiento,
                                                     vCtaInteresesN,
                                                     PTitular_agencia,
                                                     PInteresesCC,
                                                     'S',
                                                     'D',
                                                     'N',
                                                     PTc1,
                                                     PTc2,
                                                     variables.Usuario,
                                                     vMensajeError
                                                                  );
                                    Vsequim    := '2.12';

                          if ( vMensajeError is not null ) then
                              pMensajeError := vMensajeError;
                                return;
                          end if;

                          CG_UTL.Lineas_del_Asiento (Pcod_empresa,
                                                     Pcod_Agencia,
                                                     PAplic,
                                                     PSubAplic,
                                                     PTipoTrans,
                                                     PSubTransCambio,
                                                     PNumTransa,
                                                     Pdescripcion,
                                                     Pfecha,
                                                     Pfecha,
                                                     Pfecha,
                                                     Pnumasiento,
                                                     vCtaInteresesN,
                                                     Pnueva_agencia,
                                                     PInteresesCC,
                                                     'S',
                                                     'C',
                                                     'N',
                                                     PTc1,
                                                     PTc2,
                                                     variables.Usuario,
                                                     vMensajeError
                                                                  );
                                    Vsequim    := '2.13';

                          if ( vMensajeError is not null ) then
                              pMensajeError := vMensajeError;
                                return;
                          end if;

                 End If;
                 --Fin Interes por pagar
            ElsIf Pestado = '6' Then --ASiento a Cuentas Inactivas

                    Vsequim    := '3';
                    vMensaj    := 'Error ASiento a Cuentas Inactivas reclasificacion CC para el cliente '||Pcliente;                                

                        --Si no es centralizada haz el asiento--dfatule 04092007
                Es_Centralizada ( vCtaPrincipalInactivo,
                                                            vCentral);--S o N
                If vCentral = 'N' Then--dfatule 04092007
                          -- Para que las Tasas de Cambio las busque
                          PTc1 := null;
                          PTc2 := null;          
                          
                          CG_UTL.Lineas_del_Asiento ( Pcod_empresa,
                                                     Pcod_Agencia,
                                                      PAplic,
                                                     PSubAplic,
                                                     PTipoTrans,
                                                     PSubTransCambio,
                                                     PNumTransa,
                                                     Pdescripcion,
                                                     Pfecha,
                                                     Pfecha,
                                                     Pfecha,
                                                     Pnumasiento,
                                                     vCtaPrincipalInactivo,
                                                      PTitular_agencia,
                                                      PSaldoCC,
                                                         'S',
                                                         'D',
                                                                  'N',
                                                      PTc1,
                                                      PTc2,
                                                      variables.Usuario,
                                                      vMensajeError
                                                                  );
                                    Vsequim    := '3.1';
                                                                  
                          if ( vMensajeError is not null ) then              
                              pMensajeError := vMensajeError;
                                return;
                          end if;
                          --
                                    Vsequim    := '3.2';
                          
                          CG_UTL.Lineas_del_Asiento (Pcod_empresa,
                                                                            Pcod_Agencia,
                                                                            PAplic,
                                                                            PSubAplic,
                                                                            PTipoTrans,
                                                                            PSubTransCambio,
                                                                            PNumTransa,
                                                                            Pdescripcion,
                                                                            Pfecha,
                                                                            Pfecha,
                                                                            Pfecha,
                                                                            Pnumasiento,
                                                                            vCtaPrincipalInactivo,
                                                                            Pnueva_agencia,
                                                                            PSaldoCC,
                                                                            'S',
                                                                            'C',
                                                                            'N',
                                                                            PTc1,
                                                                            PTc2,
                                                                            variables.Usuario,
                                                                            vMensajeError
                                                                            );
                                    Vsequim    := '3.3';
                                                                            
                          if ( vMensajeError is not null ) then
                              pMensajeError := vMensajeError;
                                return;
                          end if; 

              --ACollado.30/05/2023 Para que busque la cuenta contable  de intereses embargados| [FDS-1754] Centro de Costos
              IF pEmbargado > 0 THEN
                  OPEN cIntEmbargado;
                  FETCH cIntEmbargado INTO vIntxPagEmb;
                  CLOSE cIntEmbargado;
              ELSE
                 vIntxPagEmb:=0;
              END IF;
              
              --Interes Inactivo Embargado
              If vIntxPagEmb > 0 then
                Busca_Cuenta_Contable (variables.CodEmpresa,
                                        'BCC',
                                        Pcod_producto,
                                        'INTERES_INACTIVO_EMBARGADO',
                                        vSectorContable,
                                        vCtaIntCreEmb,
                                        vMensajeError);
                  if ( vMensajeError is not null ) then
                      pMensajeError := vMensajeError;
                      return;
                  end if;
                          -- Para que las Tasas de Cambio las busque
                          PTc1 := null;
                          PTc2 := null;

                          CG_UTL.Lineas_del_Asiento (Pcod_empresa,
                                                     Pcod_Agencia,
                                                     PAplic,
                                                     PSubAplic,
                                                     PTipoTrans,
                                                     PSubTransCambio,
                                                     PNumTransa,
                                                     Pdescripcion,
                                                     Pfecha,
                                                     Pfecha,
                                                     Pfecha,
                                                     Pnumasiento,
                                                     vCtaIntCreEmb,
                                                     PTitular_agencia,
                                                     vIntxPagEmb,
                                                     'S',
                                                     'D',
                                                     'N',
                                                     PTc1,
                                                     PTc2,
                                                     variables.Usuario,
                                                     vMensajeError
                                                                  );
                                    Vsequim    := '3.1';

                          if ( vMensajeError is not null ) then
                              pMensajeError := vMensajeError;
                                return;
                          end if;
                          --
                                    Vsequim    := '3.2';

                          CG_UTL.Lineas_del_Asiento (Pcod_empresa,
                                                     Pcod_Agencia,
                                                     PAplic,
                                                     PSubAplic,
                                                     PTipoTrans,
                                                     PSubTransCambio,
                                                     PNumTransa,
                                                     Pdescripcion,
                                                     Pfecha,
                                                     Pfecha,
                                                     Pfecha,
                                                     Pnumasiento,
                                                     vCtaIntCreEmb,
                                                     Pnueva_agencia,
                                                     vIntxPagEmb,
                                                     'S',
                                                     'C',
                                                     'N',
                                                     PTc1,
                                                     PTc2,
                                                     variables.Usuario,
                                                     vMensajeError
                                                    );
                                    Vsequim    := '3.3';

                          if ( vMensajeError is not null ) then
                              pMensajeError := vMensajeError;
                                return;
                          end if;
              End If;
              --Interes Inactivo
                Busca_Cuenta_Contable (variables.CodEmpresa,
                                        'BCC',
                                        Pcod_producto,
                                        'INTERES_INACTIVO',
                                        vSectorContable,
                                        vCtaIntInaEmb,
                                        vMensajeError);
                  if ( vMensajeError is not null ) then
                      pMensajeError := vMensajeError;
                      return;
                  end if;
                          -- Para que las Tasas de Cambio las busque
                          PTc1 := null;
                          PTc2 := null;

                          CG_UTL.Lineas_del_Asiento (Pcod_empresa,
                                                     Pcod_Agencia,
                                                     PAplic,
                                                     PSubAplic,
                                                     PTipoTrans,
                                                     PSubTransCambio,
                                                     PNumTransa,
                                                     Pdescripcion,
                                                     Pfecha,
                                                     Pfecha,
                                                     Pfecha,
                                                     Pnumasiento,
                                                     vCtaIntInaEmb,
                                                     PTitular_agencia,
                                                     nvl(PInteresesCC,0) - nvl(vIntxPagEmb,0),
                                                     'S',
                                                     'D',
                                                     'N',
                                                     PTc1,
                                                     PTc2,
                                                     variables.Usuario,
                                                     vMensajeError
                                                                  );
                                    Vsequim    := '3.1';

                          if ( vMensajeError is not null ) then
                              pMensajeError := vMensajeError;
                                return;
                          end if;
                          --
                                    Vsequim    := '3.2';
                                    
                          CG_UTL.Lineas_del_Asiento (Pcod_empresa,
                                                     Pcod_Agencia,
                                                     PAplic,
                                                     PSubAplic,
                                                     PTipoTrans,
                                                     PSubTransCambio,
                                                     PNumTransa,
                                                     Pdescripcion,
                                                     Pfecha,
                                                     Pfecha,
                                                     Pfecha,
                                                     Pnumasiento,
                                                     vCtaIntInaEmb,
                                                     Pnueva_agencia,
                                                     nvl(PInteresesCC,0) - nvl(vIntxPagEmb,0),
                                                     'S',
                                                     'C',
                                                     'N',
                                                     PTc1,
                                                     PTc2,
                                                     variables.Usuario,
                                                     vMensajeError
                                                    );
                                    Vsequim    := '3.3';

                          if ( vMensajeError is not null ) then
                              pMensajeError := vMensajeError;
                                return;
                          end if;

              End If;--Fin si no es centralizada Pestado = '6'--dfatule 04092007
              
            End If;
            
            
                    Vsequim    := '3.4';
       --- **** CLASIFICA EMBARGO ACOLLADO:30/05/2023***** ---|
       --1.Saldo
       Begin
       For i in (--Cuentas de inactivas/embargadas - no Fallecidos
                 SELECT ce.cod_cliente,
                       ce.ind_estado,
                       ec.tip_transacc tip_transacc,
                       ec.subtip_transacc,
                       SUM (ec.sal_embargado) sal_contabilizado,
                       decode(ce.ind_estado,'6','PRINCIPAL_INACTIVO_EMBARGADO','7','PRINCIPAL_INACTIVO_EMBARGADO') concepto_I_A
                  FROM cuenta_efectivo ce,
                       embargo em,
                       embargo_x_cuenta ec
                 WHERE ce.cod_empresa = Pcod_empresa
                       AND ce.sal_embargado > 0
                       AND ce.cod_empresa = ec.cod_empresa
                       AND ce.num_cuenta = ec.num_cuenta
                       AND em.cod_empresa = ec.cod_empresa
                       AND em.num_embargo = ec.num_embargo
                       AND em.estado = 'A'
                       AND em.fec_inicio > ce.fecha_inactiva
                       AND ce.cod_producto <> 205  -- Excluimos este tipo de producto que no posee plantillas para embargos
                       AND EXISTS
                              (SELECT '1' -- Si la cuenta posee algun embargo diferente a fallecimiento, puedo reclasificarla
                                 FROM pa.embargo e, pa.embargo_x_cuenta c
                                WHERE e.cod_empresa = Pcod_empresa
                                      AND e.estado = 'A'
                                      AND c.num_cuenta = ce.num_cuenta
                                      AND e.cod_empresa = c.cod_empresa
                                      AND e.num_embargo = c.num_embargo
                                      AND NOT (e.tipo_embargo = 'O'
                                               AND e.cod_embargo = '2'))
                       and ce.num_cuenta =  Pnocuenta
              GROUP BY ce.cod_cliente,
                       ec.tip_transacc,
                       ec.subtip_transacc,
                       ce.ind_estado,
                       decode(ce.ind_estado,'6','PRINCIPAL_INACTIVO_EMBARGADO','7','PRINCIPAL_INACTIVO_EMBARGADO')
              UNION --Fallecidos
                SELECT ce.cod_cliente,
                       ce.ind_estado,
                       ec.tip_transacc tip_transacc,
                       ec.subtip_transacc,
                       --SUM (ec.sal_embargado) sal_contabilizado,--IPF-4626
                       SUM (ec.sal_fallecido) sal_contabilizado,--IPF-4626
                       decode(ce.ind_estado,'6','PRINCIPAL_INACTIVO_EMBARGADO','7','PRINCIPAL_ABANDONO_EMBARGADO') concepto_I_A
                  FROM cuenta_efectivo ce,
                       fallecido em,--embargo em,
                       fallecido_x_cuenta ec--embargo_x_cuenta ec
                 WHERE ce.cod_empresa = Pcod_empresa
                       --AND ce.sal_embargado > 0 --IPF-4626
                       AND ce.sal_fallecido > 0 --IPF-4626
                       AND ce.cod_empresa = ec.cod_empresa
                       AND ce.num_cuenta = ec.num_cuenta
                       AND em.cod_empresa = ec.cod_empresa
                       --AND em.num_embargo = ec.num_embargo--IPF-4626
                       AND em.num_fallecido = ec.num_fallecido--IPF-4626
                       AND em.estado = 'A'
                       and ce.cod_producto <> 205  -- Excluimos este tipo de producto que no posee plantillas para embargos
                       /*AND NOT EXISTS --IPF-4626--Comento porque no aplica por el cambio de estrucutura Fallecida
                              (SELECT '1' -- Si la cuenta posee algun embargo diferente a fallecimiento,no puedo reclasificarla aqui
                                 FROM pa.embargo e, pa.embargo_x_cuenta c
                                WHERE e.cod_empresa = Pcod_empresa
                                      AND e.estado = 'A'
                                      AND c.num_cuenta = ce.num_cuenta
                                      AND e.cod_empresa = c.cod_empresa
                                      AND e.num_embargo = c.num_embargo
                                      AND NOT (    e.tipo_embargo = 'O'
                                               AND e.cod_embargo = '2'))*/
                       and ce.num_cuenta =  Pnocuenta
              GROUP BY ce.cod_cliente,
                       ec.tip_transacc,
                       ec.subtip_transacc,
                       decode(ce.ind_estado,'6','PRINCIPAL_INACTIVO_EMBARGADO','7','PRINCIPAL_ABANDONO_EMBARGADO'),
                       ind_estado
                   )
       loop
         begin

             begin
                 select b.concepto
                   into vCtaDebitoEmb
                   from cg_codific_resumen a,cg_codific_detalle b
                  where a.codigo_empresa = b.codigo_empresa
                    and a.id_codificacion = b.id_codificacion
                    and a.codigo_aplicacion = 'BCC'
                    and a.codigo_sub_aplicacion = Pcod_producto
                    and a.codigo_tipo_transaccion = i.tip_transacc
                    and a.codigo_subtransaccion = i.subtip_transacc
                    and a.COD_SEC_CONTABLE = vSectorContable
                    and tipo_movimiento = 'C';
             exception
                when no_data_found then
              Begin
                    select b.concepto
                      into vCtaDebitoEmb
                      from cg_codific_resumen a,cg_codific_detalle b
                     where a.codigo_empresa = b.codigo_empresa
                       and a.id_codificacion = b.id_codificacion
                       and a.codigo_aplicacion = 'BCC'
                       and a.codigo_sub_aplicacion = Pcod_producto
                       and a.codigo_tipo_transaccion = i.tip_transacc
                       and a.codigo_subtransaccion is null
                       and a.COD_SEC_CONTABLE = vSectorContable
                       and tipo_movimiento = 'C';
              end;
             end;

             If i.ind_estado in ('6','7') then
                Busca_Cuenta_Contable (Pcod_empresa,
                                        'BCC',
                                        Pcod_producto,
                                        i.concepto_I_A,
                                        vSectorContable,
                                        vCtaDebitoEmb,
                                        vMensajeError);
             End If;

             Vsequim    := '3.41';
             --- **** CREAR LINEA ASIENTO ***** ---
             if vCtaDebitoEmb is not null then
                PTc1 := null;
                PTc2 := null;
                --
                CG.CG_UTL.Lineas_del_Asiento ( Pcod_empresa,
                                           Pcod_Agencia,
                                           PAplic,
                                           PSubAplic,
                                           PTipoTrans,
                                           PSubTransCambio,
                                           PNumTransa,
                                           Pdescripcion,
                                           Pfecha,
                                           Pfecha,
                                           Pfecha,
                                           Pnumasiento,
                                           vCtaDebitoEmb,
                                           PTitular_agencia,
                                           i.sal_contabilizado,
                                           'S',
                                           'D',
                                           'N',
                                           PTc1,
                                           PTc2,
                                           variables.Usuario,
                                           vMensajeError
                                           );
                Vsequim    := '3.42';

                if ( vMensajeError is null ) then
                    Vsequim    := '3.43';

                    CG.CG_UTL.Lineas_del_Asiento (Pcod_empresa,
                                                    Pcod_Agencia,
                                                    PAplic,
                                                    PSubAplic,
                                                    PTipoTrans,
                                                    PSubTransCambio,
                                                    PNumTransa,
                                                    Pdescripcion,
                                                    Pfecha,
                                                    Pfecha,
                                                    Pfecha,
                                                    Pnumasiento,
                                                    vCtaDebitoEmb,
                                                    Pnueva_agencia,
                                                    i.sal_contabilizado,
                                                    'S',
                                                    'C',
                                                    'N',
                                                    PTc1,
                                                    PTc2,
                                                    variables.Usuario,
                                                    vMensajeError
                                                    );
                end if;
                Vsequim    := '3.43';
             end if;
             --
             dbms_output.put_line('Pnumasiento: '||Pnumasiento);
         exception
           when no_data_found then
                vCtaDebitoEmb :=null;
         end;
          --
          
        end loop;
       End;
       --- **** FIN CLASIFICA EMBARGO ACOLLADO:30/05/2023***** ---| [FDS-1754] Centro de Costos
    Exception
        When Others Then
            --Set_Application_Property(Cursor_style, 'DEFAULT');
            Message(Vsequim ||' - '|| vMensaj); 
            BITACORA_CIERRES_ERROR (CONTROL.FECHA_PROCESO);                                         
 
    END Asiento_Reclasificacion_CC;
    
    PROCEDURE Genera_Contabilizacion_CKD(
                                    pCodOpcion           In  Varchar2,
                                    pcodsistema          in varchar2,
                                    PAplic               in Varchar2,
                                    PSubAplic            in Varchar2,
                                    PTipoTrans           in varchar2,
                                    PSubTransCambio      in varchar2,                                                    
                                    PNumTransa           in varchar2,
                                    Pdescripcion         in varchar2,
                                    pfecSistema          in varchar2,
                                    PSaldoActual         in number,
                                    PTitular_agencia     in varchar2,
                                    Pnueva_agencia       in varchar2,
                                    pcodmoneda           in varchar2,
                                    pmonedabase          in varchar2,
                                    pAsiento             IN VARCHAR2
                                    ) IS
    --EFECTUA : Inicializacion de Variables Locales Adicionales                                     
    --HISTORIA: dfatule : 16/Mar/2007 : redefinicion
    -- 
    -- Declaracion de Variables de Trabajo.
    -- 
       vTC1              Number(18,2)         ;
       vTC2                 Number(18,2)         ;
         vDiferencia       Number   := 0        ;
       vTipPartida       Varchar2(1)          ;
       vTipContraPartida Varchar2(1)          ;
         vCuentaContable   Varchar2(25)  := Null;
       vAbreviatura      Varchar2(20)  := Null;
       vMsjError            Varchar2(250) := Null;
    -- Excepciones.
         CONTA                       Exception;
       exError                    Exception;
    --seguimiento         
       Vsequim                     varchar2(10);
         vMensaj                     varchar2(100);            
    --Central
         vCentral                     Varchar2(1);    
         vCodError             Varchar2(250) := Null;
    BEGIN
                
            Vsequim := '0';
            vMensaj := 'Error contabilizando CkD ';
            -- 
            -- Se Determina el Concepto de la Transaccion en Parametros
            -- para Identificar el Codigo de la Transaccion a Realizar.
            -- 
            if pCodOpcion = 'TRANSREGCOB' then
            --         vAbreviatura      := 'CTAXCOB'    ;
            --      vTipPartida       := 'D'          ;
            --      vTipContraPartida := 'C'          ;
              vTipPartida       := 'C'          ;
              vTipContraPartida := 'D'          ;
            -- vDescripcion      := 'GENERACION DE UNA CUENTA POR LIQUIDAR (CXC - CHEQUE DEVUELTO)';
            elsif pCodOpcion =  'TRANSREGPAG' then
            --         vAbreviatura      := 'CTAXPAG'    ;
            --      vTipPartida       := 'C'          ;
            --      vTipContraPartida := 'D'          ;
              vTipPartida       := 'D'          ;
              vTipContraPartida := 'C'          ;
             -- vDescripcion      := 'GENERACION DE UNA CUENTA POR LIQUIDAR (CXP - CHEQUE DEVUELTO)';
            end if;
            Vsequim := '1';
            vMensaj := 'Error contabilizando CkD despues de elegir opcion de partidas';
            -- 
            -- Se Genera la Linea del Asiento Contable por le Monto del Cheque Devuelto.
            -- 

            -- 
            -- Busca la Cuenta Contable de Cheques Devueltos en CL_PARAM_MONEDA.
            --    
            vCuentaContable := Null;
            vCuentaContable := cl_procs.Param_Monedas_BCL(variables.codEmpresa, 
                                                         pcodsistema  ,
                                                         pcodmoneda   , 
                                                         'CHEQUEDEV'          ,
                                                         vCodError, 
                                                         vMsjError);
            vsequim := '2';
            
            if vMsjError is not Null then
               Mensaje('04-Contabiliza_CKD: '||vMsjError);
               raise form_trigger_failure;
            end if;
            vsequim := '3'
            ;
            vTC1 := null;
            vTC2 := null;
          
            --Si no es centralizada haz el asiento--dfatule 04092007
            Es_Centralizada ( vCuentaContable,
                                            vCentral);--S o N
            If vCentral = 'N' Then    --dfatule 04092007  
                      
                CG.CG_UTL.Lineas_Del_Asiento(variables.codEmpresa  ,
                                   variables.codAgencia  ,
                                   PAplic,
                                     PSubAplic,
                                     PTipoTrans,
                                     PSubTransCambio,                                                    
                                     PNumTransa,
                                     Pdescripcion,
                                    pfecSistema  , 
                                    pfecSistema  ,
                                   pfecSistema  ,
                                    PAsiento            ,
                                    vCuentaContable        ,
                                    PTitular_agencia  ,
                                    PSaldoActual ,
                                    'S'                    ,
                                    vTipPartida            ,
                                    'N'                    ,
                                    vTC1                   ,
                                    vTC2                   ,
                                    variables.Usuario     ,
                                    vMsjError);
                vsequim := '4';
                vMensaj := 'Error contabilizando CkD despues de primera linea partida del asiento';

                if vMsjError is not Null then
                     Mensaje('05-Contabiliza_CKD: '||vMsjError);
                     BITACORA_CIERRES_ERROR (CONTROL.FECHA_PROCESO);
                     --raise form_trigger_failure;
                end if;

                vsequim := '5';
        
                  vTC1 := null;
                  vTC2 := null;
            
                    CG.CG_UTL.Lineas_Del_Asiento(variables.codEmpresa        ,
                                       variables.codAgencia        ,
                                       PAplic,
                                         PSubAplic,
                                         PTipoTrans,
                                         PSubTransCambio,                                                    
                                         PNumTransa,
                                         Pdescripcion,
                                        pfecSistema        ,  
                                        pfecSistema        ,
                                       pfecSistema        ,
                                        pAsiento                  ,
                                        vCuentaContable,
                                        Pnueva_agencia        ,
                                        PSaldoActual,
                                        'S'                          ,
                                        vTipContrapartida            ,
                                        'N'                          ,
                                        vTC1                         ,
                                        vTC2                         ,
                                        variables.Usuario           ,
                                        vMsjError);
                vsequim := '6';
                vMensaj := 'Error contabilizando CkD despues de segunda linea partida del asiento';
        
            if vMsjError is not Null then
             Mensaje('10-Contabiliza_CKD: '||vMsjError);
             BITACORA_CIERRES_ERROR (CONTROL.FECHA_PROCESO);
             --raise form_trigger_failure;
            end if;
            
                vsequim := '7';
            
            End If;--Si no es centralizada haz el asiento--dfatule 04092007

    EXCEPTION
        when others then
             --Set_Application_Property(Cursor_style, 'DEFAULT');        
             Message(Vsequim ||'-'|| vMensaj); 
             BITACORA_CIERRES_ERROR (CONTROL.FECHA_PROCESO);
             --exit_form(no_commit, no_validate);                        
    END Genera_Contabilizacion_CKD;
    
    PROCEDURE Asiento_Reclasificacion_CxL(Pcod_empresa       in varchar2,--CxL
                                          Pcod_agencia       in varchar2, --CxL
                                          pcod_motivo        in varchar2,
                                          pcod_moneda        in varchar2,
                                          pmonedabase        in varchar2,                                                                            
                                          Ptipo_cuenta       in varchar2, --CxL
                                          PTipo_motivo       in varchar2,
                                          Pcodsistema        in varchar2,
                                          PNUMERO_ASIENTO    IN VARCHAR2,
                                          PNUM_DOCUMENTO     in varchar2,
                                          PAplic             in Varchar2,
                                          PSubAplic          in Varchar2,
                                          PTipoTrans         in varchar2,
                                          PSubTransCambio    in varchar2,                                                    
                                          PNumTransa         in varchar2,
                                          Pdescripcion       in varchar2,
                                          Pfecsistema        in date,
                                          Pcliente           in varchar2,
                                          PTitular_agencia   in varchar2,
                                          Pnueva_agencia     in varchar2,
                                          PSaldoActual       in number,
                                          PTc1               in out number,
                                          PTc2               in out Number,
                                          PMensajeError      in out varchar2
                                          ) IS
    --EFECTUA : Inicializacion de Variables Locales Adicionales                                     
    --HISTORIA: dfatule : 16/Mar/2007 : redefinicion
    -- 
    -- Declaracion de Variables de Trabajo.
    -- 
       vCodOpcion        Varchar2(20)  := Null;
         BCG_INTERFACE Exception;
    Vsequim                                varchar2(10);
    vMensaj                                varchar2(100);    

                                                            
    BEGIN
    Vsequim := '0';
    vMensaj := 'Error ejecutando asiento de reclasificacion CxL, cliente '||Pcliente;
    -- 
    -- Determina la Transaccion a Registrar. 
    --
       if Ptipo_cuenta = 'C' then
             vCodOpcion := 'TRANSREGCOB';
       elsif Ptipo_cuenta = 'P' then
             vCodOpcion :=  'TRANSREGPAG';
       end if;
       
    Vsequim := '1';
    vMensaj := 'Error despues de determinar la Transaccion a Registrar para reclasificacion CxL';
       
    -- 
    -- Genera Asiento Contable.
    -- 
       CONTROL.mensaje := 'Generando Asiento Contable..., cliente '||Pcliente;
       
       if PTipo_motivo = 'RCL' then
                Vsequim := '2';
                vMensaj := 'Error al Contabilizar CxL de reclasificacion CxL, cliente '||Pcliente;       
       -- Contabiliza el Registro del la Cuenta por Liquidar.
          Genera_Contabilizacion_CxL(vCodOpcion,Pcodsistema,
                                                              PAplic,PSubAplic,PTipoTrans,
                                                              PSubTransCambio,PNumTransa,
                                                              Pdescripcion,pfecSistema,
                                                              PSaldoActual,PTitular_agencia,
                                                              Pnueva_agencia,pcod_moneda,
                                                              pmonedabase,PNUMERO_ASIENTO);
       elsif PTipo_motivo = 'CKD' then
                Vsequim := '3';
                vMensaj := 'Error al Contabilizar CkD de reclasificacion CxL, cliente '||Pcliente;          
       -- Contabiliza el Registro de un Cheque Devuelto.
             Genera_Contabilizacion_CKD(vCodOpcion,Pcodsistema,
                                                                 PAplic,PSubAplic,PTipoTrans,
                                                                 PSubTransCambio,PNumTransa,
                                                                 Pdescripcion,pfecSistema,
                                                                 PSaldoActual,PTitular_agencia,
                                                                 Pnueva_agencia,pcod_moneda,
                                                                 pmonedabase,PNUMERO_ASIENTO);
       end if;

    -- 
    -- Verifica Si No Ocurrieron Errores.
    -- 
       CONTROL.mensaje := 'Registrando la Cuenta x Liquidar..., cliente '||Pcliente;
       
    exception
       when others then
              Message(Vsequim ||'-'|| vMensaj ||'-'||'Ocurri√≥ Error Registrando la Cuenta x Liquidar: '||sqlerrm);
              --Set_Application_Property(Cursor_style, 'DEFAULT'); 
              --Message(Vsequim ||'-'|| vMensaj); Message(' ');
              --exit_form(no_commit, no_validate);
              BITACORA_CIERRES_ERROR (CONTROL.FECHA_PROCESO);                        

    END Asiento_Reclasificacion_CxL;
    
    PROCEDURE P_APLICA_DIARIO(vFecha in Date, 
                              vProxFecha in Date,
                              v_Mensaje in out Varchar2) IS

    --EFECTUA : Ejecuta el proceso de Reclasificacion de inmediato                                     

    Cursor CO is
    ---  Eblanco: 15-09-2016: Se incluyo la agencia para que solo tome los cambios a agencias que atiendan clientes y asi evitar que agencia backoffice tengan clientes.
        Select COD_EJECUTIVO_TITULAR, COD_AGENCIA_TITULAR , COD_AGENCIA_SOLICITA ,
        COD_EJECUTIVO_SOLICITA , FECHA_SOLICITUD , ESTADO , MODIFICADO_POR , OBSERVACION , 
        COD_CLIENTE , FECHA_MODIFICACION , FECHA_TITULAR_R , FECHA_TITULAR_A ,Fecha_Aplica 
        from cambios_Oficiales c, agencia a
        Where   A.COD_AGENCIA = c.COD_AGENCIA_SOLICITA
        And     nvl(a.Atiende_cliente,'N') = 'S' -- Eblanco: Agencia que atiende clientes.
        and     a.est_agencia         = 'A'      -- Eblanco: Solo agenica activas
        and     c.Estado              = 'P'
        And     c.Modificado_por      is not null
        And     c.Fecha_Modificacion  is not null
        And     c.Fecha_Aplica        <= vFecha
        Order by COD_EJECUTIVO_TITULAR,COD_EJECUTIVO_SOLICITA, FECHA_SOLICITUD;
   
/*--------------/
      CAMBIO: 
      1- SE INCLUYE HINTS ALL_ROWS EN CURSOR MAS_CLIENTE PARA EFICIENTIZAR RENDIMIENTO
      RESPONSABLE: Jonathan de Leon, Simetrica.
      FECHA:10/11/2023
      DOC. REFERENCIA:IPB-2075 - Optimizaci√≥n del Proceso de Cierre Cambio Oficial Agencia
     *-----------*/    
    Cursor MAS_CLIENTE(v_oficial in Varchar2) is
        Select /*+ ALL_ROWS */ cod_cliente
        From Cliente
        Where Cod_oficial = v_oficial
        Order by Cod_empresa, Cod_cliente;
        
    Cursor CO_tmp is
        Select COD_EJECUTIVO_TITULAR, COD_AGENCIA_TITULAR , COD_AGENCIA_SOLICITA ,
        COD_EJECUTIVO_SOLICITA , FECHA_SOLICITUD, COD_CLIENTE, FECHAPROCESO 
        from cambios_Oficiales_Tmp
        Where FECHAPROCESO = vFecha
        Order by COD_CLIENTE, FECHAPROCESO;

    Cursor prestamo (vcliente varchar2) is
        Select prc.CODIGO_EMPRESA,prc.CODIGO_AGENCIA, prc.CODIGO_CLIENTE, 
        prc.NO_CREDITO,prc.CODIGO_MONEDA,
        prc.ESTADO,prc.TIPO_CREDITO,pri.FECHA_LIQUIDACION,
        Nvl(pri.SALDO_CREDITO,0) SALDO_CREDITO,
        --ACollado.30/05/2023--Agrego intereses
        CASE
        when
        Nvl(int_acumulados_antes,0)+Nvl(int_acumulados_liq,0)/*+Nvl(int_suspenso_antes,0)+Nvl(int_suspenso_liq,0)*/-Nvl(int_pagados_antes,0)>0
        then
        Nvl(int_acumulados_antes,0)+Nvl(int_acumulados_liq,0)-Nvl(int_pagados_antes,0)
        else
        0
        END INTERESES,
        CASE
        when
        Nvl(int_suspenso_antes,0)+Nvl(int_suspenso_liq,0) > 0 then
        Nvl(int_suspenso_antes,0)+Nvl(int_suspenso_liq,0)
        else
        0
        end intereses_su
        from   pr_creditos prc, pr_intereses_generados pri
        Where  prc.CODIGO_EMPRESA         = pri.CODIGO_EMPRESA
        And      prc.NO_CREDITO                 = pri.NO_CREDITO
        And         prc.CODIGO_EMPRESA         = VARIABLES.CODEMPRESA
        And         prc.CODIGO_CLIENTE         = vcliente
      And         pri.FECHA_LIQUIDACION  = vFecha
      And         /*pri.Estado--dfatule 03082007*/ prc.ESTADO                        In ('D','E','J')--dfatule 10092007: Se incluyo el estado E por los reestructurados
      And         Nvl(pri.SALDO_CREDITO,0) > 0
        --Order by prc.CODIGO_EMPRESA,prc.NO_CREDITO; --dfatule 31082007
        group by prc.CODIGO_EMPRESA,prc.CODIGO_AGENCIA,prc.CODIGO_CLIENTE,
        prc.NO_CREDITO,prc.CODIGO_MONEDA,
        prc.ESTADO,prc.TIPO_CREDITO,pri.FECHA_LIQUIDACION,
        Nvl(pri.SALDO_CREDITO,0),
        --ACollado.30/05/2023--Agrego intereses|FDS-1754
        (Nvl(int_acumulados_antes,0)+Nvl(int_acumulados_liq,0)/*+Nvl(int_suspenso_antes,0)+Nvl(int_suspenso_liq,0)*/-Nvl(int_pagados_antes,0)),
        Nvl(int_suspenso_antes,0)+Nvl(int_suspenso_liq,0);

    /*--------------/
      CAMBIO: 
      1- SE INCLUYE INDICE CD.IDX01_CD_CERTIFICADO Y HINTS INDEX(CDC) EN CURSOR CERTIFICADO PARA EFICIENTIZAR RENDIMIENTO.
      RESPONSABLE: Jonathan de Leon, Simetrica.
      FECHA:10/11/2023
      DOC. REFERENCIA:IPB-2075 - Optimizaci√≥n del Proceso de Cierre Cambio Oficial Agencia
     *-----------*/ 
    Cursor Certificado (vcliente varchar2) is
        Select /*+ INDEX(CDC) */ cdc.cod_empresa, cdc.num_certificado, cdc.COD_CARTERA, cdc.estado, 
        cdc.cuenta_contable, cdc.cliente, cdc.cod_producto, cdc.Tip_Certificado, 
        cdi.fecha_calculo,    Nvl(cdi.MONTO_CD,0) monto_cd, cdi.COD_RETENCION,
        NVL(cdc.MON_INT_X_PAGAR,0) MON_INT_X_PAGAR, cdc.pla_dias, cdc.Clasificacion, cdc.cod_moneda, --dfatule 10092007
        nvl(CDC.MON_ACUM_INT_CAP,0) mon_acum_int_cap, --FDS-1754.Agrego intereses capitalizados
        nvl(monto_original,0) monto_original --FDS-1754.Agrego monto original
        from cd_certificado cdc, CD_INTERES cdi
        Where cdc.COD_EMPRESA         = cdi.COD_EMPRESA
        And      cdc.num_certificado = cdi.Num_certificado
        And      cdc.COD_EMPRESA         = VARIABLES.CODEMPRESA
        And      cdc.cliente                 = vCliente
        And      CDI.FECHA_CALCULO         = vFecha
        And      cdc.estado                     in ('A','R');

    /*--------------/
      CAMBIO: 
      1- SE INCLUYE HINTS INDEX_SS(CE) INDEX_SS(SD) EN EL CURSOR CEFECTIVO PARA USAR INDICES EXISTENTES EN LOS OBJETOS UTILIZADOS.
      RESPONSABLE: Jonathan de Leon, Simetrica.
      FECHA:10/11/2023
      DOC. REFERENCIA:IPB-2075 - Optimizaci√≥n del Proceso de Cierre Cambio Oficial Agencia
     *-----------*/    
    Cursor Cefectivo (vcliente varchar2) is
        Select /*+ INDEX_SS(CE) INDEX_SS(SD) */ CE.COD_EMPRESA, CE.NUM_CUENTA, CE.COD_PRODUCTO, CE.COD_CLIENTE, 
        CE.IND_ESTADO, SD.FECHA, --Nvl(SD.SALDO_CONTABILIZADO,0) SALDO_CONTABILIZADO,
        --ACollado.30/05/2023:Agrego valores SAL_EMBARGADO | [FDS-1754] Centro de Costos
        Nvl(SD.SALDO_CONTABILIZADO,0) SALDO_CONTABILIZADO,
        Nvl(SOBREG_MENOS_48H,0) SOBREG_MENOS_48H,
        (Nvl(SOBREG_MAS48H_HASTA30D,0) + Nvl(SOBREG_MAS48H_MAYOR30D,0)) SOBREG_MAS48H,
        NVL(CE.INT_POR_PAGAR,0) INT_POR_PAGAR, --ACollado.30/05/2023:Agrego valores INT_POR_PAGAR, SAL_EMBARGADO | [FDS-1754] Centro de Costos
        NVL(sd.SAL_EMBARGADO, 0) SAL_EMBARGADO
        from CUENTA_EFECTIVO ce, SALDOS_X_DIA sd
        Where ce.COD_EMPRESA = sd.COD_EMPRESA
        And      ce.NUM_CUENTA  = sd.NUM_CUENTA
        And      ce.COD_EMPRESA = VARIABLES.CODEMPRESA
        And   CE.COD_CLIENTE = vcliente
        And      ce.NUM_CUENTA  >    0
        And      SD.FECHA               = vFecha
        Order by CE.COD_EMPRESA, CE.NUM_CUENTA;
        
    Cursor CxL (vcliente varchar2) is
        Select COD_EMPRESA, COD_AGENCIA, COD_SISTEMA, NUM_DOCUMENTO, TIPO_CUENTA, 
        COD_CLIENTE,FEC_REGISTRO, COD_MONEDA, COD_ESTADO, COD_MOTIVO, 
        CUENTA_CONTABLE, NUM_ASIENTO, SISTEMA_ORIGEN, 
        Nvl(SALDO_ACTUAL,0) SALDO_ACTUAL
        From CL_CUENTAS_X_LIQUIDAR
        Where COD_EMPRESA = variables.codempresa
        AND COD_CLIENTE     = vcliente
        And cod_estado         in ('A','J')
        AND Nvl(saldo_actual,0) >    0 ;

        
         vNumAsiento             number(15);
         vTC1                    number(10):=null;
         vTC2                    number(10):=null;
         vMtoDiferencia          number(18,2);
         vErrFatal               boolean := FALSE;
         vAplic                  varchar2(5) := 'BCG';-- buscar quitar hardcode
         vSubAplic               number(5) := '900';-- buscar quitar hardcode
         vTipoTrans              varchar2(5) :='1';-- buscar quitar hardcode
         vSubTransCambio         varchar2(5) := Null;-- buscar quitar hardcode
         vNumTransa              varchar2(15):=0;
         vNUMERO_ASIENTO         Number(10);
         vDOCUMENTO              Varchar2(30);  
         vDESCRIPCION            Varchar2(250):='Asiento Reclasificacion Saldos de Productos de Clientes';
         vMENSAJE_ERROR          Varchar2(255);
         BCG_INTERFACE           exception;
         v_Tc1                   number(18,8);
         v_Tc2                   number(18,8);
         vMontoDife              Number(18,8);
         vMensajeErr             varchar2(255);
         vCant                   Number;
         vContador               number;
         vcantidadtoTal          number(10);
         vcantidadprocesada      number(10);
         v_E_Saldos              SALDOS_X_DIA.SALDO_CONTABILIZADO%Type:=0;
         v_E_CCSaldos            SALDOS_X_DIA.SALDO_CONTABILIZADO%Type:=0;
         v_E_CDSaldos            CD_INTERES.monto_cd%Type:=0;
         v_E_PRSaldos            pr_intereses_generados.SALDO_CREDITO%Type:=0;
         v_E_CXLSaldos           CL_CUENTAS_X_LIQUIDAR.SALDO_ACTUAL%TYPE:=0;
         --CXL
         Vtipomotivo             CL_MOTIVO.TIPO_MOTIVO%TYPE;
         Vcodsistema             CL_MOTIVO.COD_SISTEMA%TYPE;
         Vdescmotivo             cl_contrapartida_contable.DESCRIPCION%TYPE;
         Vaplicacomision         CL_MOTIVO.APLICA_COMISION%TYPE;
         Vcuentacontable         cl_contrapartida_contable.CONTRAPARTIDA%TYPE;
         --
         Info_Exception          Exception;
         Bpa_Exception           Exception;
         Bcc_Interface           Exception;
         Bcd_Interface           Exception;
         Bpr_Interface           Exception;
         Bcxl_Interface          Exception;
         vErr                    Varchar2(6);
         vMens                   Varchar2(1000);
         vSistema                Varchar2(2);
         Vsequim                 varchar2(10);
         vMensaj                 varchar2(100);               
         vLAsientos              number;
         vCodNicho               pa.cliente.cod_nicho%type;
         --
          
    BEGIN
                
        Vsequim := '0';
        vMensaj    := 'Error en Ejecucion del proceso Aplicar Reclasificacion'||vFecha;
        vContador:=0;

            -- INICIA GAUGE ORACLE
               vcantidadtoTal := vContador;
               vcantidadprocesada := 0;
            
            -- ANCHO DE LA BARRA
               --SET_ITEM_PROPERTY('etiquetas.et_gauge',WIDTH,0);
               --:etiquetas.et_avance := '0%';
            
            -- DESPLIEGA OBJETOS
               --SET_ITEM_PROPERTY('etiquetas.et_gauge',DISPLAYED,PROPERTY_TRUE);    
               --SET_ITEM_PROPERTY('etiquetas.et_avance',DISPLAYED,PROPERTY_TRUE);    
               synchronize;    

        Vsequim := '1';

        Begin
            Select count(*)
            Into vCant
            from cambios_Oficiales_Tmp
            Where FECHAPROCESO <= vFecha;--dfatule 03082007
            If vCant > 0 then
                Delete cambios_Oficiales_Tmp
                Where FECHAPROCESO <= vFecha;--dfatule 03082007                
             salvar_escondido;    
            End If;
        Exception
          when others then
             vCant := 0;
        End;
                    
        For a in CO Loop --busco los cambios aprobados
            If a.cod_cliente is not null Then             
                --uso una tabla temporal para listar los codigos que intervienen en esta actualizacion
                 Begin
                     Insert into cambios_Oficiales_Tmp(COD_EJECUTIVO_TITULAR, COD_AGENCIA_TITULAR , COD_AGENCIA_SOLICITA ,
                     COD_EJECUTIVO_SOLICITA , FECHA_SOLICITUD , COD_CLIENTE , FECHAPROCESO)
                     Values (a.COD_EJECUTIVO_TITULAR, a.COD_AGENCIA_TITULAR , a.COD_AGENCIA_SOLICITA ,
                     a.COD_EJECUTIVO_SOLICITA , a.FECHA_SOLICITUD ,  A.COD_CLIENTE , vFecha);
                 Exception
                     When Dup_val_on_Index Then
                         Null;                     
                     When Others Then 
                            control.mensaje     := 'Error Insertando clientes individuales de la reasignacion '||SQLERRM;
                            Message(control.mensaje);
                            vSistema             := Variables.codsistema;--'PA'
                            vErr                 := '000688';
                            vMens                := 'Insertando clientes individuales de la reasignacion ' || SQLERRM;
                            v_Mensaje            := control.mensaje;                        
                            Raise Bpa_Exception;
                 End;
                salvar_escondido;
                
                vContador := vContador + 1 ;    

                control.mensaje := 'Buscando Clientes a I-Reasignar Ejecutivo-Cliente-Contador: '||a.COD_EJECUTIVO_TITULAR||'-'||a.COD_CLIENTE||'-'||vContador;            

                
            Else --si es masivo
                for b in MAS_CLIENTE(a.cod_ejecutivo_titular) Loop --busco los codigos de masivos
                
                    --uso una tabla temporal para listar los codigos que intervienen en esta actualizacion
                 Begin
                     Insert into cambios_Oficiales_Tmp(COD_EJECUTIVO_TITULAR, COD_AGENCIA_TITULAR , COD_AGENCIA_SOLICITA ,
                     COD_EJECUTIVO_SOLICITA , FECHA_SOLICITUD , COD_CLIENTE , FECHAPROCESO)
                     Values (a.COD_EJECUTIVO_TITULAR, a.COD_AGENCIA_TITULAR , a.COD_AGENCIA_SOLICITA ,
                     a.COD_EJECUTIVO_SOLICITA , a.FECHA_SOLICITUD , b.COD_CLIENTE , vFecha);
                 Exception
                     When Dup_val_on_Index Then
                         Null;                 
                     When Others Then 
                            control.mensaje     := 'Error Insertando clientes Masivos de la reasignacion '||SQLERRM;
                            Message(control.mensaje);
                            vSistema             := Variables.codsistema;--'PA'
                            vErr                 := '000688';
                            vMens                := 'Insertando clientes Masivos de la reasignacion ' || SQLERRM;
                            v_Mensaje            := control.mensaje;                        
                            Raise Bpa_Exception;
                 End;

                 
                    salvar_escondido;

                    vContador := vContador + 1 ;
                    
                    control.mensaje := 'Buscando Clientes a M-Reasignar Ejecutivo-Cliente-Contador: '||a.COD_EJECUTIVO_TITULAR||'-'||b.COD_CLIENTE||'-'||vContador;                
                 
                End Loop;
            

            End If;            


        End Loop;
        
        Vsequim := '2';
        
        if ( vContador = 0 ) then          
              control.mensaje  := 'No existen cambios de agencia a cuentas por procesar';
              vSistema         := 'CC';
              vErr             := '000200';
              vMens            := 'No existen cambios de agencia a cuentas por procesar';--Null;
              
              Raise Info_Exception;
        end if;      
        
        If vContador > 0 Then
            Begin
                Select count(*)
                Into VCANTIDADTOTAL
                From cambios_Oficiales_Tmp
                Where FECHAPROCESO = vFecha;
            Exception
                When Others Then
                 VCANTIDADTOTAL := 0;
                    Vsequim := '3';        
                    vMensaj := 'Error al contar cambios para la fecha';
                    Raise Form_trigger_Failure;
            End;

             control.mensaje := 'Buscando productos para Reclasificar ';
                  
             Begin
                         
                 Vsequim := '4';
                 vMensaj := 'Error de la caratula del asiento';                     
                 
                 CG.CG_UTL.Caratula_Del_Asiento(Variables.CODEMPRESA,
                                                  Variables.CodAgencia, --Agencia de Conexion del usuario
                                                  vAplic,
                                                  vSubAplic,
                                                  vTipoTrans,
                                                  vSubTransCambio,
                                                  vNumTransa,
                                                  VDESCRIPCION,
                                                  vProxFecha,
                                                  vProxFecha,
                                                  VNUMERO_ASIENTO,
                                                  Variables.Usuario,
                                                  VMENSAJE_ERROR);
                    
                 Vsequim := '5';
                      
                  if VMENSAJE_ERROR is not null then
                      message('Caratula Asiento '||VMENSAJE_ERROR||'-'||VNUMERO_ASIENTO);    
                      vSistema                  := Variables.codsistema;--'PA'
                      vErr                      := '000688';
                      vMens                     := 'caratula Asiento '||VMENSAJE_ERROR||'-'||VNUMERO_ASIENTO;                          
                      raise BCG_INTERFACE;
                  End if;
                            
                Vsequim := '6';           
                
                For C in CO_TMP Loop    --Todos los clientes que se van a reclasificar

                    -- Buscamos el codigo de nicho correspondiente al oficial seleccionado.
                    -- RCEBALLOS 25/01/2011
                    Busca_nicho(C.COD_EJECUTIVO_SOLICITA, vCodNicho);
                    
                    Begin--actualizo el oficial del cliente y el trigger Oficial_Cliente actualiza el oficial y la agencia en sus cuentas
                        Update Cliente
                        Set Cod_Oficial = C.COD_EJECUTIVO_SOLICITA,
                                Cod_agencia = C.COD_AGENCIA_SOLICITA,
                                FEC_ACTUALIZA_INGRESOS = trunc(sysdate) -- RCEBALLOS 19/01/2011, Actualizo la fecha de actualizacion de los ingresos del cliente
                                --cod_nicho   = vCodNicho  -- RCEBALLOS 25/01/2011, Actualizamos el codigo de nicho de acuerdo al oficial
                                --DNUR:08052015 se comenta la asignacion de nichos segun proyecto Mi Negocio
                        Where cod_cliente = c.cod_cliente;
                        --guardar cambio en el oficial
                        --
                            Vsequim := '6.1';    
                            vMensaj := 'Actualizando cliente '||c.cod_cliente;                    
                    Exception                 
                        When Others then 
                            --Message(' Error Actualizando Cliente-Agencia-Ejecutivo '||c.cod_cliente||'-'||C.COD_AGENCIA_SOLICITA||'-'||C.COD_EJECUTIVO_SOLICITA||' -Error: '||SQLERRM);Message(' ');
                            If sqlcode = '-2291' Then
                                Message(' Dato relacionado con el cliente no existe en la tabla cliente');Message('');
                            ElsIf sqlcode = '-4098' then
                                Message(' Procedimiento que cambia Oficial de Agencia esta Invalido, Contactar al Administrador del Sistema!!!');Message('');
                            End If;
                            Vsequim := '6.2';    
                            vMensaj := 'Error actualizando cliente '||c.cod_cliente;
                            --
                            vSistema                 := Variables.codsistema;--'PA'
                            vErr                     := '000688';
                            vMens                    := 'actualizando Cliente '||c.cod_cliente;
                            Raise Bpa_Exception;
                    End;            
                    
                    control.mensaje := 'Reclasificando Asientos de Productos para el cliente '||c.cod_cliente;    
                            
                        Vsequim := '7';
                        vMensaj := 'Error despues de actualizar cliente ';
                        --dfatule 10092007
                         --Busco los productos del clientes
                         
                        For d in prestamo(c.cod_cliente) loop --busco prestamos
                            
                            control.mensaje := 'Reclasificando Asientos de Prestamos para el cliente '||c.cod_cliente;                
                            
                            Asiento_Reclasificacion_Pr(Variables.CODEMPRESA,
                                                       Variables.CodAgencia,
                                                       d.TIPO_CREDITO,
                                                       d.estado,
                                                       VNUMERO_ASIENTO,
                                                       d.no_credito,
                                                       vAplic,
                                                       vSubAplic,
                                                       vTipoTrans,
                                                       vSubTransCambio,
                                                       vNumTransa,
                                                       vdescripcion,
                                                       vProxFecha,
                                                       c.cod_cliente,
                                                       c.COD_AGENCIA_TITULAR,
                                                       c.COD_AGENCIA_SOLICITA,
                                                       d.SALDO_CREDITO,
                                                       d.intereses, --ACollado.30/05/2023--FDS-1754-Agrego Intereses
                                                       d.intereses_su,--ACollado.30/05/2023--FDS-1754-Agrego Intereses
                                                       v_tc1,
                                                       v_tc2,
                                                       VMensajeErr
                                                       );
                                                       
                            v_E_PRSaldos := v_E_PRSaldos + d.SALDO_CREDITO;
                                                                                                                                
                                                                                                                                
                            If VMensajeErr is not null Then
                                    Raise Bpr_Interface;
                            End If;                                                                                                                                    

                        End Loop;  
                    
                        Vsequim := '8';
                        vMensaj := 'Error despues del asiento de reclasificacion para PR ';
                      
                      For e in Certificado(c.cod_cliente) Loop --busco Certificados    

                          
                              control.mensaje := 'Reclasificando Asientos de Certificados para el cliente '||c.cod_cliente;                

                              Asiento_Reclasificacion_CD (Variables.CODEMPRESA,
                                                          Variables.CodAgencia,
                                                          e.COD_CARTERA,
                                                          e.Tip_Certificado,
                                                          e.cod_retencion,
                                                          e.estado,
                                                          VNUMERO_ASIENTO,
                                                          e.cuenta_contable,
                                                          e.num_certificado,
                                                          vAplic,
                                                          vSubAplic,
                                                          vTipoTrans,
                                                          vSubTransCambio,
                                                          vNumTransa,
                                                          vdescripcion,
                                                          vProxFecha,
                                                          c.cod_cliente,
                                                          c.COD_AGENCIA_TITULAR,
                                                          c.COD_AGENCIA_SOLICITA,
                                                          e.monto_cd,
                                                          e.monto_original, --ACollado.30/05/2023--FDS-1754-Agrego monto original
                                                          E.MON_INT_X_PAGAR,--DFATULE 10092007
                                                          e.Pla_Dias            ,--DFATULE 10092007
                                                          e.Clasificacion    ,--DFATULE 10092007
                                                          e.Cod_Moneda        ,--DFATULE 10092007
                                                          e.MON_ACUM_INT_CAP,         --ACollado.30/05/2023--FDS-1754-Agrego Intereses
                                                          v_tc1,
                                                          v_tc2,
                                                          VMensajeErr
                                                          );
                                                          
                            v_E_CDSaldos := v_E_CDSaldos + e.monto_cd;                                                                                
                                                    
                            If VMensajeErr is not null then
                                Raise Bcd_Interface;
                            End If;
                                
                                                                                                
                      End Loop;
                      
                      Vsequim := '9';
                      vMensaj := 'Error despues del asiento de reclasificacion para CD ';

                      For f in Cefectivo(c.cod_cliente) Loop --busco las cuentas de efectivo del cliente

                            control.mensaje := 'Reclasificando Asientos de Cuentas de Efectivo para el cliente '||c.cod_cliente;
                                   

                              Asiento_Reclasificacion_CC (Variables.CODEMPRESA,
                                                          Variables.CodAgencia,
                                                          f.cod_producto,
                                                          f.IND_ESTADO,
                                                          VNUMERO_ASIENTO,
                                                          f.num_cuenta,
                                                          vAplic,
                                                          vSubAplic,
                                                          vTipoTrans,
                                                          vSubTransCambio,
                                                          vNumTransa,
                                                          vdescripcion,
                                                          vProxFecha,
                                                          c.cod_cliente,
                                                          c.COD_AGENCIA_TITULAR,
                                                          c.COD_AGENCIA_SOLICITA,
                                                          f.SALDO_CONTABILIZADO,
                                                          F.SOBREG_MENOS_48H,
                                                          F.SOBREG_MAS48H,
                                                          f.int_por_pagar,--ACollado.30/05/2023--FDS-1754-
                                                          f.sal_embargado,--ACollado.30/05/2023--FDS-1754-
                                                          v_tc1,
                                                          v_tc2,
                                                          vMensajeErr
                                                          );
                                                
                            v_E_CCSaldos := v_E_CCSaldos + abs(f.SALDO_CONTABILIZADO);
                                                
                            If     vMensajeErr is not null Then
                                Raise Bcc_Interface;
                            End If;
                                                                                
                                      
                      End Loop;
                      
                      Vsequim := '10';
                      vMensaj := 'Error despues del asiento de reclasificacion para CC ';

                      For G    in CxL(c.cod_cliente) Loop --busco las cuentas X Liquidar del cliente

                            CL_Tipo_cuenta (G.COD_MOTIVO,
                                            G.COD_MONEDA,
                                            G.TIPO_CUENTA,
                                            Vtipomotivo,
                                            Vcodsistema,
                                            Vaplicacomision
                                            );                    
                                                                            
                            control.mensaje := 'Reclasificando Asientos de Cuentas X Liquidar para el cliente '||c.cod_cliente;                
                                                                            
                            Asiento_Reclasificacion_CxL(Variables.CODEMPRESA,
                                                        Variables.CodAgencia,
                                                        g.cod_motivo,
                                                        g.cod_moneda,
                                                        variables.monedabase,
                                                        G.Tipo_cuenta,
                                                        Vtipomotivo,
                                                        Vcodsistema,
                                                        VNUMERO_ASIENTO,
                                                        g.NUM_DOCUMENTO,
                                                        vAplic,
                                                        vSubAplic,
                                                        vTipoTrans,
                                                        vSubTransCambio,
                                                        vNumTransa,
                                                        vdescripcion,
                                                        vProxFecha,
                                                        c.cod_cliente,
                                                        c.COD_AGENCIA_TITULAR,
                                                        c.COD_AGENCIA_SOLICITA,
                                                        g.SALDO_ACTUAL,
                                                        v_tc1,
                                                        v_tc2,
                                                        VMensajeErr
                                                        );          

                            v_E_CXLSaldos := v_E_CXLSaldos + G.SALDO_ACTUAL;
                                                    
                            If     vMensajeErr is not null Then
                                Raise Bcxl_Interface;
                            End If;
                                                    
                      End Loop;

                     Vsequim := '11';
                     vMensaj := 'Error despues del asiento de reclasificacion para CxL ';
                    --busco las cuentas por le codigo de cliente y para cada sistema realizo un asiento 
                    --debito y credito sumarizando con una sola caratula para todo el proceso.


                    -- INCREMENTA EL CONTADOR
                    vcantidadprocesada := vcantidadprocesada + 1;
                    -- ACTUALIZA BARRA    
                    -- SET_ITEM_PROPERTY('ETIQUETAS.ET_GAUGE',WIDTH,(656*(((VCANTIDADPROCESADA*100)/VCANTIDADTOTAL)/100)));
                    -- :ETIQUETAS.ET_AVANCE := TO_CHAR(ROUND(((VCANTIDADPROCESADA*100)/VCANTIDADTOTAL)))||'%'; 
                         
                End Loop;

                 control.mensaje := ' Efectuando Cuadre Asiento: '||VNUMERO_ASIENTO||' Monto Difiere: '||VMontoDife;
                       
                 Vsequim := '12';
                 vMensaj := 'Error despues Efectuando Cuadre Asiento: '||VNUMERO_ASIENTO||' Monto Difiere: '||VMontoDife;    
                   
                 v_E_Saldos := v_E_CCSaldos + v_E_PRSaldos + v_E_CDSaldos + v_E_CXLSaldos;                                      
                    
                 If v_E_Saldos > 0  Then
                        
                    CG.CG_UTL.Cuadre_Asiento(variables.Codempresa,
                                           vProxFecha,
                                           VNUMERO_ASIENTO,
                                           VMontoDife,
                                           VMensajeErr);
                             
                      If vMontoDife Is null then
                          
                          Begin
                              Select count('X')
                              Into  vLAsientos
                              From cg_movimiento_resumen a, CG_MOVIMIENTO_DETALLE b
                                 where a.CODIGO_EMPRESA       = b.CODIGO_EMPRESA
                                      And a.FECHA_MOVIMIENTO  = b.FECHA_MOVIMIENTO
                                      And a.NUMERO_ASIENTO    = b.NUMERO_ASIENTO
                                      And a.codigo_empresa    = to_number(variables.CodEmpresa)
                                   And a.fecha_movimiento     = vProxFecha
                                   And a.numero_asiento       = VNUMERO_ASIENTO;
                          Exception
                              When Others Then
                               vLAsientos := 0;    
                          End;
                          
                          If vLAsientos = 0 then
                                        control.mensaje := 'Clientes '||vcantidadprocesada;                    
                                        
                                           Begin
                                                   delete cg_movimiento_resumen
                                                 where codigo_empresa     = to_number(variables.CodEmpresa)
                                                   and fecha_movimiento    = vProxFecha
                                                   and numero_asiento        = VNUMERO_ASIENTO;   
                                              salvar_escondido;
                                           Exception 
                                               When Others then 
                                                    control.mensaje     := 'Error borrando Encabezado del asiento '||SQLERRM;
                                                     message(control.mensaje); 
                                                    vSistema              :=  Variables.codsistema;--'PA'
                                                    vErr                  := '000688';
                                                    vMens                 := ' borrando Encabezado del asiento '||SQLERRM;
                                                    v_Mensaje             := control.mensaje;                        
                                                    Raise Bpa_Exception;
                                           End;
                           
                                                For H in CO Loop
                                                    
                                                        If  Form_Success Then
                                                              Begin
                                                                  Update Cambios_Oficiales
                                                                  Set       --USUARIO_APRORECH            =    :VARIABLES.USUARIO,
                                                                                 --FECHA_APRORECH                =    vFecha,
                                                                                 MODIFICADO_POR                = VARIABLES.USUARIO,
                                                                                 FECHA_MODIFICACION        = Sysdate,  
                                                                                 Estado                             = 'A'
                                                                  Where  COD_EJECUTIVO_TITULAR    = H.Cod_Ejecutivo_Titular
                                                                  And         COD_AGENCIA_TITULAR        = H.Cod_Agencia_Titular
                                                                  And         COD_AGENCIA_SOLICITA        = H.Cod_Agencia_Solicita
                                                                  And         COD_EJECUTIVO_SOLICITA = H.Cod_Ejecutivo_Solicita
                                                                  And         FECHA_SOLICITUD                =    H.Fecha_solicitud
                                                                  And         ESTADO                                    = H.Estado;
                                                              Exception 
                                                                     When Dup_val_on_Index Then
                                                                         Null;                  
                                                                  When Others then 
                                                                        control.mensaje     := 'Error en Cierre Reasignacion de cliente entre Oficiales, Actualizando Cambio Oficiales '||SQLERRM;
                                                                        vSistema            :=  Variables.codsistema;--'PA'
                                                                        vErr                := '000688';
                                                                        vMens               := 'en Cierre Reasignacion de cliente entre Oficiales, Actualizando Cambio Oficiales '|| SQLERRM;
                                                                        v_Mensaje           := control.mensaje;                        
                                                                        Raise Bpa_Exception;
                                                              End;
                                                              
                                                              Begin
                                                                  Delete cambios_Oficiales_Tmp
                                                                  Where FECHAPROCESO = vFecha;
                                                              Exception 
                                                                  When Others then 
                                                                        control.mensaje     := 'Error en Cierre Reasignacion de cliente entre Oficiales, borrando Cambio Oficiales temporal '||SQLERRM;
                                                                        vSistema             := Variables.codsistema;--'PA'
                                                                        vErr                 := '000688';
                                                                        vMens                := ' en Cierre Reasignacion de cliente entre Oficiales, borrando Cambio Oficiales temporal ' || SQLERRM;
                                                                        v_Mensaje            := control.mensaje;                        
                                                                        Raise Bpa_Exception;
                                                              End;    
                                                              
                                                            salvar_escondido;    
                                                                
                                                        End if;
                                                        
                                                End Loop;                   
                                              
                           --dfatule 06092007: Fin
                          Else--dfatule 06092007
                                    Message(SQLERRM); 
                                    Message('Asientos: '||VNUMERO_ASIENTO||' Monto Difiere: '||VMontoDife||' Error '||VMensajeErr);    
                                            
                                      vSistema            :=     Variables.codsistema;--'PA'
                                      vErr                := '000688';
                                      vMens               := ' No hay Monto Difiere en Cuadre Asiento: '||VNUMERO_ASIENTO||' Monto Difiere: '||VMontoDife||' Error '||VMensajeErr;
                                      raise BCG_INTERFACE;
                          end If;    
                      Elsif VMensajeErr is not null then
                              vSistema           := Variables.codsistema;--'PA'
                              vErr               := '000688';
                              vMens              := ' Mensaje Error en Cuadre Asiento: '||VNUMERO_ASIENTO||' Monto Difiere: '||VMontoDife||' Error '||VMensajeErr;
                              raise BCG_INTERFACE;
                          
                      ElsIf VMensajeErr is null Then
                            salvar_escondido;
                            control.mensaje := 'Clientes '||vcantidadprocesada||' Asiento '||VNUMERO_ASIENTO;                        
                             message(control.mensaje);
                              
                      End if;
                    
                        --:control.mensaje := ' Cuadre Asiento Efectuado: '||VNUMERO_ASIENTO||' Monto Difiere: '||VMontoDife;
                        --Synchronize;
                        --Message(:control.mensaje); Message(' ');
                        
                 Else
                    control.mensaje := 'Clientes '||vcantidadprocesada;                    
                        Synchronize;    
                      --message(:control.mensaje); Message('');

                       Begin
                               delete cg_movimiento_resumen
                             where codigo_empresa     = to_number(variables.CodEmpresa)
                               and fecha_movimiento    = vProxFecha
                               and numero_asiento        = VNUMERO_ASIENTO;   
                          salvar_escondido;
                       Exception 
                           When Others then 
                                control.mensaje     := 'Error borrando Encabezado del asiento '||SQLERRM;
                                message(control.mensaje); 
                                vSistema            := Variables.codsistema;--'PA'
                                vErr                := '000688';
                                vMens               := ' borrando Encabezado del asiento '||SQLERRM;
                                v_Mensaje           := control.mensaje;                        
                                Raise Bpa_Exception;
                       End;
                 End If;  
                                        
             End;
             
            if NOT FORM_SUCCESS then
                   vSistema := Variables.codsistema;--'PA'            
                   vErr := '000688';
                   vMens := 'Reasignando, Validando forma en Aplicar Reclasificacion '||SQLERRM;     
                   Raise Bpa_Exception;
            end if;
             
        End If;

        --Set_Application_Property(Cursor_style, 'DEFAULT');      
        --Message('Ejecucion Sin errores, Cerrando Solicitudes Aplicadas'); Message(' ');

        For H in CO Loop
            
            If VMensajeErr is null And Form_Success Then
                  Begin
                      Update Cambios_Oficiales
                      Set    MODIFICADO_POR       = VARIABLES.USUARIO,
                             FECHA_MODIFICACION   = Sysdate,  
                             Estado               = 'A'
                       Where  COD_EJECUTIVO_TITULAR    = H.Cod_Ejecutivo_Titular
                         And         COD_AGENCIA_TITULAR       = H.Cod_Agencia_Titular
                         And         COD_AGENCIA_SOLICITA      = H.Cod_Agencia_Solicita
                         And         COD_EJECUTIVO_SOLICITA    = H.Cod_Ejecutivo_Solicita
                         And         FECHA_SOLICITUD           = H.Fecha_solicitud
                         And         ESTADO                    = H.Estado;
                         
                  Exception 
                         When Dup_val_on_Index Then
                             Null;                  
                      When Others then 
                            control.mensaje   := ' Actualizando Cambio Oficiales '||SQLERRM;
                            vSistema          := Variables.codsistema;--'PA'
                            vErr              := '000688';
                            vMens             := ' Actualizando Cambio Oficiales '|| SQLERRM;
                            v_Mensaje         := control.mensaje;                        
                            Raise Bpa_Exception;
                  End;
                      
                  Begin
                      Delete cambios_Oficiales_Tmp
                      Where FECHAPROCESO = vFecha;
                  Exception 
                      When Others then 
                            control.mensaje             := ' borrando Cambio Oficiales temporal '||SQLERRM;
                            message(control.mensaje);
                            vSistema                    := Variables.codsistema;--'PA'
                            vErr                        := '000688';
                            vMens                       := ' borrando Cambio Oficiales temporal ' || SQLERRM;
                            v_Mensaje                   := control.mensaje;                        
                            Raise Bpa_Exception;
                  End;    
                      
                salvar_escondido;    
                        
            End if;
                
        End Loop;
            
        v_Mensaje := control.mensaje;    


    Exception
        When Info_Exception Then
            message(vErr||'-'||vMens);
            BITACORA_CIERRES_ERROR (CONTROL.FECHA_PROCESO, 'I');
        When Bpa_Exception Then
            message(vErr||'-'||vMens);
            BITACORA_CIERRES_ERROR (CONTROL.FECHA_PROCESO);
            --Set_Application_Property(Cursor_style, 'DEFAULT');      
            --Utilitarios.Mensaje(vErr, codidioma, vSistema,Acknowledge,vMens);
            --exit_form(no_commit, no_validate);
                
        When BCG_INTERFACE Then
                Message('Error BCG '||VMensajeErr);
                BITACORA_CIERRES_ERROR (CONTROL.FECHA_PROCESO);
                --Set_Application_Property(Cursor_style, 'DEFAULT');      
                --Utilitarios.Mensaje(vErr, :codidioma, vSistema,Acknowledge,vMens);
                --exit_form(no_commit, no_validate);        
        
        When Bcc_Interface Then      
                Message('Error BCC '||VMensajeErr);
                BITACORA_CIERRES_ERROR (CONTROL.FECHA_PROCESO);
                --Set_Application_Property(Cursor_style, 'DEFAULT'); 
                --exit_form(no_commit, no_validate);
        
        When Bcd_Interface Then
                BITACORA_CIERRES_ERROR (CONTROL.FECHA_PROCESO);      
                Message('Error BCD '||VMensajeErr);
                --Set_Application_Property(Cursor_style, 'DEFAULT');
                --exit_form(no_commit, no_validate);
        
        When Bpr_Interface Then
                BITACORA_CIERRES_ERROR (CONTROL.FECHA_PROCESO);      
                Message('Error BPR '||VMensajeErr);
                --Set_Application_Property(Cursor_style, 'DEFAULT');
                --exit_form(no_commit, no_validate);
            
        When Bcxl_Interface Then
                BITACORA_CIERRES_ERROR (CONTROL.FECHA_PROCESO);      
                Message('Error BCXL '||VMensajeErr);
                --Set_Application_Property(Cursor_style, 'DEFAULT');
                --exit_form(no_commit, no_validate);
                    
        When Others Then
                Message(Vsequim ||'-'|| vMensaj ||'-'|| Sqlerrm);
                BITACORA_CIERRES_ERROR (CONTROL.FECHA_PROCESO);
                --Set_Application_Property(Cursor_style, 'DEFAULT');        
                --exit_form(no_commit, no_validate);

    END;
    
    PROCEDURE ValidarCierre_Mensual(Pmensaje in out varchar2) IS
    --EFECTUA : ValidarCierre Mensual                                  
    
        vFecha Date;
        vMensaje           varchar2(1000):=Null;
        Vsequim                            varchar2(10);
        vMensaj                            varchar2(100);               
   
    BEGIN
        
        Vsequim := '0';
        vMensaj    := 'Error Validando el cierre Mensual';
        
                control.mensaje := 'Validando el cierre mensual de CC para la fecha:'||variables.ANTERIOR_DIA_HABIL; 
        
       begin
          -- Se valida se haya ejecutado el cierre mensual
          select fec_cierre_mes
           into vFecha
           from cierre_x_grupos
           where ( cod_empresa = variables.CodEmpresa   )
           and   ( cod_grupo   = variables.cod_grupo );
       exception
          when no_data_found then
             vFecha := null;
          when others then
             --bell;
             --Error al verificar la fecha de ultima ejecucion del proceso
             UTILITARIOS.mensaje_error('000209',variables.CodIdioma,'CC',sqlcode);
             Pmensaje := 'Error al verificar la fecha de ultima ejecucion del proceso';
             --dfatule 25092007
             Vsequim := '1';
             vMensaj    := 'Error Validando el cierre mensual: Error al verificar la fecha de ultima ejecucion del proceso'; 
             --                 
             --raise form_trigger_failure;
             Message('Pmensaje: '||vMensaj);
             BITACORA_CIERRES_ERROR (CONTROL.FECHA_PROCESO);
       end;
       
      
       if ( vFecha is null                    )
       --or ( vFecha <> :ANTERIOR_DIA_HABIL ) --dfatule 25/09/2007
       or ( vFecha < variables.ANTERIOR_DIA_HABIL )
       --si la fecha del cierre de CC es inferior al anterior dia habil
       --solo debe continuar si es mayor o igual al anterior dia habil.
       then
            --bell;
            --El cierre mensual no ha sido ejecutado
            --UTILITARIOS.mensaje('000199',:variables.CodIdioma,'CC');
            --Set_Application_Property(Cursor_style, 'DEFAULT');
            Pmensaje := 'El cierre mensual no ha sido ejecutado';
            Vsequim := '2';
            vMensaj    := 'Error Validando el cierre mensual: Fecha Ultimo Cierre de CC: '||vFecha ||' Es Menor que la Fecha de Cierre: '||variables.ANTERIOR_DIA_HABIL;
            Message(Pmensaje||' - '||vMensaj);                     
          BITACORA_CIERRES_ERROR (CONTROL.FECHA_PROCESO);   
       end if;
       
    EXCEPTION
           When Others Then
            --Set_Application_Property(Cursor_style, 'DEFAULT');        
             Message(Vsequim ||'-'|| vMensaj); 
             BITACORA_CIERRES_ERROR (CONTROL.FECHA_PROCESO);
             --exit_form(no_commit, no_validate);               
    end ValidarCierre_Mensual;
    
    PROCEDURE P_Mensual(vFecha in Date,--:variables.ANTERIOR_DIA_HABIL 
                        vProxFecha in Date,--:variables.fecha_sistema
                        v_Mensaje in out Varchar2) IS
    --EFECTUA : Ejecuta el proceso mensual                                     

    Cursor CO is
        Select COD_EJECUTIVO_TITULAR, COD_AGENCIA_TITULAR , COD_AGENCIA_SOLICITA ,
        COD_EJECUTIVO_SOLICITA , FECHA_SOLICITUD , ESTADO , MODIFICADO_POR , OBSERVACION , 
        COD_CLIENTE , FECHA_MODIFICACION , FECHA_TITULAR_R , FECHA_TITULAR_A 
        from cambios_Oficiales
        Where Estado                                     = 'P'
        And     Modificado_por                     is not null
        And     Fecha_Modificacion             is not null
        --And     FECHA_SOLICITUD                 <= vFecha-- validar ano y mes --dfatule 24/08/2007
        And     Fecha_Aplica                        <= vFecha
        Order by COD_EJECUTIVO_TITULAR,COD_EJECUTIVO_SOLICITA, FECHA_SOLICITUD;
        
    Cursor MAS_CLIENTE(v_oficial in Varchar2) is
        Select cod_cliente
        From Cliente
        Where Cod_oficial = v_oficial
        Order by Cod_empresa, Cod_cliente;
        
    Cursor CO_tmp is
        Select COD_EJECUTIVO_TITULAR, COD_AGENCIA_TITULAR , COD_AGENCIA_SOLICITA ,
        COD_EJECUTIVO_SOLICITA , FECHA_SOLICITUD, COD_CLIENTE, FECHAPROCESO 
        from cambios_Oficiales_Tmp
        Where FECHAPROCESO = vFecha
        Order by COD_CLIENTE, FECHAPROCESO;

    Cursor prestamo (vcliente varchar2) is
        Select prc.CODIGO_EMPRESA,prc.CODIGO_AGENCIA, prc.CODIGO_CLIENTE, 
        prc.NO_CREDITO,prc.CODIGO_MONEDA,
        prc.ESTADO,prc.TIPO_CREDITO,pri.FECHA_LIQUIDACION,
        Nvl(pri.SALDO_CREDITO,0) SALDO_CREDITO,
        --ACollado.30/05/2023--Agrego intereses
        (Nvl(int_acumulados_antes,0)+Nvl(int_acumulados_liq,0)/*+Nvl(int_suspenso_antes,0)+Nvl(int_suspenso_liq,0)*/-Nvl(int_pagados_antes,0)) Intereses,
        Nvl(int_suspenso_antes,0)+Nvl(int_suspenso_liq,0) intereses_su
        from pr_creditos prc, pr_intereses_generados pri
        Where prc.CODIGO_EMPRESA         = pri.CODIGO_EMPRESA
        And     prc.NO_CREDITO                 = pri.NO_CREDITO
        And        prc.CODIGO_EMPRESA         = VARIABLES.CODEMPRESA
        And        prc.CODIGO_CLIENTE         = vcliente
      And        pri.FECHA_LIQUIDACION = vFecha
      And        /*pri.Estado--dfatule 03082007*/ prc.ESTADO                        In ('D','E','J')--dfatule 10092007: Se incluyo el estado E por los reestructurados
      And        Nvl(pri.SALDO_CREDITO,0) > 0
        --Order by prc.CODIGO_EMPRESA,prc.NO_CREDITO; --dfatule 31082007  
        group by prc.CODIGO_EMPRESA,prc.CODIGO_AGENCIA,prc.CODIGO_CLIENTE,
                          prc.NO_CREDITO,prc.CODIGO_MONEDA,
                         prc.ESTADO,prc.TIPO_CREDITO,pri.FECHA_LIQUIDACION,
                       Nvl(pri.SALDO_CREDITO,0),
                        --ACollado.30/05/2023--Agrego intereses
                        --ACollado.09/01/2023--Se iguala a los campos del Select para que no termine en error, tal como esta en Aplica_Diario
                       (Nvl(int_acumulados_antes,0)+Nvl(int_acumulados_liq,0)/*+Nvl(int_suspenso_antes,0)+Nvl(int_suspenso_liq,0)*/-Nvl(int_pagados_antes,0)),
                       Nvl(int_suspenso_antes,0)+Nvl(int_suspenso_liq,0);

    Cursor Certificado (vcliente varchar2) is
        Select cdc.cod_empresa, cdc.num_certificado, cdc.COD_CARTERA, cdc.estado, 
        cdc.cuenta_contable, cdc.cliente, cdc.cod_producto, cdc.Tip_Certificado, 
        cdi.fecha_calculo, Nvl(cds.SALDO_AL_CIERRE,0) monto_cd, cdi.COD_RETENCION,
        NVL(cdc.MON_INT_X_PAGAR,0) MON_INT_X_PAGAR, cdc.pla_dias, cdc.Clasificacion, cdc.cod_moneda, --dfatule 10092007
        nvl(cdc.MON_ACUM_INT_CAP,0) MON_ACUM_INT_CAP,  --ACollado.30/05/2023--Agrego intereses capitalizados
        nvl(cdc.monto_original,0) monto_original --FDS-1754.Agrego monto original
        from cd_certificado cdc, CD_INTERES cdi, CD_SALDOS_AL_CIERRE CDS
        Where cdc.COD_EMPRESA         = cdi.COD_EMPRESA
        And      cdc.num_certificado = cdi.num_certificado
        AND      cdc.COD_EMPRESA         = cds.COD_EMPRESA
        And      cdc.num_certificado = cds.num_certificado
        And      cdi.fecha_calculo     = cds.FECHA_CIERRE    
        And      cdc.COD_EMPRESA         = VARIABLES.CODEMPRESA
        And      cdc.cliente                 = vcliente
        And      cds.FECHA_CIERRE         = VARIABLES.ULT_DIA_MES
        And      cdc.estado                     in ('A','R');

    Cursor Cefectivo (vcliente varchar2) is
        Select CE.COD_EMPRESA, CE.NUM_CUENTA, CE.COD_PRODUCTO, CE.COD_CLIENTE, 
        CE.IND_ESTADO, SD.FECHA, Nvl(SD.SALDO_CONTABILIZADO,0) SALDO_CONTABILIZADO,
        Nvl(SOBREG_MENOS_48H,0) SOBREG_MENOS_48H,
        (Nvl(SOBREG_MAS48H_HASTA30D,0) + Nvl(SOBREG_MAS48H_MAYOR30D,0)) SOBREG_MAS48H,
        NVL(CE.INT_POR_PAGAR,0) INT_POR_PAGAR, --ACollado.30/05/2023:Agrego valores INT_POR_PAGAR, SAL_EMBARGADO| [FDS-1754] Centro de Costos
        NVL(sd.SAL_EMBARGADO, 0) SAL_EMBARGADO
        from CUENTA_EFECTIVO ce, SALDOS_X_DIA sd
        Where ce.COD_EMPRESA = sd.COD_EMPRESA
        And      ce.NUM_CUENTA  = sd.NUM_CUENTA
        And      ce.COD_EMPRESA = VARIABLES.CODEMPRESA
        And   CE.COD_CLIENTE = vcliente
        And      ce.NUM_CUENTA  >    0
        And      SD.FECHA               = vFecha
        Order by CE.COD_EMPRESA, CE.NUM_CUENTA;
        
    Cursor CxL (vcliente varchar2) is
        Select COD_EMPRESA, COD_AGENCIA, COD_SISTEMA, NUM_DOCUMENTO, TIPO_CUENTA, 
        COD_CLIENTE,    FEC_REGISTRO, COD_MONEDA, COD_ESTADO, COD_MOTIVO, 
        CUENTA_CONTABLE, NUM_ASIENTO, SISTEMA_ORIGEN, 
        Nvl(SALDO_ACTUAL,0) SALDO_ACTUAL
        From CL_CUENTAS_X_LIQUIDAR
        Where COD_EMPRESA = variables.codempresa
        AND COD_CLIENTE     = vcliente
        And cod_estado         in ('A','J')
        AND Nvl(saldo_actual,0) >    0 ;

        
      vNumAsiento                     number(15);
      vTC1                                     number(10):=null;
      vTC2                                     number(10):=null;
      vMtoDiferencia                 number(18,2);
      vErrFatal                         boolean := FALSE;
      vAplic                                 varchar2(5) := 'BCG';-- buscar quitar hardcode
      vSubAplic                         number(5)     := '900';-- buscar quitar hardcode
      vTipoTrans                         varchar2(5) :='1';-- buscar quitar hardcode
      vSubTransCambio             varchar2(5) := Null;-- buscar quitar hardcode
        vNumTransa                        varchar2(15):=0;
        vNUMERO_ASIENTO       Number(10);
        vDOCUMENTO            Varchar2(30);  
        vDESCRIPCION          Varchar2(250):='Asiento Reclasificacion Saldos de Productos de Clientes';
      vMENSAJE_ERROR       Varchar2(255);
      BCG_INTERFACE         exception;
      v_Tc1                 number(18,8);
      v_Tc2                 number(18,8);
      vMontoDife                        Number(18,8);
      vMensajeErr                         varchar2(255);
        vCant                                 Number;
      vContador                         number;
      vcantidadtoTal                 number(10);
      vcantidadprocesada         number(10);
      v_E_Saldos                        SALDOS_X_DIA.SALDO_CONTABILIZADO%Type:=0;
      v_E_CCSaldos                    SALDOS_X_DIA.SALDO_CONTABILIZADO%Type:=0;
      v_E_CDSaldos                    CD_INTERES.monto_cd%Type:=0;
      v_E_PRSaldos                    pr_intereses_generados.SALDO_CREDITO%Type:=0;
      v_E_CXLSaldos                    CL_CUENTAS_X_LIQUIDAR.SALDO_ACTUAL%TYPE:=0;
      --CXL
        Vtipomotivo                        CL_MOTIVO.TIPO_MOTIVO%TYPE;
        Vcodsistema                        CL_MOTIVO.COD_SISTEMA%TYPE;
        Vdescmotivo                        cl_contrapartida_contable.DESCRIPCION%TYPE;
        Vaplicacomision                CL_MOTIVO.APLICA_COMISION%TYPE;
        Vcuentacontable              cl_contrapartida_contable.CONTRAPARTIDA%TYPE;
      --
        Info_Exception               Exception;
        Bpa_Exception                Exception;
        Bcc_Interface                Exception;
        Bcd_Interface                Exception;
        Bpr_Interface                Exception;
        Bcxl_Interface               Exception;
        vErr                         Varchar2(6);
        vMens                        Varchar2(1000);
        vSistema                     Varchar2(2);
      Vsequim                        varchar2(10);
        vMensaj                      varchar2(100);               
        --dfatule 04092007
        vLAsientos                   number;
        vCodNicho             pa.cliente.cod_nicho%type;
        --
    BEGIN

        Vsequim := '0';
        vMensaj    := 'Error en Ejecucion del proceso Cierre Reasignacion de cliente entre Oficiales '||vFecha;
        vContador:=0;

            -- INICIA GAUGE ORACLE
               vcantidadtoTal := vContador;
               vcantidadprocesada := 0;
            
            -- ANCHO DE LA BARRA
             --SET_ITEM_PROPERTY('etiquetas.et_gauge',WIDTH,0);
             --:etiquetas.et_avance := '0%';
            
            -- DESPLIEGA OBJETOS
               --SET_ITEM_PROPERTY('etiquetas.et_gauge',DISPLAYED,PROPERTY_TRUE);    
               --SET_ITEM_PROPERTY('etiquetas.et_avance',DISPLAYED,PROPERTY_TRUE);    
               --synchronize;    

        Vsequim := '1';

                    Begin
                        Select count(*)
                        Into vCant
                        from cambios_Oficiales_Tmp
                        Where FECHAPROCESO <= vFecha;--dfatule 03082007
                        If vCant > 0 then
                            Delete cambios_Oficiales_Tmp
                            Where FECHAPROCESO <= vFecha;--dfatule 03082007                
                         salvar_escondido;    
                        End If;
                    Exception
                      when others then
                         vCant := 0;
                    
                    End;


        For a in CO Loop --busco los cambios aprobados


            If a.cod_cliente is not null Then 
                --uso una tabla temporal para listar los codigos que intervienen en esta actualizacion
                 Begin
                     Insert into cambios_Oficiales_Tmp(COD_EJECUTIVO_TITULAR, COD_AGENCIA_TITULAR , COD_AGENCIA_SOLICITA ,
                     COD_EJECUTIVO_SOLICITA , FECHA_SOLICITUD , COD_CLIENTE , FECHAPROCESO)
                     Values (a.COD_EJECUTIVO_TITULAR, a.COD_AGENCIA_TITULAR , a.COD_AGENCIA_SOLICITA ,
                     a.COD_EJECUTIVO_SOLICITA , a.FECHA_SOLICITUD ,  A.COD_CLIENTE , vFecha);
                 Exception
                     When Dup_val_on_Index Then
                         Null;                     
                     When Others Then 
                          --Message('error insertando Individuales');Message('');
                          control.mensaje     := 'Error Insertando clientes individuales de la reasignacion '||SQLERRM;
                          --Synchronize;
                          vSistema            :=  Variables.codsistema;--'PA'
                          vErr                := '000688';
                          vMens               := 'Insertando clientes individuales de la reasignacion ' || SQLERRM;
                          v_Mensaje           := control.mensaje;                        
                          Raise Bpa_Exception;
                 End;
                salvar_escondido;
                
                vContador := vContador + 1 ;    

                control.mensaje := 'Buscando Clientes a I-Reasignar Ejecutivo-Cliente-Contador: '||a.COD_EJECUTIVO_TITULAR||'-'||a.COD_CLIENTE||'-'||vContador;
                --Synchronize;            

                
            Else --si es masivo

                for b in MAS_CLIENTE(a.cod_ejecutivo_titular) Loop --busco los codigos de masivos
                
                    --uso una tabla temporal para listar los codigos que intervienen en esta actualizacion
                 Begin
                     Insert into cambios_Oficiales_Tmp(COD_EJECUTIVO_TITULAR, COD_AGENCIA_TITULAR , COD_AGENCIA_SOLICITA ,
                     COD_EJECUTIVO_SOLICITA , FECHA_SOLICITUD , COD_CLIENTE , FECHAPROCESO)
                     Values (a.COD_EJECUTIVO_TITULAR, a.COD_AGENCIA_TITULAR , a.COD_AGENCIA_SOLICITA ,
                     a.COD_EJECUTIVO_SOLICITA , a.FECHA_SOLICITUD , b.COD_CLIENTE , vFecha);
                 Exception
                     When Dup_val_on_Index Then
                         Null;                 
                     When Others Then 
                             --Message('error insertando masivos');Message('');
                            control.mensaje     := 'Error Insertando clientes Masivos de la reasignacion '||SQLERRM;
                            Synchronize;
                            vSistema            := Variables.codsistema;--'PA'
                            vErr                := '000688';
                            vMens               := 'Insertando clientes Masivos de la reasignacion ' || SQLERRM;
                            v_Mensaje           := control.mensaje;                        
                            Raise Bpa_Exception;
                 End;

                 
                salvar_escondido;

                vContador := vContador + 1 ;
                
                control.mensaje := 'Buscando Clientes a M-Reasignar Ejecutivo-Cliente-Contador: '||a.COD_EJECUTIVO_TITULAR||'-'||b.COD_CLIENTE||'-'||vContador;
                --Synchronize;
                
                 
                End Loop;
            

            End If;            


        End Loop;
        
        Vsequim := '2';
        
                    if ( vContador = 0 ) then
                        --bell;
                       control.mensaje     := 'No existen cambios de agencia a cuentas por procesar';
                       -- Synchronize;      
                      --No existen cambios de agencia a cuentas por procesar
                      vSistema    := 'CC';
                      vErr             := '000200';
                      vMens         := 'No existen cambios de agencia a cuentas por procesar';--Null;
                      v_Mensaje                 := control.mensaje;
                      Raise Info_Exception;
                    end if;      


        If vContador > 0 Then
            Begin
                Select count(*)
                Into VCANTIDADTOTAL
                From cambios_Oficiales_Tmp
                Where FECHAPROCESO = vFecha;
            Exception
                When Others Then
                    VCANTIDADTOTAL := 0;
                    Vsequim := '3';        
                    vMensaj := 'Error al contar cambios para la fecha';
            End;

                control.mensaje := 'Buscando productos para Reclasificar ';
                --Synchronize;
                  
                Begin
                         
                        Vsequim := '4';
                      vMensaj := 'Error de la caratula del asiento';                     
                                 CG.CG_UTL.Caratula_Del_Asiento(Variables.CODEMPRESA,
                                                      Variables.CodAgencia, --Agencia de Conexion del usuario
                                                      vAplic,
                                                      vSubAplic,
                                                      vTipoTrans,
                                                      vSubTransCambio,
                                                      vNumTransa,
                                                      VDESCRIPCION,
                                                      vProxFecha,
                                                      vProxFecha,
                                                      VNUMERO_ASIENTO,
                                                      Variables.Usuario,
                                                      VMENSAJE_ERROR);
                    
                        Vsequim := '5';
                      
                            if VMENSAJE_ERROR is not null then
                              message('caratula Asiento '||VMENSAJE_ERROR||'-'||VNUMERO_ASIENTO); Message('');    
                              vSistema                    :=  Variables.codsistema;--'PA'
                              vErr                        := '000688';
                              vMens                       := 'caratula Asiento '||VMENSAJE_ERROR||'-'||VNUMERO_ASIENTO;                          
                              raise BCG_INTERFACE;
                            End if;
                            
                        Vsequim := '6';
                            
                control.mensaje := ' Asiento: '||VNUMERO_ASIENTO;
                Synchronize;            
                
                For C in CO_TMP Loop    --Todos los clientes que se van a reclasificar
                    
                    -- Buscamos el codigo de nicho correspondiente al oficial seleccionado.
                    -- RCEBALLOS 25/01/2011
                    Busca_nicho(C.COD_EJECUTIVO_SOLICITA, vCodNicho);
                    
                    Begin--actualizo el oficial del cliente y el trigger Oficial_Cliente actualiza el oficial y la agencia en sus cuentas
                        Update Cliente
                        Set Cod_Oficial = C.COD_EJECUTIVO_SOLICITA,
                                Cod_agencia = C.COD_AGENCIA_SOLICITA,
                                FEC_ACTUALIZA_INGRESOS = trunc(sysdate) -- RCEBALLOS 19/01/2011, Actualizo la fecha de actualizacion de los ingresos del cliente                            
                                --cod_nicho   = vCodNicho  -- RCEBALLOS 25/01/2011, Actualizamos el codigo de nicho de acuerdo al oficial
                                --DNUR:08052015 se comenta "cod_nicho" la asignacion de nichos segun proyecto Mi Negocio
                        Where cod_cliente = c.cod_cliente;
                        --guardar cambio en el oficial
                        --
                            Vsequim := '6.1';    
                            vMensaj := 'Actualizando cliente '||c.cod_cliente;
                    Exception                 
                        When Others then 
                            control.mensaje     := sqlcode||'Error Actualizando Cliente-Agencia-Ejecutivo '||c.cod_cliente||'-'||C.COD_AGENCIA_SOLICITA||'-'||C.COD_EJECUTIVO_SOLICITA||' -Error: '||SQLERRM;
                            --Synchronize;
                            --Pause;
                            If sqlcode = '-2291' Then
                                Message(' Dato relacionado con el cliente no existe en la tabla cliente');Message('');
                            ElsIf sqlcode = '-4098' then
                                Message(' Procedimiento que cambia Oficial de Agencia esta Invalido, Contactar al Administrador del Sistema!!!');Message('');
                            End If;
                            Vsequim := '6.2';    
                            vMensaj := 'Error actualizando cliente '||c.cod_cliente;
                            --
                      vSistema             := Variables.codsistema;--'PA'
                      vErr                 := '000688';
                      vMens                := 'actualizando Cliente '||c.cod_cliente;
                      v_Mensaje            := control.mensaje;
                            Raise Bpa_Exception;
                    End;
                    
                    control.mensaje := 'Reclasificando Asientos de Productos para el cliente '||c.cod_cliente;
                    --Synchronize;    
                            
                        Vsequim := '7';
                      vMensaj := 'Error despues de actualizar cliente ';
                        --dfatule 10092007
                         --Busco los productos del clientes
                        For d in prestamo(c.cod_cliente) loop --busco prestamos
                            
                            control.mensaje := 'Reclasificando Asientos de Prestamos para el cliente '||c.cod_cliente;
                            --Synchronize;                
                            
                                        Asiento_Reclasificacion_Pr( Variables.CODEMPRESA,
                                                                    Variables.CodAgencia,
                                                                    d.TIPO_CREDITO,
                                                                    d.estado,
                                                                    VNUMERO_ASIENTO,
                                                                    d.no_credito,
                                                                    vAplic,
                                                                    vSubAplic,
                                                                    vTipoTrans,
                                                                    vSubTransCambio,
                                                                    vNumTransa,
                                                                    vdescripcion,
                                                                    vProxFecha,
                                                                    c.cod_cliente,
                                                                    c.COD_AGENCIA_TITULAR,
                                                                    c.COD_AGENCIA_SOLICITA,
                                                                    d.SALDO_CREDITO,
                                                                    d.Intereses,--ACollado.30/05/2023---Agrego intereses
                                                                    d.Intereses_Su,--ACollado.30/05/2023--Agrego Intereses
                                                                    v_tc1,
                                                                    v_tc2,
                                                                    VMensajeErr
                                                                    );
                                                                    
                                        v_E_PRSaldos := v_E_PRSaldos + d.SALDO_CREDITO;
                                                                                                                                
                                                                                                                                
                                        If VMensajeErr is not null Then
                                                Raise Bpr_Interface;
                                        End If;                                                                                                                                    

                        End Loop;  
                    
                        Vsequim := '8';
                        vMensaj := 'Error despues del asiento de reclasificacion para PR ';
                      
                      For e in Certificado(c.cod_cliente) Loop --busco Certificados    

                          
                              control.mensaje := 'Reclasificando Asientos de Certificados para el cliente '||c.cod_cliente;
                              --Synchronize;                

                              Asiento_Reclasificacion_CD (Variables.CODEMPRESA,
                                                          Variables.CodAgencia,
                                                          e.COD_CARTERA,
                                                          e.Tip_Certificado,
                                                          e.cod_retencion,
                                                          e.estado,
                                                          VNUMERO_ASIENTO,
                                                          e.cuenta_contable,
                                                          e.num_certificado,
                                                          vAplic,
                                                          vSubAplic,
                                                          vTipoTrans,
                                                          vSubTransCambio,
                                                          vNumTransa,
                                                          vdescripcion,
                                                          vProxFecha,
                                                          c.cod_cliente,
                                                          c.COD_AGENCIA_TITULAR,
                                                          c.COD_AGENCIA_SOLICITA,
                                                          e.monto_cd,
                                                          e.monto_original,--ACollado.30/05/2023--FDS-1754--Agrego monto original
                                                          E.MON_INT_X_PAGAR,--DFATULE 10092007
                                                          e.Pla_Dias            ,--DFATULE 10092007
                                                          e.Clasificacion    ,--DFATULE 10092007
                                                          e.Cod_Moneda        ,--DFATULE 10092007
                                                          e.MON_ACUM_INT_CAP, --ACollado.30/05/2023--FDS-1754-Agrego parametro--
                                                          v_tc1,
                                                          v_tc2,
                                                          VMensajeErr
                                                          );
                                                          
                               v_E_CDSaldos := v_E_CDSaldos + e.monto_cd;                                                                                
                                                    
                                If VMensajeErr is not null then
                                    Raise Bcd_Interface;
                                End If;
                                
                                                                                                
                      End Loop;
                      
                      Vsequim := '9';
                      vMensaj := 'Error despues del asiento de reclasificacion para CD ';

                      For f in Cefectivo(c.cod_cliente) Loop --busco las cuentas de efectivo del cliente

                            control.mensaje := 'Reclasificando Asientos de Cuentas de Efectivo para el cliente '||c.cod_cliente;
                            --Synchronize;                

                              Asiento_Reclasificacion_CC (Variables.CODEMPRESA,
                                                          Variables.CodAgencia,
                                                          f.cod_producto,
                                                          f.IND_ESTADO,
                                                          VNUMERO_ASIENTO,
                                                          f.num_cuenta,
                                                          vAplic,
                                                          vSubAplic,
                                                          vTipoTrans,
                                                          vSubTransCambio,
                                                          vNumTransa,
                                                          vdescripcion,
                                                          vProxFecha,
                                                          c.cod_cliente,
                                                          c.COD_AGENCIA_TITULAR,
                                                          c.COD_AGENCIA_SOLICITA,
                                                          f.SALDO_CONTABILIZADO,
                                                          F.SOBREG_MENOS_48H,
                                                          F.SOBREG_MAS48H,
                                                          f.int_por_pagar,--ACollado30/05/2023-CambioCentrodeCosto| [FDS-1754] Centro de Costos
                                                          f.sal_embargado,--ACollado30/05/2023-CambioCentrodeCosto| [FDS-1754] Centro de Costos
                                                          v_tc1,
                                                          v_tc2,
                                                          vMensajeErr
                                                          );
                                                
                                    v_E_CCSaldos := v_E_CCSaldos + abs(f.SALDO_CONTABILIZADO);
                                                
                                    If     vMensajeErr is not null Then
                                        Raise Bcc_Interface;
                                    End If;
                                                                                
                                      
                      End Loop;
                      
                      Vsequim := '10';
                      vMensaj := 'Error despues del asiento de reclasificacion para CC ';

                      For G    in CxL(c.cod_cliente) Loop --busco las cuentas X Liquidar del cliente

                            CL_Tipo_cuenta (G.COD_MOTIVO,
                                            G.COD_MONEDA,
                                            G.TIPO_CUENTA,
                                            Vtipomotivo,
                                            Vcodsistema,
                                            Vaplicacomision
                                            );                    
                                                                            
                            control.mensaje := 'Reclasificando Asientos de Cuentas X Liquidar para el cliente '||c.cod_cliente;
                            --Synchronize;                
                                                                            
                                Asiento_Reclasificacion_CxL(Variables.CODEMPRESA,
                                                           Variables.CodAgencia,
                                                           g.cod_motivo,
                                                           g.cod_moneda,
                                                           variables.monedabase,
                                                           G.Tipo_cuenta,
                                                           Vtipomotivo,
                                                           Vcodsistema,
                                                           VNUMERO_ASIENTO,
                                                           g.NUM_DOCUMENTO,
                                                           vAplic,
                                                           vSubAplic,
                                                           vTipoTrans,
                                                           vSubTransCambio,
                                                           vNumTransa,
                                                           vdescripcion,
                                                           vProxFecha,
                                                           c.cod_cliente,
                                                           c.COD_AGENCIA_TITULAR,
                                                           c.COD_AGENCIA_SOLICITA,
                                                           g.SALDO_ACTUAL,
                                                           v_tc1,
                                                           v_tc2,
                                                           VMensajeErr
                                                           );          

                                   v_E_CXLSaldos := v_E_CXLSaldos + G.SALDO_ACTUAL;
                                                    
                                    If     vMensajeErr is not null Then
                                        Raise Bcxl_Interface;
                                    End If;
                                                    
                      End Loop;

                         Vsequim := '11';
                      vMensaj := 'Error despues del asiento de reclasificacion para CxL ';
                     --busco las cuentas por le codigo de cliente y para cada sistema realizo un asiento 
                     --debito y credito sumarizando con una sola caratula para todo el proceso.


                -- INCREMENTA EL CONTADOR
                   vcantidadprocesada := vcantidadprocesada + 1;
                -- ACTUALIZA BARRA    
                       --SET_ITEM_PROPERTY('ETIQUETAS.ET_GAUGE',WIDTH,(656*(((VCANTIDADPROCESADA*100)/VCANTIDADTOTAL)/100)));
                       --:ETIQUETAS.ET_AVANCE := TO_CHAR(ROUND(((VCANTIDADPROCESADA*100)/VCANTIDADTOTAL)))||'%'; 
                       --Synchronize;

                         
                End Loop;

                        control.mensaje := ' Efectuando Cuadre Asiento: '||VNUMERO_ASIENTO||' Monto Difiere: '||VMontoDife;
                        --Synchronize;
                        
                        Vsequim := '12';
                        vMensaj := 'Error despues Efectuando Cuadre Asiento: '||VNUMERO_ASIENTO||' Monto Difiere: '||VMontoDife;    
                    
                    v_E_Saldos := v_E_CCSaldos + v_E_PRSaldos + v_E_CDSaldos + v_E_CXLSaldos;                                      

                If v_E_Saldos > 0  Then
                       
                        CG.CG_UTL.Cuadre_Asiento(variables.Codempresa,
                                                 vProxFecha,
                                                 VNUMERO_ASIENTO,
                                                 VMontoDife,
                                                 VMensajeErr);
                                 
                  If vMontoDife Is null then
                      --dfatule 06092007: Inicio
                      Begin
                          Select count('X')
                          Into  vLAsientos
                          From cg_movimiento_resumen a, CG_MOVIMIENTO_DETALLE b
                             where a.CODIGO_EMPRESA            =    b.CODIGO_EMPRESA
                                  And a.FECHA_MOVIMIENTO     =    b.FECHA_MOVIMIENTO
                                  And a.NUMERO_ASIENTO            =    b.NUMERO_ASIENTO
                                  And a.codigo_empresa            = to_number(variables.CodEmpresa)
                               And a.fecha_movimiento        = vProxFecha
                               And a.numero_asiento            = VNUMERO_ASIENTO;
                      Exception
                          When Others Then
                           vLAsientos := 0;    
                      End;
                            
                          If vLAsientos = 0 then
                                        control.mensaje := 'Clientes '||vcantidadprocesada;                    
                                        -- Synchronize;    
                                          --message(:control.mensaje); Message('');
                        
                                           Begin
                                                   delete cg_movimiento_resumen
                                                 where codigo_empresa     = to_number(variables.CodEmpresa)
                                                   and fecha_movimiento    = vProxFecha
                                                   and numero_asiento        = VNUMERO_ASIENTO;   
                                              salvar_escondido;
                                           Exception 
                                               When Others then 
                                                    control.mensaje     := 'Error borrando Encabezado del asiento '||SQLERRM;
                                                     message(control.mensaje); Message('');
                                                    --Synchronize;
                                                    vSistema                    :=     Variables.codsistema;--'PA'
                                              vErr                             := '000688';
                                              vMens                         := ' borrando Encabezado del asiento '||SQLERRM;
                                                    v_Mensaje                 := control.mensaje;                        
                                                    Raise Bpa_Exception;
                                           End;
                           
                                                For H in CO Loop
                                                    
                                                        If  Form_Success Then
                                                              Begin
                                                                  Update Cambios_Oficiales
                                                                  Set       MODIFICADO_POR                = VARIABLES.USUARIO,
                                                                                 FECHA_MODIFICACION        = Sysdate,  
                                                                                 Estado                             = 'A'
                                                                  Where  COD_EJECUTIVO_TITULAR    = H.Cod_Ejecutivo_Titular
                                                                  And         COD_AGENCIA_TITULAR        = H.Cod_Agencia_Titular
                                                                  And         COD_AGENCIA_SOLICITA        = H.Cod_Agencia_Solicita
                                                                  And         COD_EJECUTIVO_SOLICITA = H.Cod_Ejecutivo_Solicita
                                                                  And         FECHA_SOLICITUD                =    H.Fecha_solicitud
                                                                  And         ESTADO                                    = H.Estado;
                                                              Exception 
                                                                     When Dup_val_on_Index Then
                                                                         Null;                  
                                                                  When Others then 
                                                                        control.mensaje    := 'Error en Cierre Reasignacion de cliente entre Oficiales, Actualizando Cambio Oficiales '||SQLERRM;
                                                                        Synchronize;
                                                                        vSistema           := Variables.codsistema;--'PA'
                                                                        vErr               := '000688';
                                                                        vMens              := 'en Cierre Reasignacion de cliente entre Oficiales, Actualizando Cambio Oficiales '|| SQLERRM;
                                                                        v_Mensaje          := control.mensaje;                        
                                                                        Raise Bpa_Exception;
                                                              End;
                                                              
                                                              Begin
                                                                  Delete cambios_Oficiales_Tmp
                                                                  Where FECHAPROCESO = vFecha;
                                                              Exception 
                                                                  When Others then 
                                                                        control.mensaje    := 'Error en Cierre Reasignacion de cliente entre Oficiales, borrando Cambio Oficiales temporal '||SQLERRM;
                                                                        --Synchronize;
                                                                        vSistema            := Variables.codsistema;--'PA'
                                                                        vErr                := '000688';
                                                                        vMens               := ' en Cierre Reasignacion de cliente entre Oficiales, borrando Cambio Oficiales temporal ' || SQLERRM;
                                                                        v_Mensaje           := control.mensaje;                        
                                                                        Raise Bpa_Exception;
                                                              End;    
                                                              
                                                            salvar_escondido;    
                                                                
                                                        End if;
                                                        
                                                End Loop;                   
                           
                           
                           --dfatule 06092007: Fin
                          Else--dfatule 06092007
                                    Message(SQLERRM); Message('');
                                    Message('Asientos: '||VNUMERO_ASIENTO||' Monto Difiere: '||VMontoDife||' Error '||VMensajeErr); Message('');    
                                            
                                      vSistema             := Variables.codsistema;--'PA'
                                      vErr                 := '000688';
                                      vMens                := ' No hay Monto Difiere en Cuadre Asiento: '||VNUMERO_ASIENTO||' Monto Difiere: '||VMontoDife||' Error '||VMensajeErr;
                                      raise BCG_INTERFACE;
                          End If;    --dfatule 06092007                  
                  
                        Elsif VMensajeErr is not null then
                              vSistema             := Variables.codsistema;--'PA'
                              vErr                 := '000688';
                              vMens                := ' Mensaje Error en Cuadre Asiento: '||VNUMERO_ASIENTO||' Monto Difiere: '||VMontoDife||' Error '||VMensajeErr;
                              raise BCG_INTERFACE;
                          
                        ElsIf VMensajeErr is null Then
                            salvar_escondido;
                            control.mensaje := 'Clientes '||vcantidadprocesada||' Asiento '||VNUMERO_ASIENTO||' Cuadrado';                    
                            -- Synchronize;    
                            message(control.mensaje);                     
                              
                  End if;
                        
                            
                Else
                        control.mensaje := 'Clientes '||vcantidadprocesada;                    
                        --    Synchronize;    
                          --message(:control.mensaje); Message(' ');

                           Begin
                                   delete cg_movimiento_resumen
                                 where codigo_empresa     = to_number(variables.CodEmpresa)
                                   and fecha_movimiento    = vProxFecha
                                   and numero_asiento        = VNUMERO_ASIENTO;   
                              salvar_escondido;
                           Exception 
                               When Others then 
                                    control.mensaje     := 'Error borrando Encabezado del asiento '||SQLERRM;
                                    --Synchronize;
                                    vSistema             :=  Variables.codsistema;--'PA'
                                    vErr                 := '000688';
                                    vMens                := ' borrando Encabezado del asiento '||SQLERRM;
                                    v_Mensaje            := control.mensaje;                        
                                    Raise Bpa_Exception;
                           End;
                End If;
                                         
             End;
             
             if NOT FORM_SUCCESS then
                    
                   --Synchronize;
                   vSistema        := Variables.codsistema;--'PA'            
                   vErr            := '000688';
                   vMens           := 'Reasignando, Validando forma en Cierre Reasignacion de cliente entre Oficiales '||SQLERRM;     
                   v_Mensaje       := control.mensaje;
                   Raise Bpa_Exception;
             end if;
            
        End If;
        
                --Message('Ejecucion Sin errores, Cerrando Solicitudes Aplicadas'); Message(' ');

    For H in CO Loop
        
            If VMensajeErr is null And Form_Success Then
                  Begin
                      Update Cambios_Oficiales
                      Set       MODIFICADO_POR                = VARIABLES.USUARIO,
                                     FECHA_MODIFICACION        = Sysdate,  
                                     Estado                             = 'A'
                      Where  COD_EJECUTIVO_TITULAR    = H.Cod_Ejecutivo_Titular
                      And         COD_AGENCIA_TITULAR        = H.Cod_Agencia_Titular
                      And         COD_AGENCIA_SOLICITA        = H.Cod_Agencia_Solicita
                      And         COD_EJECUTIVO_SOLICITA = H.Cod_Ejecutivo_Solicita
                      And         FECHA_SOLICITUD                =    H.Fecha_solicitud
                      And         ESTADO                                    = H.Estado;
                  Exception 
                         When Dup_val_on_Index Then
                             Null;                  
                      When Others then 
                            control.mensaje    := 'Error en Cierre Reasignacion de cliente entre Oficiales, Actualizando Cambio Oficiales '||SQLERRM;
                            --Synchronize;
                            vSistema           := Variables.codsistema;--'PA'
                            vErr               := '000688';
                            vMens              := 'en Cierre Reasignacion de cliente entre Oficiales, Actualizando Cambio Oficiales '|| SQLERRM;
                            v_Mensaje          := control.mensaje;                        
                            Raise Bpa_Exception;
                  End;
                  
                  Begin
                      Delete cambios_Oficiales_Tmp
                      Where FECHAPROCESO = vFecha;
                  Exception 
                      When Others then 
                            control.mensaje     := 'Error en Cierre Reasignacion de cliente entre Oficiales, borrando Cambio Oficiales temporal '||SQLERRM;
                            --Synchronize;
                            vSistema            := Variables.codsistema;--'PA'
                            vErr                := '000688';
                            vMens               := ' en Cierre Reasignacion de cliente entre Oficiales, borrando Cambio Oficiales temporal ' || SQLERRM;
                            v_Mensaje           := control.mensaje;                        
                            Raise Bpa_Exception;
                  End;    
                  
                salvar_escondido;    
                    
            End if;
                
    End Loop;
            
            v_Mensaje := control.mensaje;    
            
            
    Exception
        When Info_Exception Then
            Message(vErr||'-'||vMens);                
            BITACORA_CIERRES_ERROR (CONTROL.FECHA_PROCESO, 'I');
        When Bpa_Exception Then
                --:control.mensaje     := 'Error en Proceso Cierre Reasignacion de cliente entre Oficiales ';
                --Synchronize;    
                --Set_Application_Property(Cursor_style, 'DEFAULT');            
                --Utilitarios.Mensaje(vErr, :codidioma, vSistema,Acknowledge,vMens);
                --exit_form(no_commit, no_validate);
                Message(vErr||'-'||vMens);                
                BITACORA_CIERRES_ERROR (CONTROL.FECHA_PROCESO);
                
        When BCG_INTERFACE Then
                --Set_Application_Property(Cursor_style, 'DEFAULT');            
                --Message('Error BCG '||VMensajeErr); Message('');
                --Utilitarios.Mensaje(vErr, :codidioma, vSistema,Acknowledge,vMens);
                --exit_form(no_commit, no_validate);
                Message('Error BCG '||VMensajeErr||'-'||vErr||'-'||vMens);                
                BITACORA_CIERRES_ERROR (CONTROL.FECHA_PROCESO);                
        
        When Bcc_Interface Then
                --Set_Application_Property(Cursor_style, 'DEFAULT');            
                --Message('Error BCC '||VMensajeErr); Message('');
                --exit_form(no_commit, no_validate);
                Message('Error BCC '||VMensajeErr||'-'||vErr||'-'||vMens);                
                BITACORA_CIERRES_ERROR (CONTROL.FECHA_PROCESO);
        
        When Bcd_Interface Then
                --Set_Application_Property(Cursor_style, 'DEFAULT');            
                --Message('Error BCD '||VMensajeErr); Message('');
                --exit_form(no_commit, no_validate);
                Message('Error BCD '||VMensajeErr||'-'||vErr||'-'||vMens);                
                BITACORA_CIERRES_ERROR (CONTROL.FECHA_PROCESO);            
        
        When Bpr_Interface Then
                --Set_Application_Property(Cursor_style, 'DEFAULT');            
                --Message('Error BPR '||VMensajeErr); Message('');
                --exit_form(no_commit, no_validate);
                Message('Error BPR '||VMensajeErr||'-'||vErr||'-'||vMens);                
                BITACORA_CIERRES_ERROR (CONTROL.FECHA_PROCESO);                
            
        When Bcxl_Interface Then
                --Set_Application_Property(Cursor_style, 'DEFAULT');            
                --Message('Error BCXL '||VMensajeErr); Message('');
                --exit_form(no_commit, no_validate);               
                Message('Error BCXL '||VMensajeErr||'-'||vErr||'-'||vMens);                
                BITACORA_CIERRES_ERROR (CONTROL.FECHA_PROCESO); 
                    
        When Others Then
                --Set_Application_Property(Cursor_style, 'DEFAULT');        
                --Message(Vsequim ||'-'|| vMensaj ||'-'|| Sqlerrm); Message('');
                --exit_form(no_commit, no_validate);
                Message('Error: '||Vsequim||'-'||vMensaj||'-'||Sqlerrm);                
                BITACORA_CIERRES_ERROR (CONTROL.FECHA_PROCESO);                           

    END P_Mensual;
    
    -- Efectua: Envia correo con los datos de los cambios que se direccionan 
    PROCEDURE envio_correo_errores(pFecha in date) IS
        cursor c_cambios_error is
        Select COD_EJECUTIVO_TITULAR, COD_AGENCIA_TITULAR , COD_AGENCIA_SOLICITA ,
        COD_EJECUTIVO_SOLICITA , FECHA_SOLICITUD , ESTADO , C.MODIFICADO_POR , OBSERVACION , 
        COD_CLIENTE , C.FECHA_MODIFICACION ,Fecha_Aplica,   P.primer_nombre||' '||p.SEGUNDO_NOMBRE||' '||PRIMER_APELLIDO NOMBRE
        from cambios_Oficiales c, agencia a, PA.USUARIOS e, PA.PERSONAS_FISICAS P 
        Where A.COD_AGENCIA = c.COD_AGENCIA_SOLICITA
        and     E.COD_USUARIO(+) = C.COD_AGENCIA_SOLICITA
        AND E.COD_PER_FISICA = P.COD_PER_FISICA (+)
        And     nvl(a.Atiende_cliente,'N') != 'S' -- Eblanco: Agencia que no atiende clientes.
        and     a.est_agencia         = 'A'      -- Eblanco: Solo agenica activas
        and     c.Estado              = 'P' 
        And     c.Modificado_por      is not null
        And     c.Fecha_Modificacion  is not null
        And     c.Fecha_Aplica        <= pFecha       
        Order by COD_EJECUTIVO_TITULAR,COD_EJECUTIVO_SOLICITA, FECHA_SOLICITUD;

        cursor ip_servidor is
        select valor from parametros_x_empresa
        where cod_empresa = '1'
        and cod_sistema = 'PA'
        and abrev_parametro = 'SERVIDOR_SMTP';

        -- Grupo de correo
        cursor grupo_correo is
        select valor from parametros_x_empresa
        where cod_empresa = '1'
        and cod_sistema = 'PA'
        and abrev_parametro = 'CORREO_SALIDA_EMP';   
        
            -- variables
        vSubject       varchar2(150)  := null;
        vMsg           varchar2(32000):= null;
        vIP            varchar2(20)   := null;
        vGrupoCorreo   varchar2(30);    
        vContador      number; --<<FACRUZ-20122016[Falla:2016-M00296]>> Variable para almacenar los clientes por agencia.
    --<<FACRUZ-20122016[Falla:2016-M00296]>> Se Crea esta condicion para que cuando no obtenga datos al buscar la agencia  
    --no envie un correo vacio al grupo de Gestion Usuario.
    BEGIN
        Begin  
            Select count(*)
            into vContador       
            from cambios_Oficiales c, agencia a, PA.USUARIOS e, PA.PERSONAS_FISICAS P 
            Where A.COD_AGENCIA = c.COD_AGENCIA_SOLICITA
            and     E.COD_USUARIO(+) = C.COD_AGENCIA_SOLICITA
            AND E.COD_PER_FISICA = P.COD_PER_FISICA (+)
            And     nvl(a.Atiende_cliente,'N') != 'S' -- Eblanco: Agencia que no atiende clientes.
            and     a.est_agencia         = 'A'      -- Eblanco: Solo agenica activas
            And     c.Estado              = 'P' 
            And     c.Modificado_por      is not null
            And     c.Fecha_Modificacion  is not null
               And     c.Fecha_Aplica        <= pFecha;
       
        Exception
               When others then
                    vContador := 0;                                    
        End;  
        
        if nvl(vContador,0) > 0 then --<<FACRUZ-20122016[Falla:2016-M00296]>> Condicion para evaluar la agencia y enviar el correo cuando si tenga clientes en una agencia backoffice.
              open ip_servidor;
            fetch ip_servidor into vIP;
            close ip_servidor;
            
            open grupo_correo;
            fetch grupo_correo into vGrupoCorreo;
            close grupo_correo;
        
            vSubject := 'Cambios de oficiales no ejecutados';
        
            vMsg := 'A continuacion el listado de solicutdes de cambios de oficial que no pudieron ser aplicados:  '||trunc(sysdate)||chr(13)||chr(10)||chr(13)||chr(10);
            
            vMsg := vMsg|| rpad('TITULAR',10,' ')||chr(9)||
                                   rpad('SOLICITA',15,' ') ||chr(9)|| 
                                   rpad('AG. TITULAR',15,' ')||chr(9)|| 
                                   rpad('AG. SOLICITA',15,' ') ||chr(9)||
                                   'F. SOLICITUD' ||chr(9)||chr(9)|| 
                                   rpad('OBSERVACION',50,' ') ||chr(9)||chr(9)|| 
                                   'COD_CLIENTE' ||chr(9)||chr(9)||  
                                   'Nombre Cliente '||chr(13)||chr(10);
            for i in c_cambios_error loop
                  vMsg := vMsg|| rpad(i.COD_EJECUTIVO_TITULAR,20,' ')||--chr(9)||chr(9)||
                                          rpad(i.COD_EJECUTIVO_SOLICITA,20,' ') ||--chr(9)|| chr(9)||
                                          rpad(i.COD_AGENCIA_TITULAR,20,' ')||--chr(9)|| chr(9)||
                                          rpad(i.COD_AGENCIA_SOLICITA,20,' ') ||--chr(9)||chr(9)||
                                          rpad(i.FECHA_SOLICITUD,15,' ') ||chr(9)||chr(9)||  
                                          rpad(i.OBSERVACION,50,' ') ||--chr(9)||chr(9)|| 
                                          rpad(i.COD_CLIENTE,10,' ') ||--chr(9)||chr(9)|| 
                                          i.nombre||chr(13)||chr(10);
            end loop;        
         
         
             pa.send_mail(vIP,'SistemaB2000',vGrupoCorreo, vSubject, vMsg);
             
             ---ACTUALIZA el estado de los cambios que tienen problemas.
             UPDATE cambios_Oficiales C
             SET ESTADO = 'R'
             WHERE  c.Estado              = 'P'
            And     c.Modificado_por      is not null
            And     c.Fecha_Modificacion  is not null
            And     c.Fecha_Aplica        <= pFecha
            AND EXISTS (SELECT COD_AGENCIA FROM agencia a 
            WHERE nvl(a.Atiende_cliente,'N') != 'S' -- Eblanco: Agencia que no atiende clientes.
            and     a.est_agencia         = 'A'      -- Eblanco: Solo agenica activas)
            AND c.COD_AGENCIA_SOLICITA = A.COD_AGENCIA);
         end if;--<<FACRUZ-20122016[Falla:2016-M00296]>> Fin de la Condicion.
    END envio_correo_errores;
   
   /* -------------------------------------------------------------------- */
   /* DESCRIPCION: CAMBIO DE OFICIAL-AGENCIA                               */
   /* -------------------------------------------------------------------- */
   PROCEDURE CAMBIO_OFICIAL_AGENCIA IS
   
      vProcName           VARCHAR2(80)  := 'CAMBIO_OFICIAL_AGENCIA';
      l_rindex_g          PLS_INTEGER   := DBMS_APPLICATION_INFO.set_session_longops_nohint;
      l_slno_g            PLS_INTEGER;
      pTarget             PLS_INTEGER;
      
      vMensaje            VARCHAR2(1000):=NULL;
      exError             EXCEPTION;
      vDesProceso         VARCHAR2(20);
        
   BEGIN
   
       Job.Ejecuta := 'JOB_CAMBIO_OFICIAL_AGENCIA';
       IniVarGlobalesLocales('PAROCCIE');
       BInicio (vProcName);
       
       BITACORA_CIERRES_INICIO(CONTROL.FECHA_PROCESO);
       
       DBMS_APPLICATION_INFO.set_session_longops (
         rindex        => l_rindex_g,
         slno          => l_slno_g,
         op_name       => Job.Ejecuta,
         target        => pTarget,
         context       => 0,
         sofar         => 1,
         totalwork     => 4,
         target_desc   => 'Procesando  ...',
         units         => 'rows');
                          
        If variables.Tipo_Cierre = 'D' Then        
                         
            P_Diario(variables.ANTERIOR_DIA_HABIL, 
                     vMensaje);
                     
            DBMS_APPLICATION_INFO.set_session_longops (
                 rindex        => l_rindex_g,
                 slno          => l_slno_g,
                 op_name       => Job.Ejecuta,
                 target        => pTarget,
                 context       => 0,
                 sofar         => 2,
                 totalwork     => 4,
                 target_desc   => 'Procesando  ...',
                 units         => 'rows');                     
                             
            ValidarCierre_Diario(vMensaje);
            
            DBMS_APPLICATION_INFO.set_session_longops (
                     rindex        => l_rindex_g,
                     slno          => l_slno_g,
                     op_name       => Job.Ejecuta,
                     target        => pTarget,
                     context       => 0,
                     sofar         => 3,
                     totalwork     => 4,
                     target_desc   => 'Procesando  ...',
                     units         => 'rows');         
            
            P_APLICA_DIARIO(variables.ANTERIOR_DIA_HABIL, 
                            variables.fecha_sistema, 
                            vMensaje);
                             
        Elsif variables.Tipo_Cierre = 'M' Then
                
            P_Diario(variables.ANTERIOR_DIA_HABIL, 
                     vMensaje);
                     
            DBMS_APPLICATION_INFO.set_session_longops (
                 rindex        => l_rindex_g,
                 slno          => l_slno_g,
                 op_name       => Job.Ejecuta,
                 target        => pTarget,
                 context       => 0,
                 sofar         => 2,
                 totalwork     => 4,
                 target_desc   => 'Procesando  ...',
                 units         => 'rows');                     
                                       
            ValidarCierre_Mensual(vMensaje);
            
            DBMS_APPLICATION_INFO.set_session_longops (
                 rindex        => l_rindex_g,
                 slno          => l_slno_g,
                 op_name       => Job.Ejecuta,
                 target        => pTarget,
                 context       => 0,
                 sofar         => 3,
                 totalwork     => 4,
                 target_desc   => 'Procesando  ...',
                 units         => 'rows');
            
            P_Mensual(variables.ANTERIOR_DIA_HABIL, 
                      variables.fecha_sistema, 
                      vMensaje);
            
        End If;
        
        DBMS_APPLICATION_INFO.set_session_longops (
         rindex        => l_rindex_g,
         slno          => l_slno_g,
         op_name       => Job.Ejecuta,
         target        => pTarget,
         context       => 0,
         sofar         => 4,
         totalwork     => 4,
         target_desc   => 'Procesando  ...',
         units         => 'rows');
                
        --Se envia un correo con los casos de agncia backoffice
        envio_correo_errores(variables.ANTERIOR_DIA_HABIL);
        
        Select decode(variables.Tipo_Cierre,'M','Mensual','Diario') 
            Into vDesProceso from dual;
       
        control.mensaje := 'Procesados '||vMensaje ||' - Fin Proceso '||vDesProceso;
        message(control.mensaje);
        
        --BITACORA_CIERRES
        BITACORA_CIERRES_FIN (CONTROL.FECHA_PROCESO);
        BFinal(vProcName); 
                                  
   EXCEPTION
        WHEN OTHERS THEN
            Message (SqlCode||' >> '||SqlErrm); 
            BITACORA_CIERRES_ERROR (CONTROL.FECHA_PROCESO);
   End CAMBIO_OFICIAL_AGENCIA;    
   
   /* -------------------------------------------------------------------- */
   /* DESCRIPCION: EXTRAER DATOS DE PRESTAMOS, CERTIFICADOS Y CUENTAS      */
   /* -------------------------------------------------------------------- */
   PROCEDURE EXTRAER_DATOS_PR_CD_PA IS
   
      vProcName           VARCHAR2(80)  := 'EXTRAER_DATOS_PR_CD_PA';
      l_rindex_g          PLS_INTEGER   := DBMS_APPLICATION_INFO.set_session_longops_nohint;
      l_slno_g            PLS_INTEGER;
      pTarget             PLS_INTEGER;
      
      vMensaje            VARCHAR2(1000):=NULL;
      exError             EXCEPTION;
      vDesProceso         VARCHAR2(20);
      V_Next_Date         DATE;
        
   BEGIN
   
       Job.Ejecuta := 'JOB_EXTRAER_DATOS_PR_CD_PA';
       IniVarGlobalesLocales('PAACTPRO');
       BInicio (vProcName);
       
       BITACORA_CIERRES_INICIO(Variables.Fecha);
       
       DBMS_APPLICATION_INFO.set_session_longops (
         rindex        => l_rindex_g,
         slno          => l_slno_g,
         op_name       => Job.Ejecuta,
         target        => pTarget,
         context       => 0,
         sofar         => 1,
         totalwork     => 4,
         target_desc   => 'Procesando  ...',
         units         => 'rows');
        
        actualiza_estatus_proceso(Variables.codempresa,
                                  'PA',
                                  'CUENTAS',
                                  sysdate,
                                  null,
                                  'P',
                                  etiquetas.et_msg_pr_1,
                                  1,
                                  0);
                                  
        Pase_Cuentas_Pr(V_NEXT_DATE, 
                        variables.codempresa,
                        'PA',
                        variables.codidioma, 
                        variables.salvar_reg, 
                        trunc(sysdate));
                     
        DBMS_APPLICATION_INFO.set_session_longops (
             rindex        => l_rindex_g,
             slno          => l_slno_g,
             op_name       => Job.Ejecuta,
             target        => pTarget,
             context       => 0,
             sofar         => 2,
             totalwork     => 4,
             target_desc   => 'Procesando  ...',
             units         => 'rows');                     
                             
        Actualiza_Estatus_Proceso(Variables.codempresa,
                                  'PA',
                                  'CUENTAS',
                                  sysdate,
                                  null,
                                  'P',
                                  etiquetas.et_msg_cd_1,
                                  1,
                                  0);
      
        PASE_CUENTAS_CD(V_NEXT_DATE,
                        variables.codempresa,
                        'PA',
                        variables.codidioma,
                        variables.salvar_reg, 
                        trunc(sysdate));
            
        DBMS_APPLICATION_INFO.set_session_longops (
                 rindex        => l_rindex_g,
                 slno          => l_slno_g,
                 op_name       => Job.Ejecuta,
                 target        => pTarget,
                 context       => 0,
                 sofar         => 3,
                 totalwork     => 4,
                 target_desc   => 'Procesando  ...',
                 units         => 'rows');         
            
        actualiza_estatus_proceso(Variables.codempresa,
                                  'PA',
                                  'CUENTAS',
                                  sysdate,
                                  null,
                                  'P',
                                  etiquetas.et_msg_cc_1,
                                  1,
                                  0);
          
        PASE_CUENTAS_CC(V_NEXT_DATE,
                        variables.codempresa,
                        'PA',
                        variables.codidioma,
                        variables.salvar_reg, 
                        trunc(sysdate));
        
        DBMS_APPLICATION_INFO.set_session_longops (
             rindex        => l_rindex_g,
             slno          => l_slno_g,
             op_name       => Job.Ejecuta,
             target        => pTarget,
             context       => 0,
             sofar         => 4,
             totalwork     => 4,
             target_desc   => 'Procesando  ...',
             units         => 'rows');                     
                
        --BITACORA_CIERRES
        BITACORA_CIERRES_FIN (Variables.Fecha);
        BFinal(vProcName); 
                                  
   EXCEPTION
        WHEN OTHERS THEN
            Message (SqlCode||' >> '||SqlErrm); 
            BITACORA_CIERRES_ERROR (Variables.Fecha);
   End EXTRAER_DATOS_PR_CD_PA; 
   
   /* -------------------------------------------------------------------- */
   /* DESCRIPCION: GENERACION MASIVA DE NCF MENSUAL                        */
   /* -------------------------------------------------------------------- */
   PROCEDURE GENERACION_MASIVA_NCF IS
   
      vProcName           VARCHAR2(80)  := 'GENERACION_MASIVA_NCF';
      l_rindex_g          PLS_INTEGER   := DBMS_APPLICATION_INFO.set_session_longops_nohint;
      l_slno_g            PLS_INTEGER;
      pTarget             PLS_INTEGER;
      
      anio    number;
      vFecha  Date;
      v_dummy number;
      vDiaMes varchar2(10);
        
   BEGIN
   
       Job.Ejecuta := 'JOB_GENERACION_MASIVA_NCF';
       IniVarGlobalesLocales('PACFGENM');
       BInicio (vProcName);
       
       --BITACORA_CIERRES
       BITACORA_CIERRES_INICIO (Variables.Fec_hoy);
          
       DBMS_APPLICATION_INFO.set_session_longops (
                     rindex        => l_rindex_g,
                     slno          => l_slno_g,
                     op_name       => Job.Ejecuta,
                     target        => pTarget,
                     context       => 0,
                     sofar         => 1,
                     totalwork     => 2,
                     target_desc   => 'Procesando  ...',
                     units         => 'rows');
                
       vFecha:= CALENDAR.Fecha_Actual_Calendario('CC',
                                                 variables.CodEmpresa,
                                                 variables.CodAgencia);
                                        
       vDiaMes  := '01/'||To_Char(vFecha, 'MM/');
       anio     := to_number(to_char(vFecha,'YYYY'));
       
       if to_date(vDiaMes||to_char(anio),'dd/mm/yyyy') > vFecha then
         anio := anio -1;
       end if;   
       
       pa.pa_ncf.Genera_NCF_rango_fecha(null, 
                                        to_date(vDiaMes||to_char(anio),'dd/mm/yyyy'), 
                                        last_day(to_date(vDiaMes||to_char(anio),'dd/mm/yyyy'))
                                        );                                              
            
       DBMS_APPLICATION_INFO.set_session_longops (
                     rindex        => l_rindex_g,
                     slno          => l_slno_g,
                     op_name       => Job.Ejecuta,
                     target        => pTarget,
                     context       => 0,
                     sofar         => 2,
                     totalwork     => 2,
                     target_desc   => 'Procesando  ...',
                     units         => 'rows');

       --BITACORA_CIERRES
       BITACORA_CIERRES_FIN (Variables.Fec_hoy);
       BFinal(vProcName);
   
   EXCEPTION
        WHEN OTHERS THEN
            Message (SqlCode||' >> '||SqlErrm); 
            BITACORA_CIERRES_ERROR (Variables.Fec_hoy);    
   END GENERACION_MASIVA_NCF;
   
       PROCEDURE Proceso_Cierre_Leasing IS-- ESPONS 27/01/2023
                
         vProcName           VARCHAR2(80)  := 'Proceso_Cierre_Leasing';
         l_rindex_g          PLS_INTEGER   := DBMS_APPLICATION_INFO.set_session_longops_nohint;
         l_slno_g            PLS_INTEGER;
         pTarget             PLS_INTEGER;
          
         anio    number;
         vFecha  Date;
         v_dummy number;
         vDiaMes varchar2(10); 
         vValorEnvio xmltype;
         
        BEGIN
        
         Job.Ejecuta := 'JOB_PROCESO_CIERRE_LEASING';
         IniVarGlobalesLocales('LEASING');
         BInicio (vProcName);
       
       --BITACORA_CIERRES
         BITACORA_CIERRES_INICIO (Variables.Fec_hoy);
         PA.PKG_MDS.AgregaParamClob('pUsuario', user);--Usuario que hace el request   
         vValorEnvio := PA.PKG_MDS.EMS_CONSUMO
                (   
                    pEmpresa => '1',
                    
                    pURL => PARAM.PARAMETRO_X_EMPRESA('1','URL_MDT2','PA'),
                    pCanal => 'B2000',
                    pTerminalID => USER,
                    pTerminalIP =>  SYS_CONTEXT('USERENV','IP_ADDRESS'),
                    pTerminalSec => SYS_CONTEXT('USERENV', 'SESSIONID'),
                    pTransaccion => '6002',
                    pSubTrn => '03',
                    pMoneda => 'DOP'
                );  
       
          
         IF INSTR(vValorEnvio.getClobVal(), 'Operaci√≥n ejecutada correctamente') < 1 THEN
            Message (SqlCode||' >> '||SqlErrm ||' El servicio se ejecuto de manera incorrecta.'); 
            BITACORA_CIERRES_ERROR (Variables.Fec_hoy);    
          END IF;
          
        --BITACORA_CIERRES
        --BITACORA_CIERRES_FIN (Variables.Fec_hoy);
        BFinal(vProcName);
                        
        EXCEPTION 
          WHEN OTHERS THEN        
            Message (SqlCode||' >> '||SqlErrm); 
            BITACORA_CIERRES_ERROR (Variables.Fec_hoy);
               
    END Proceso_Cierre_Leasing;
    
   --kadames-excello 24/04/2023
   --Envia correo si hay traslados pendiente de recibir
   --Inicio
    PROCEDURE NotifCorreoTraslPend (pempresa IN VARCHAR2, pfecha IN DATE)
    IS
       vExistenPendientes   NUMBER;
       vCorreo              VARCHAR2 (500);
       vAsunto              VARCHAR2 (1000);
       vBody                VARCHAR2 (32000);
       --kadames-excello 26/05/2023
       --Este numero indica la cantidad de traslados que se notifican por correo (para dividirlos)
       vCantCorte           NUMBER := 10; 
       vConteo              NUMBER := 1;
       ---FIN
    BEGIN
       vCorreo := Param.Parametro_X_Empresa (pempresa, 'MAIL_SOL_TRS', 'PA');

       IF vCorreo IS NOT NULL
       THEN
          SELECT COUNT (*)
            INTO vExistenPendientes
            FROM bcj_solicitud_efectivo e
           WHERE     e.cod_empresa = pempresa
                 AND e.tipo_solicitud = 'I'
                 AND e.estado = 'E';                          -- En estado Enviado

          IF vExistenPendientes > 0
          THEN
             LOOP    ---kadames-excello 26/05/2023  se agrego el loop para dividir en lotes de 10  
                vAsunto :=
                      'Env√≠os de efectivo pendientes de recibir al '
                   || TO_CHAR (pfecha, 'dd/mm/rrrr');

                vBody :=
                      ' <p>Estimados,</p>

                <p>A continuaci;n los env;os de efectivo pendientes de recibir al '
                   || TO_CHAR (pfecha, 'dd/mm/rrrr')
                   || ' :</p>

                <table>
                    <tbody>
                        <tr>
                            <td><strong>Fecha y Hora Envio</strong></td>
                            <td><strong>Enviado por</strong></td>
                            <td><strong>Agencia Origen</strong></td>
                            <td><strong>Agencia Destino</strong></td>
                            <td><strong>Terceros</strong></td>
                            <td><strong>Moneda</strong></td>
                            <td><strong>Monto</strong></td>
                        </tr>';


                FOR x
                   IN (SELECT *
                         FROM (  SELECT ROWNUM SECUENCIA,
                                        FECHA_ENVIO,
                                        ENVIADO_POR,
                                        COD_AGENCIA_ORIGEN,
                                        (SELECT DESCRIPCION
                                           FROM agencia a
                                          WHERE     a.cod_empresa = pempresa
                                                AND a.cod_agencia =
                                                       e.COD_AGENCIA_ORIGEN)
                                           desc_COD_AGENCIA_ORIGEN,
                                        COD_AGENCIA_DESTINO,
                                        (SELECT DESCRIPCION
                                           FROM agencia a
                                          WHERE     a.cod_empresa = pempresa
                                                AND a.cod_agencia =
                                                       e.COD_AGENCIA_DESTINO)
                                           desc_COD_AGENCIA_DESTINO,
                                        TRANSPORTE_TERCERO,
                                        COD_MONEDA,
                                        (SELECT descripcion
                                           FROM moneda m
                                          WHERE m.cod_moneda = e.COD_MONEDA)
                                           desc_moneda,
                                        MONTO,
                                        CASE
                                           WHEN e.TRANSPORTE_TERCERO = 'S'
                                           THEN
                                              'Si'
                                           ELSE
                                              'No'
                                        END
                                           tercero
                                   FROM bcj_solicitud_efectivo e
                                  WHERE     e.cod_empresa = pempresa
                                        AND e.tipo_solicitud = 'I'
                                        AND e.estado = 'E'
                               ORDER BY FECHA_ENVIO)
                        WHERE SECUENCIA BETWEEN vConteo AND (vConteo + vCantCorte) - 1)  --kadames-excello 26/05/2023
                LOOP
                   vBody :=
                         vBody                  || '<tr>
                <td>'
                      || TO_CHAR (x.FECHA_ENVIO, 'dd/mm/rrrr hh24:mi')
                      || '</td>
                <td>'
                      || x.ENVIADO_POR
                      || '</td>
                <td>'
                      || x.COD_AGENCIA_ORIGEN
                      || ' - '
                      || x.desc_COD_AGENCIA_ORIGEN
                      || '</td>
                <td>'
                      || x.COD_AGENCIA_DESTINO
                      || ' - '
                      || x.desc_COD_AGENCIA_DESTINO
                      || '</td>
                <td>'
                      || x.tercero
                      || '</td>
                <td>'
                      || x.cod_moneda
                      || ' - '
                      || x.desc_moneda
                      || '</td>
                <td>'
                      || LTRIM (TO_CHAR (x.MONTO, '999,999,999,990.00'))
                      || '</td>
            </tr>';
                END LOOP;

                vBody := vBody || ' </tbody>
                </table>
                <p>Saludos,</p>
                ';

                pa.send_mail_html (
                   Param.Parametro_X_Empresa (pempresa, 'SERVIDOR_SMTP', 'PA'),
                   'SistemaB2000',
                   Param.Parametro_X_Empresa (pempresa, 'MAIL_SOL_TRS', 'PA'),
                   vAsunto,
                   vBody);

                --kadames -excello 26/05/2023
                --Inicio
                vConteo := vConteo + vCantCorte;

                EXIT WHEN vExistenPendientes < vConteo;
             END LOOP;
                 --Fin
          END IF;
       END IF;
    EXCEPTION
       WHEN OTHERS
       THEN
          DBMS_OUTPUT.put_line (
                'No se pudo enviar el correo de notificaci√≥n de Traslados Pendientes de Recibir:'
             || SQLERRM);
    END;
    --Fin

   --Cristomino Pereyra Simetrica 16/05/2024
   PROCEDURE Actualiza_comprobante_ingreso_incompleto IS

     cursor c_asientos is 
     select NUMERO_ASIENTO_CONTABLE
     from bcj_solicitud 
     where CODIGO_EMPRESA = VARIABLES.codempresa
     and FECHA_COMPROBANTE = VARIABLES.fecha_cal
     and ESTADO_COMPROBANTE = 'B'
     and NUMERO_ASIENTO_CONTABLE in (select numero_asiento from cg_movimiento_resumen 
                                     where codigo_empresa = VARIABLES.codempresa
                                     and fecha_movimiento = VARIABLES.fecha_cal
                                     and codigo_aplicacion = 'BCJ'
                                     and codigo_tipo_transaccion = 1
                                     and estado = 'I');

   BEGIN

     for z in c_asientos loop
        
        update cg_movimiento_resumen
           set estado = 'N'
        where codigo_empresa = VARIABLES.codempresa
          and fecha_movimiento = VARIABLES.fecha_cal
          and codigo_aplicacion = 'BCJ'
          and codigo_tipo_transaccion = 1
          and estado = 'I'
          and numero_asiento = z.numero_asiento_contable;

        update cg_movimiento_detalle
           set estado = 'N'
        where codigo_empresa = VARIABLES.codempresa
          and fecha_movimiento = VARIABLES.fecha_cal
          and codigo_aplicacion = 'BCJ'
          and codigo_tipo_transaccion = 1
          and estado = 'I'
          and numero_asiento = z.numero_asiento_contable;
      
     end loop; 
     
   END Actualiza_comprobante_ingreso_incompleto;
   
END PKG_CIERRE_DIARIO_PA;
/